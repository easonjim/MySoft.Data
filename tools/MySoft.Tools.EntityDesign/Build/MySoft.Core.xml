<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MySoft.Core</name>
    </assembly>
    <members>
        <member name="T:MySoft.EnumDescriptionAttribute">
            <summary>
            对任意类型添加文字描述
            </summary>
        </member>
        <member name="M:MySoft.EnumDescriptionAttribute.GetDescription(System.Object)">
            <summary>
            获取枚举类型的描述
            </summary>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.EnumDescriptionAttribute.GetDescriptions(System.Type)">
            <summary>
            获取枚举类型的所有描述
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Task.TaskThreadPool">
            <summary>
            任务线程池
            </summary>
        </member>
        <member name="F:MySoft.Task.TaskThreadPool.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:MySoft.Task.TaskThreadPool.Threads">
            <summary>
            
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingServiceHelper">
            <summary>
            The Remoting Service Helper.
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingServerHelper">
            <summary>
            The Remoting Service Helper.
            </summary>
        </member>
        <member name="T:MySoft.Logger.ILogable">
            <summary>
            Mark a implementing class as loggable.
            </summary>
        </member>
        <member name="E:MySoft.Logger.ILogable.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerHelper.#ctor(MySoft.Remoting.RemotingChannelType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.Remoting.RemotingServerHelper"/> class.
            </summary>
            <param name="channelType">Type of the channel.</param>
            <param name="serverAddress">The server address.</param>
            <param name="serverPort">The server port.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerHelper.PublishWellKnownServiceInstance(System.String,System.Type,System.Runtime.Remoting.WellKnownObjectMode)">
            <summary>
            Publishes the well known service instance.
            </summary>
            <param name="notifyName">Name of the notify.</param>
            <param name="interfaceType">Type of the interface.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerHelper.PublishWellKnownServiceInstance(System.String,System.Type,System.MarshalByRefObject,System.Runtime.Remoting.WellKnownObjectMode)">
            <summary>
            Publishes the well known service instance.
            </summary>
            <param name="notifyName">Name of the notify.</param>
            <param name="interfaceType">Type of the interface.</param>
            <param name="instance">The instance.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerHelper.PublishActivatedService(System.Type)">
            <summary>
            Publishes the activated service.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:MySoft.Remoting.RemotingServerHelper.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingServiceHelper.PublishWellKnownServiceInstance">
            <summary>
            发布知名对象服务器端实例（远程对象已在配置文件中定义）
            </summary>
        </member>
        <member name="T:MySoft.Threading.WorkItemCallback">
            <summary>
            A delegate that represents the method to run as the work item
            </summary>
            <param name="state">A state object for the method to run</param>
        </member>
        <member name="T:MySoft.Threading.PostExecuteWorkItemCallback">
            <summary>
            A delegate to call after the WorkItemCallback completed
            </summary>
            <param name="wir">The work item result object</param>
        </member>
        <member name="T:MySoft.Threading.PostExecuteWorkItemCallback`1">
            <summary>
            A delegate to call after the WorkItemCallback completed
            </summary>
            <param name="wir">The work item result object</param>
        </member>
        <member name="T:MySoft.Threading.WorkItemsGroupIdleHandler">
            <summary>
            A delegate to call when a WorkItemsGroup becomes idle
            </summary>
            <param name="workItemsGroup">A reference to the WorkItemsGroup that became idle</param>
        </member>
        <member name="T:MySoft.Threading.ThreadInitializationHandler">
            <summary>
            A delegate to call after a thread is created, but before 
            it's first use.
            </summary>
        </member>
        <member name="T:MySoft.Threading.ThreadTerminationHandler">
            <summary>
            A delegate to call when a thread is about to exit, after 
            it is no longer belong to the pool.
            </summary>
        </member>
        <member name="T:MySoft.Threading.WorkItemPriority">
            <summary>
            Defines the availeable priorities of a work item.
            The higher the priority a work item has, the sooner
            it will be executed.
            </summary>
        </member>
        <member name="T:MySoft.Threading.IWorkItemsGroup">
            <summary>
            IWorkItemsGroup interface
            Created by SmartThreadPool.CreateWorkItemsGroup()
            </summary>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.GetStates">
            <summary>
            Get an array with all the state objects of the currently running items.
            The array represents a snap shot and impact performance.
            </summary>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.Start">
            <summary>
            Starts to execute work items
            </summary>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.Cancel">
            <summary>
            Cancel all the work items.
            Same as Cancel(false)
            </summary>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.Cancel(System.Boolean)">
            <summary>
            Cancel all work items using thread abortion
            </summary>
            <param name="abortExecution">True to stop work items by raising ThreadAbortException</param>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.WaitForIdle">
            <summary>
            Wait for all work item to complete.
            </summary>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.WaitForIdle(System.TimeSpan)">
            <summary>
            Wait for all work item to complete, until timeout expired
            </summary>
            <param name="timeout">How long to wait for the work items to complete</param>
            <returns>Returns true if work items completed within the timeout, otherwise false.</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.WaitForIdle(System.Int32)">
            <summary>
            Wait for all work item to complete, until timeout expired
            </summary>
            <param name="millisecondsTimeout">How long to wait for the work items to complete in milliseconds</param>
            <returns>Returns true if work items completed within the timeout, otherwise false.</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>        
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.WorkItemCallback,MySoft.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="workItemPriority">The priority of the work item</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback,MySoft.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback,MySoft.Threading.CallToPostExecute)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback,MySoft.Threading.CallToPostExecute,MySoft.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.WorkItemInfo,MySoft.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item info</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.WorkItemInfo,MySoft.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem(MySoft.Threading.Action)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem``1(System.Action{``0},``0)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem``2(MySoft.Threading.Action{``0,``1},``0,``1)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem``3(MySoft.Threading.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem``4(MySoft.Threading.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <!-- 对于成员“M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem``1(MySoft.Threading.Func{``0})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem``2(MySoft.Threading.Func{``0,``1},``0)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem``3(MySoft.Threading.Func{``0,``1,``2},``0,``1)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem``4(MySoft.Threading.Func{``0,``1,``2,``3},``0,``1,``2)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:MySoft.Threading.IWorkItemsGroup.QueueWorkItem``5(MySoft.Threading.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)”忽略有格式错误的 XML 注释 -->
        <member name="P:MySoft.Threading.IWorkItemsGroup.Name">
            <summary>
            Get/Set the name of the WorkItemsGroup
            </summary>
        </member>
        <member name="P:MySoft.Threading.IWorkItemsGroup.Concurrency">
            <summary>
            Get/Set the maximum number of workitem that execute cocurrency on the thread pool
            </summary>
        </member>
        <member name="P:MySoft.Threading.IWorkItemsGroup.WaitingCallbacks">
            <summary>
            Get the number of work items waiting in the queue.
            </summary>
        </member>
        <member name="P:MySoft.Threading.IWorkItemsGroup.WIGStartInfo">
            <summary>
            Get the WorkItemsGroup start information
            </summary>
        </member>
        <member name="P:MySoft.Threading.IWorkItemsGroup.IsIdle">
            <summary>
            IsIdle is true when there are no work items running or queued.
            </summary>
        </member>
        <member name="E:MySoft.Threading.IWorkItemsGroup.OnIdle">
            <summary>
            This event is fired when all work items are completed.
            (When IsIdle changes to true)
            This event only work on WorkItemsGroup. On SmartThreadPool
            it throws the NotImplementedException.
            </summary>
        </member>
        <member name="F:MySoft.Threading.CallToPostExecute.Never">
            <summary>
            Never call to the PostExecute call back
            </summary>
        </member>
        <member name="F:MySoft.Threading.CallToPostExecute.WhenWorkItemCanceled">
            <summary>
            Call to the PostExecute only when the work item is cancelled
            </summary>
        </member>
        <member name="F:MySoft.Threading.CallToPostExecute.WhenWorkItemNotCanceled">
            <summary>
            Call to the PostExecute only when the work item is not cancelled
            </summary>
        </member>
        <member name="F:MySoft.Threading.CallToPostExecute.Always">
            <summary>
            Always call to the PostExecute
            </summary>
        </member>
        <!-- 对于成员“T:MySoft.Threading.IWaitableResult”忽略有格式错误的 XML 注释 -->
        <member name="M:MySoft.Threading.IWaitableResult.GetWorkItemResult">
            <summary>
            This method intent is for internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Threading.IWaitableResult.GetWorkItemResultT``1">
            <summary>
            This method intent is for internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Threading.IWorkItemResult">
            <summary>
            IWorkItemResult interface.
            Created when a WorkItemCallback work item is queued.
            </summary>
        </member>
        <!-- 对于成员“T:MySoft.Threading.IWorkItemResult`1”忽略有格式错误的 XML 注释 -->
        <member name="M:MySoft.Threading.IWorkItemResult`1.GetResult">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits.
            </summary>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds, or -1 for infinite</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the blocking if needed</param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.GetResult(System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits.
            </summary>
            <param name="e">Filled with the exception if one was thrown</param>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <param name="millisecondsTimeout"></param>
            <param name="exitContext"></param>
            <param name="e">Filled with the exception if one was thrown</param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <param name="exitContext"></param>
            <param name="e">Filled with the exception if one was thrown</param>
            <param name="timeout"></param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds, or -1 for infinite</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the blocking if needed</param>
            <param name="e">Filled with the exception if one was thrown</param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean,System.Threading.WaitHandle,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <returns>The result of the work item</returns>
            <param name="cancelWaitHandle"></param>
            <param name="e">Filled with the exception if one was thrown</param>
            <param name="timeout"></param>
            <param name="exitContext"></param>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.Cancel">
            <summary>
            Same as Cancel(false).
            </summary>
        </member>
        <member name="M:MySoft.Threading.IWorkItemResult`1.Cancel(System.Boolean)">
            <summary>
            Cancel the work item execution.
            If the work item is in the queue then it won't execute
            If the work item is completed, it will remain completed
            If the work item is in progress then the user can check the SmartThreadPool.IsWorkItemCanceled
              property to check if the work item has been cancelled. If the abortExecution is set to true then
              the Smart Thread Pool will send an AbortException to the running thread to stop the execution 
              of the work item. When an in progress work item is canceled its GetResult will throw WorkItemCancelException.
            If the work item is already cancelled it will remain cancelled
            </summary>
            <param name="abortExecution">When true send an AbortException to the executing thread.</param>
            <returns>Returns true if the work item was not completed, otherwise false.</returns>
        </member>
        <member name="P:MySoft.Threading.IWorkItemResult`1.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:MySoft.Threading.IWorkItemResult`1.IsCanceled">
            <summary>
            Gets an indication whether the asynchronous operation has been canceled.
            </summary>
        </member>
        <member name="P:MySoft.Threading.IWorkItemResult`1.State">
            <summary>
            Gets the user-defined object that contains context data 
            for the work item method.
            </summary>
        </member>
        <member name="P:MySoft.Threading.IWorkItemResult`1.WorkItemPriority">
            <summary>
            Get the work item's priority
            </summary>
        </member>
        <member name="P:MySoft.Threading.IWorkItemResult`1.Result">
            <summary>
            Return the result, same as GetResult()
            </summary>
        </member>
        <member name="P:MySoft.Threading.IWorkItemResult`1.Exception">
            <summary>
            Returns the exception if occured otherwise returns null.
            </summary>
        </member>
        <member name="T:MySoft.Threading.Internal.EventWaitHandleFactory">
            <summary>
            EventWaitHandleFactory class.
            This is a static class that creates AutoResetEvent and ManualResetEvent objects.
            In WindowCE the WaitForMultipleObjects API fails to use the Handle property 
            of XxxResetEvent. It can use only handles that were created by the CreateEvent API.
            Consequently this class creates the needed XxxResetEvent and replaces the handle if
            it's a WindowsCE OS.
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.EventWaitHandleFactory.CreateAutoResetEvent">
            <summary>
            Create a new AutoResetEvent object
            </summary>
            <returns>Return a new AutoResetEvent object</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.EventWaitHandleFactory.CreateManualResetEvent(System.Boolean)">
            <summary>
            Create a new ManualResetEvent object
            </summary>
            <returns>Return a new ManualResetEvent object</returns>
        </member>
        <member name="T:MySoft.Logger.ILog">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:MySoft.Logger.ILog.WriteLog(System.String,MySoft.Logger.LogType)">
            <summary>
            Writes the log.
            </summary>
            <param name="log">The log info.</param>
        </member>
        <member name="M:MySoft.Logger.ILog.WriteError(System.Exception)">
            <summary>
            Writes the exception.
            </summary>
            <param name="exception">The exception info.</param>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the writer is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the writer is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Indicates how the output is formatted.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current Json token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current Json token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            The Read method has not been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            The Close method has been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            Reader in a constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:MySoft.IoC.ContractAttribute">
            <summary>
            约束的基类
            </summary>
        </member>
        <member name="P:MySoft.IoC.ContractAttribute.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.ContractAttribute.AllowCache">
            <summary>
            是否允许缓存
            </summary>
        </member>
        <member name="P:MySoft.IoC.ContractAttribute.Timeout">
            <summary>
            超时时间（单位：秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.ContractAttribute.CacheTime">
            <summary>
            缓存时间（单位：秒）
            </summary>
        </member>
        <member name="T:MySoft.ContentPager">
            <summary>
            内容分页器
            </summary>
        </member>
        <member name="M:MySoft.ContentPager.#ctor(System.String,System.Int32)">
            <summary>
            内容分页处理
            </summary>
            <param name="content">内容</param>
            <param name="words">每页字数</param>
        </member>
        <member name="M:MySoft.ContentPager.GetContent(System.Int32)">
            <summary>
            获取分布的内容
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.ContentPager.GetContentOther(System.Int32)">
            <summary>
            获取剩余的内容
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.ContentPager.GetLen(System.String)">
            <summary>
            返回字符串的真实长度，一个汉字字符相当于两个单位长度
            </summary>
            <param name="str">指定字符串</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.ContentPager.GetPage(System.String,System.Int32,System.Int32)">
            <summary>
            按照字符串的实际长度截取指定长度的字符串
            </summary>
            <param name="text">字符串</param>
            <param name="length">指定长度</param>
            <returns></returns>
        </member>
        <member name="P:MySoft.ContentPager.PageCount">
            <summary>
            总共页数
            </summary>
        </member>
        <member name="T:SharpZip.Encryption.ZipAESTransform">
            <summary>
            Transforms stream using AES in CTR mode
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.ZipAESTransform.#ctor(System.String,System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Constructor.
             </summary>
             <param name="key">Password string</param>
             <param name="saltBytes">Random bytes, length depends on encryption strength.
             128 bits = 8 bytes, 192 bits = 12 bytes, 256 bits = 16 bytes.</param>
             <param name="blockSize">The encryption strength, in bytes eg 16 for 128 bits.</param>
             <param name="writeMode">True when creating a zip, false when reading. For the AuthCode.</param>
            
        </member>
        <member name="M:SharpZip.Encryption.ZipAESTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Implement the ICryptoTransform method.
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.ZipAESTransform.GetAuthCode">
            <summary>
            Returns the 10 byte AUTH CODE to be checked or appended immediately following the AES data stream.
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.ZipAESTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.ZipAESTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.ZipAESTransform.PwdVerifier">
            <summary>
            Returns the 2 byte password verifier
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.ZipAESTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.ZipAESTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.ZipAESTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.ZipAESTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="T:SharpZip.BZip2.BZip2">
            <summary>
            An example class to demonstrate compression and decompression of BZip2 streams.
            </summary>
        </member>
        <member name="M:SharpZip.BZip2.BZip2.Decompress(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Decompress the <paramref name="inStream">input</paramref> writing 
            uncompressed data to the <paramref name="outStream">output stream</paramref>
            </summary>
            <param name="inStream">The readable stream containing data to decompress.</param>
            <param name="outStream">The output stream to receive the decompressed data.</param>
            <param name="isStreamOwner">Both streams are closed on completion if true.</param>
        </member>
        <member name="M:SharpZip.BZip2.BZip2.Compress(System.IO.Stream,System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Compress the <paramref name="inStream">input stream</paramref> sending 
            result data to <paramref name="outStream">output stream</paramref>
            </summary>
            <param name="inStream">The readable stream to compress.</param>
            <param name="outStream">The output stream to receive the compressed data.</param>
            <param name="isStreamOwner">Both streams are closed on completion if true.</param>
            <param name="level">Block size acts as compression level (1 to 9) with 1 giving 
            the lowest compression and 9 the highest.</param>
        </member>
        <member name="T:MySoft.Aop.IAopOperator">
            <summary>
            IAopOperator AOP操作符接口，包括前处理和后处理
            2010.11.09
            </summary>
        </member>
        <member name="M:MySoft.Aop.IAopOperator.PreProceed(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            前置处理
            </summary>
            <param name="requestMsg"></param>
        </member>
        <member name="M:MySoft.Aop.IAopOperator.PostProceed(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Runtime.Remoting.Messaging.IMethodReturnMessage@)">
            <summary>
            后置处理
            </summary>
            <param name="requestMsg"></param>
            <param name="respondMsg"></param>
        </member>
        <member name="T:MySoft.Remoting.Configuration.RemotingHost">
            <summary>
            RemotingHost实体类
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingHost.Name">
            <summary>
            RemotingHost Name
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingHost.DefaultServer">
            <summary>
            默认服务器
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingHost.Servers">
            <summary>
            Remoting服务器集合
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingHost.Modules">
            <summary>
            远程对象业务模块集合
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingHost.IsChecking">
            <summary>
            该服务器是否正在被检测
            </summary>
        </member>
        <member name="T:MySoft.Remoting.Configuration.RemotingServerConfiguration">
            <summary>
            Remoting服务端配置
            <example>
            <code>
            <configuration>
                <configSections>
            	    <sectionGroup name="mysoft.framework">
            		    <section name="remotingServer" type="MySoft.Remoting.Configuration.RemotingServerConfigurationHandler, MySoft"/>
            	    </sectionGroup>
                </configSections>
                <system.web>
            	......
                </system.web>
                <mysoft.framework>
            	    <remotingServer>
                        <server channelType="tcp" serverAddress="127.0.0.1" port="8888" compress="true"/>
            		    <remoteObject name="基金净值" assemblyName="Shumi.BLL" className="SB.NetValue" mode="singleton" />
            		    <remoteObject name="基金净值" assemblyName="Shumi.BLL" className="SB.NetValue" mode="singlecall" />
            	    </remotingServer>
                </mysoft.framework>
            </configuration>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:MySoft.ConfigurationBase">
            <summary>
            配置基类
            </summary>
        </member>
        <member name="M:MySoft.ConfigurationBase.GetStringAttribute(System.Xml.XmlAttributeCollection,System.String,System.String)">
            <summary>
            获取属性（string类型）
            </summary>
        </member>
        <member name="M:MySoft.ConfigurationBase.GetIntAttribute(System.Xml.XmlAttributeCollection,System.String,System.Int32)">
            <summary>
            获取属性（int类型）
            </summary>
        </member>
        <member name="M:MySoft.ConfigurationBase.GetBoolAttribute(System.Xml.XmlAttributeCollection,System.String,System.Boolean)">
            <summary>
            获取属性（bool类型）
            </summary>
        </member>
        <member name="M:MySoft.ConfigurationBase.LoadModules``1(System.Xml.XmlNode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.Configuration.RemotingServerConfiguration.GetConfig">
            <summary>
            获取远程对象配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.Configuration.RemotingServerConfiguration.GetRemoteObjectUrl(System.String)">
            <summary>
            获取远程业务对象Url（如：tcp://127.0.0.1:8888/NetValue）
            </summary>
            <param name="remoteObjectUri">远程对象Uri（如：NetValue）</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.Configuration.RemotingServerConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingServerConfiguration.Modules">
            <summary>
            获取远程对象业务模块集合（部署的URL信息，协议，IP及端口）
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingServerConfiguration.ChannelType">
            <summary>
            通道类型
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingServerConfiguration.ServerAddress">
            <summary>
            服务器地址（IP或计算机名）
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingServerConfiguration.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingServerConfiguration.ServerUrl">
            <summary>
            Remoting服务器Url（如：tcp://127.0.0.1:8888）
            </summary>
        </member>
        <member name="T:MySoft.Remoting.Configuration.RemotingClientConfiguration">
            <summary>
            Remoting客户端配置
            <remarks>
            <code>
            <configuration>
                <configSections>
            	    <sectionGroup name="mysoft.framework">
            		    <section name="remotingClient" type="MySoft.Remoting.Configuration.RemotingClientConfigurationHandler, MySoft"/>
            	    </sectionGroup>
                </configSections>
                <system.web>
            	......
                </system.web>
                <mysoft.framework>
            	    <remotingClient isCheckServer="true" interval="3000" compress="true">
                        <remotingHost name="NetValueClient" defaultServer="s1">
                            <server name="s1" url="tcp://192.168.0.1:8888"/>
                            <server name="s2" url="tcp://192.168.0.2:8888"/>
                            <remoteObject name="NetValue" objectUri="SB.NetValue"/>
                        </remotingHost>
            	    </remotingClient>
                </mysoft.framework>
            </configuration>
            </code>
            </remarks>
            </summary>
        </member>
        <member name="M:MySoft.Remoting.Configuration.RemotingClientConfiguration.GetConfig">
            <summary>
            获取远程对象配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.Configuration.RemotingClientConfiguration.GetRemoteObjectUrl(System.String,System.String)">
            <summary>
            获取远程业务对象Url（比如：tcp://127.0.0.1:8888/NetValue）
            </summary>
            <param name="serverUrl">远程服务器地址（比如：tcp://127.0.0.1:8888）</param>
            <param name="remoteObjectUri">远程对象Uri（如：NetValue）</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.Configuration.RemotingClientConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingClientConfiguration.IsCheckServer">
            <summary>
            是否检测可用服务器
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingClientConfiguration.Interval">
            <summary>
            检测可用服务器定时器的时间间隔
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingClientConfiguration.RemotingHosts">
            <summary>
            RemotingHost集合
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter"/> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
            <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
            <value>The method called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
            <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
            <value>The method called during deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
            <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
            <value>The method called after serialization of the object graph.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
            <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
            <value>The method called before serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether [default creator non public].
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
            <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The method called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
            <value>The override constructor.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
            <value>The parametrized constructor.</value>
        </member>
        <member name="T:Newtonsoft.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            All members are serialized by default. Members can be excluded using the <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            Only members must be marked with the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> are serialized.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.
            </summary>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.</returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.GetEnumNameMap(System.Type)">
            <summary>
            A cached representation of the Enum string representation to respect per Enum field name.
            </summary>
            <param name="t">The type of the Enum.</param>
            <returns>A map of enum field name to either the field name, or the configured enum member name (<see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/>).</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
            <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="T:MySoft.Installer.IServiceRun">
            <summary>
            服务运行基类
            </summary>
        </member>
        <member name="M:MySoft.Installer.IServiceRun.Init">
            <summary>
            初始化服务
            </summary>
        </member>
        <member name="M:MySoft.Installer.IServiceRun.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:MySoft.Installer.IServiceRun.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="P:MySoft.Installer.IServiceRun.StartMode">
            <summary>
            设置运行类型
            </summary>
        </member>
        <member name="T:MySoft.Installer.StartMode">
            <summary>
            运行类型
            </summary>
        </member>
        <member name="F:MySoft.Installer.StartMode.Service">
            <summary>
            服务
            </summary>
        </member>
        <member name="F:MySoft.Installer.StartMode.Console">
            <summary>
            控制台
            </summary>
        </member>
        <member name="T:SharpZip.Core.PathFilter">
            <summary>
            PathFilter filters directories and files using a form of <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see>
            by full path name.
            See <see cref="T:SharpZip.Core.NameFilter">NameFilter</see> for more detail on filtering.
            </summary>
        </member>
        <member name="T:SharpZip.Core.IScanFilter">
            <summary>
            Scanning filters support filtering of names.
            </summary>
        </member>
        <member name="M:SharpZip.Core.IScanFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it 'matches' the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name matches the filter, false if it does not match.</returns>
        </member>
        <member name="M:SharpZip.Core.PathFilter.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Core.PathFilter"></see>.
            </summary>
            <param name="filter">The <see cref="T:SharpZip.Core.NameFilter">filter</see> expression to apply.</param>
        </member>
        <member name="M:SharpZip.Core.PathFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it matches the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>True if the name matches, false otherwise.</returns>
            <remarks><see cref="M:System.IO.Path.GetFullPath(System.String)"/> is used to get the full path before matching.</remarks>
        </member>
        <member name="T:SharpZip.Core.ExtendedPathFilter">
            <summary>
            ExtendedPathFilter filters based on name, file size, and the last write time of the file.
            </summary>
            <remarks>Provides an example of how to customise filtering.</remarks>
        </member>
        <member name="M:SharpZip.Core.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:SharpZip.Core.ExtendedPathFilter.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:SharpZip.Core.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:SharpZip.Core.ExtendedPathFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The <see paramref="fileName"/> doesnt exist</exception>
        </member>
        <member name="P:SharpZip.Core.ExtendedPathFilter.MinSize">
            <summary>
            Get/set the minimum size/length for a file that will match this filter.
            </summary>
            <remarks>The default value is zero.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero; greater than <see cref="P:SharpZip.Core.ExtendedPathFilter.MaxSize"/></exception>
        </member>
        <member name="P:SharpZip.Core.ExtendedPathFilter.MaxSize">
            <summary>
            Get/set the maximum size/length for a file that will match this filter.
            </summary>
            <remarks>The default value is <see cref="F:System.Int64.MaxValue"/></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero or less than <see cref="P:SharpZip.Core.ExtendedPathFilter.MinSize"/></exception>
        </member>
        <member name="P:SharpZip.Core.ExtendedPathFilter.MinDate">
            <summary>
            Get/set the minimum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time less than this value are excluded by the filter.</remarks>
        </member>
        <member name="P:SharpZip.Core.ExtendedPathFilter.MaxDate">
            <summary>
            Get/set the maximum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time greater than this value are excluded by the filter.</remarks>
        </member>
        <member name="T:SharpZip.Core.NameAndSizeFilter">
            <summary>
            NameAndSizeFilter filters based on name and file size.
            </summary>
            <remarks>A sample showing how filters might be extended.</remarks>
        </member>
        <member name="M:SharpZip.Core.NameAndSizeFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of NameAndSizeFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:SharpZip.Core.NameAndSizeFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
        </member>
        <member name="P:SharpZip.Core.NameAndSizeFilter.MinSize">
            <summary>
            Get/set the minimum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:SharpZip.Core.NameAndSizeFilter.MaxSize">
            <summary>
            Get/set the maximum size for a file that will match this filter.
            </summary>
        </member>
        <member name="T:MySoft.IDataPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:MySoft.IDataPage.PageSize">
            <summary>
            获取或设置页大小
            </summary>
        </member>
        <member name="P:MySoft.IDataPage.RowCount">
            <summary>
            获取或设置记录数
            </summary>
        </member>
        <member name="P:MySoft.IDataPage.CurrentPageIndex">
            <summary>
            获取或设置页序数
            </summary>
        </member>
        <member name="P:MySoft.IDataPage.PageCount">
            <summary>
            获取或设置页数
            </summary>
        </member>
        <member name="P:MySoft.IDataPage.IsFirstPage">
            <summary>
             获取一个值，该值指示当前页是否是首页
            </summary>
        </member>
        <member name="P:MySoft.IDataPage.IsLastPage">
            <summary>
            获取一个值，该值指示当前页是否是最后一页
            </summary>
        </member>
        <member name="P:MySoft.IDataPage.CurrentRowCount">
            <summary>
            获取当前数据源的记录数
            </summary>
        </member>
        <member name="P:MySoft.IDataPage.CurrentStartIndex">
            <summary>
            获取开始记录数
            </summary>
        </member>
        <member name="P:MySoft.IDataPage.CurrentEndIndex">
            <summary>
            获取结束记录数
            </summary>
        </member>
        <member name="P:MySoft.IDataPage.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="P:MySoft.IDataPage`1.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="T:MySoft.CoreHelper">
            <summary>
            常用方法
            </summary>
        </member>
        <member name="M:MySoft.CoreHelper.GetClientIP">
            <summary>
            获取客户端IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetFullPath(System.String)">
            <summary>
            获取当前某文件绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetTypeDefaultValue(System.Type)">
            <summary>
            获取指定类型的默认值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.DefaultValue``1">
            <summary>
            Defaults the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.RemoveSurplusSpaces(System.String)">
            <summary>
            移除多余的空格，保留一个空格
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.CheckStructType(System.Object)">
            <summary>
            检测是否结构类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.CheckStructType(System.Type)">
            <summary>
            检测是否结构类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.CloneObject(System.Object)">
            <summary>
            克隆一个对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.CreateInstance``1">
            <summary>
            快速创建一个T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.CreateInstance``1(System.Type)">
            <summary>
            快速创建一个T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetFastInstanceCreator(System.Type)">
            <summary>
            创建一个委托
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetFastMethodInvoke(System.Reflection.MethodInfo)">
            <summary>
            快速调用方法
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            快速设置属性值
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.CoreHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            快速设置属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.CoreHelper.GetPropertyValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            快速获取属性值
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            快速获取属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.ConvertValue``1(System.Object)">
            <summary>
            转换数据类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.ConvertValue(System.Type,System.Object)">
            <summary>
            转换数据类型
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetMethodsFromType(System.Type)">
            <summary>
            获取所有方法
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetMethodsFromType``1">
            <summary>
            获取所有方法
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetMethodFromType``1(System.String)">
            <summary>
            从类型中获取方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetMethodFromType(System.Type,System.String)">
            <summary>
            从类型中获取方法
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetMemberAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetMemberAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetTypeAttribute``1(System.Type)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetTypeAttributes``1(System.Type)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.ConvertTo``1(System.String,``0)">
            <summary>
            将value转换成对应的类型值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.MakeUniqueKey(System.Int32,System.String)">
            <summary>
            Makes a unique key.
            </summary>
            <param name="length">The length.</param>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.ChangeType(System.Object,System.Type)">
            <summary>
            转换类型
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            获取指定长度的字符串，按字节长度
            </summary>
            <param name="p_SrcString"></param>
            <param name="p_Length"></param>
            <param name="p_TailString"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.Encrypt(System.String,System.String)">
            <summary>
            对字符串进行加密
            </summary>
            <param name="text">待加密的字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:MySoft.CoreHelper.Decrypt(System.String,System.String)">
            <summary>
            对字符串进行解密
            </summary>
            <param name="text">已加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CoreHelper.Compare``1(``0,``0)">
            <summary>
            比较两个值的大小
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Threading.Internal.WorkItem">
            <summary>
            Holds a callback delegate and the state for that delegate.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._callback">
            <summary>
            Callback delegate for the callback.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._state">
            <summary>
            State with which to call the callback delegate.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._callerContext">
            <summary>
            Stores the caller's context
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._result">
            <summary>
            Holds the result of the mehtod
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._exception">
            <summary>
            Hold the exception if the method threw it
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._workItemState">
            <summary>
            Hold the state of the work item
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._workItemCompleted">
            <summary>
            A ManualResetEvent to indicate that the result is ready
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._workItemCompletedRefCount">
            <summary>
            A reference count to the _workItemCompleted. 
            When it reaches to zero _workItemCompleted is Closed
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._workItemResult">
            <summary>
            Represents the result state of the work item
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._workItemInfo">
            <summary>
            Work item info
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._canceledWorkItemsGroup">
            <summary>
            A reference to an object that indicates whatever the 
            WorkItemsGroup has been canceled
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._canceledSmartThreadPool">
            <summary>
            A reference to an object that indicates whatever the 
            SmartThreadPool has been canceled
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._workItemsGroup">
            <summary>
            The work item group this work item belong to.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._executingThread">
            <summary>
            The thread that executes this workitem.
            This field is available for the period when the work item is executed, before and after it is null.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._expirationTime">
            <summary>
            The absulote time when the work item will be timeout
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._waitingOnQueueStopwatch">
            <summary>
            Stores how long the work item waited on the stp queue
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem._processingStopwatch">
            <summary>
            Stores how much time it took the work item to execute after it went out of the queue
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.#ctor(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WorkItemInfo,MySoft.Threading.WorkItemCallback,System.Object)">
            <summary>
            Initialize the callback holding object.
            </summary>
            <param name="workItemsGroup">The workItemGroup of the workitem</param>
            <param name="workItemInfo">The WorkItemInfo of te workitem</param>
            <param name="callback">Callback delegate for the callback.</param>
            <param name="state">State with which to call the callback delegate.</param>
            
            We assume that the WorkItem object is created within the thread
            that meant to run the callback
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.StartingWorkItem">
            <summary>
            Change the state of the work item to in progress if it wasn't canceled.
            </summary>
            <returns>
            Return true on success or false in case the work item was canceled.
            If the work item needs to run a post execute then the method will return true.
            </returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.Execute">
            <summary>
            Execute the work item and the post execute
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.ExecuteWorkItem">
            <summary>
            Execute the work item
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.PostExecute">
            <summary>
            Runs the post execute callback
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.SetResult(System.Object,System.Exception)">
            <summary>
            Set the result of the work item to return
            </summary>
            <param name="result">The result of the work item</param>
            <param name="exception">The exception that was throw while the workitem executed, null
            if there was no exception.</param>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.GetWorkItemResult">
            <summary>
            Returns the work item result
            </summary>
            <returns>The work item result</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.WaitAll(MySoft.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            true when every work item in waitableResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.WaitAny(MySoft.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.
            </returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.GetWaitHandles(MySoft.Threading.IWaitableResult[],System.Threading.WaitHandle[])">
            <summary>
            Fill an array of wait handles with the work items wait handles.
            </summary>
            <param name="waitableResults">An array of work item results</param>
            <param name="waitHandles">An array of wait handles to fill</param>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.ReleaseWaitHandles(MySoft.Threading.IWaitableResult[])">
            <summary>
            Release the work items' wait handles
            </summary>
            <param name="waitableResults">An array of work item results</param>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.SetWorkItemState(MySoft.Threading.Internal.WorkItem.WorkItemState)">
            <summary>
            Sets the work item's state
            </summary>
            <param name="workItemState">The state to set the work item to</param>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.SignalComplete(System.Boolean)">
            <summary>
            Signals that work item has been completed or canceled
            </summary>
            <param name="canceled">Indicates that the work item has been canceled</param>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.Cancel(System.Boolean)">
            <summary>
            Cancel the work item if it didn't start running yet.
            </summary>
            <returns>Returns true on success or false if the work item is in progress or already completed</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits for the result, timeout, or cancel.
            In case of error the method throws and exception
            </summary>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits for the result, timeout, or cancel.
            In case of error the e argument is filled with the exception
            </summary>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItem.GetWaitHandle">
            <summary>
            A wait handle to wait for completion, cancel, or timeout 
            </summary>
        </member>
        <member name="E:MySoft.Threading.Internal.WorkItem._workItemStartedEvent">
            <summary>
            Called when the WorkItem starts
            </summary>
        </member>
        <member name="E:MySoft.Threading.Internal.WorkItem._workItemCompletedEvent">
            <summary>
            Called when the WorkItem completes
            </summary>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItem.IsCompleted">
            <summary>
            Returns true when the work item has completed or canceled
            </summary>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItem.IsCanceled">
            <summary>
            Returns true when the work item has canceled
            </summary>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItem.WorkItemPriority">
            <summary>
            Returns the priority of the work item
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.IInternalWaitableResult.GetWorkItemResult">
            <summary>
            This method is intent for internal use.
            </summary>   
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItem.WorkItemResult._workItem">
            <summary>
            A back reference to the work item
            </summary>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItem.WorkItemResult.Result">
            <summary>
            Return the result, same as GetResult()
            </summary>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItem.WorkItemResult.Exception">
            <summary>
            Returns the exception if occured otherwise returns null.
            This value is valid only after the work item completed,
            before that it is always null.
            </summary>
        </member>
        <member name="T:MySoft.Threading.Internal.WorkItem.WorkItemState">
            <summary>
            Indicates the state of the work item in the thread pool
            </summary>
        </member>
        <member name="T:MySoft.Threading.SmartThreadPool">
            <summary>
            Smart thread pool class.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsGroupBase._name">
            <summary>
            Contains the name of this instance of SmartThreadPool.
            Can be changed by the user.
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.Cancel">
            <summary>
            Cancel all the work items.
            Same as Cancel(false)
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.WaitForIdle">
            <summary>
            Wait for the SmartThreadPool/WorkItemsGroup to be idle
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.WaitForIdle(System.TimeSpan)">
            <summary>
            Wait for the SmartThreadPool/WorkItemsGroup to be idle
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(MySoft.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(MySoft.Threading.WorkItemCallback,MySoft.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="workItemPriority">The priority of the work item</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(MySoft.Threading.WorkItemInfo,MySoft.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item info</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(MySoft.Threading.WorkItemInfo,MySoft.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback,MySoft.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback,MySoft.Threading.CallToPostExecute)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback,MySoft.Threading.CallToPostExecute,MySoft.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItemsGroupBase.Name">
            <summary>
            Get/Set the name of the SmartThreadPool/WorkItemsGroup instance
            </summary>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItemsGroupBase.IsIdle">
            <summary>
            IsIdle is true when there are no work items running or queued.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultMinWorkerThreads">
            <summary>
            Default minimum number of threads the thread pool contains. (0)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultMaxWorkerThreads">
            <summary>
            Default maximum number of threads the thread pool contains. (25)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultIdleTimeout">
            <summary>
            Default idle timeout in milliseconds. (One minute)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultUseCallerCallContext">
            <summary>
            Indicate to copy the security context of the caller and then use it in the call. (false)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultUseCallerHttpContext">
            <summary>
            Indicate to copy the HTTP context of the caller and then use it in the call. (false)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultDisposeOfStateObjects">
            <summary>
            Indicate to dispose of the state objects if they support the IDispose interface. (false)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultCallToPostExecute">
            <summary>
            The default option to run the post execute (CallToPostExecute.Always)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultWorkItemPriority">
            <summary>
            The default work item priority (WorkItemPriority.Normal)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultStartSuspended">
            <summary>
            The default is to work on work items as soon as they arrive
            and not to wait for the start. (false)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultThreadPriority">
            <summary>
            The default thread priority (ThreadPriority.Normal)
            </summary>
        </member>
        <!-- 对于成员“F:MySoft.Threading.SmartThreadPool.DefaultFillStateWithArgs”忽略有格式错误的 XML 注释 -->
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultPostExecuteWorkItemCallback">
            <summary>
            The default post execute method to run. (None)
            When null it means not to call it.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.DefaultPerformanceCounterInstanceName">
            <summary>
            The default name to use for the performance counters instance. (null)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._workerThreads">
            <summary>
            Dictionary of all the threads in the thread pool.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._workItemsQueue">
            <summary>
            Queue of work items.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._workItemsProcessed">
            <summary>
            Count the work items handled.
            Used by the performance counter.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._inUseWorkerThreads">
            <summary>
            Number of threads that currently work (not idle).
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._stpStartInfo">
            <summary>
            Stores a copy of the original STPStartInfo.
            It is used to change the MinThread and MaxThreads
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._currentWorkItemsCount">
            <summary>
            Total number of work items that are stored in the work items queue 
            plus the work items that the threads in the pool are working on.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._isIdleWaitHandle">
            <summary>
            Signaled when the thread pool is idle, i.e. no thread is busy
            and the work items queue is empty
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._shuttingDownEvent">
            <summary>
            An event to signal all the threads to quit immediately.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._isSuspended">
            <summary>
            A flag to indicate if the Smart Thread Pool is now suspended.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._shutdown">
            <summary>
            A flag to indicate the threads to quit.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._threadCounter">
            <summary>
            Counts the threads created in the pool.
            It is used to name the threads.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._isDisposed">
            <summary>
            Indicate that the SmartThreadPool has been disposed
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._workItemsGroups">
            <summary>
            Holds all the WorkItemsGroup instaces that have at least one 
            work item int the SmartThreadPool
            This variable is used in case of Shutdown
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._canceledSmartThreadPool">
            <summary>
            A common object for all the work items int the STP
            so we can mark them to cancel in O(1)
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._windowsPCs">
            <summary>
            Windows STP performance counters
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool._localPCs">
            <summary>
            Local STP performance counters
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="idleTimeout">Idle timeout in milliseconds</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="idleTimeout">Idle timeout in milliseconds</param>
            <param name="maxWorkerThreads">Upper limit of threads in the pool</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="idleTimeout">Idle timeout in milliseconds</param>
            <param name="maxWorkerThreads">Upper limit of threads in the pool</param>
            <param name="minWorkerThreads">Lower limit of threads in the pool</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.#ctor(MySoft.Threading.STPStartInfo)">
            <summary>
            Constructor
            </summary>
            <param name="stpStartInfo">A SmartThreadPool configuration that overrides the default behavior</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Dequeue">
            <summary>
            Waits on the queue for a work item, shutdown, or timeout.
            </summary>
            <returns>
            Returns the WaitingCallback or null in case of timeout or shutdown.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Enqueue(MySoft.Threading.Internal.WorkItem)">
            <summary>
            Put a new work item in the queue
            </summary>
            <param name="workItem">A work item to queue</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.InformCompleted">
            <summary>
            Inform that the current thread is about to quit or quiting.
            The same thread may call this method more than once.
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.StartThreads(System.Int32)">
            <summary>
            Starts new threads
            </summary>
            <param name="threadsCount">The number of threads to start</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.ProcessQueuedItems">
            <summary>
            A worker thread method that processes work items from the work items queue.
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Shutdown">
            <summary>
            Force the SmartThreadPool to shutdown
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Shutdown(System.Boolean,System.TimeSpan)">
            <summary>
            Force the SmartThreadPool to shutdown with timeout
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Shutdown(System.Boolean,System.Int32)">
            <summary>
            Empties the queue of work items and abort the threads in the pool.
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitAll(MySoft.Threading.IWaitableResult[])">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <returns>
            true when every work item in workItemResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitAll(MySoft.Threading.IWaitableResult[],System.TimeSpan,System.Boolean)">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. </param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <returns>
            true when every work item in workItemResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitAll(MySoft.Threading.IWaitableResult[],System.TimeSpan,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. </param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            true when every work item in workItemResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitAll(MySoft.Threading.IWaitableResult[],System.Int32,System.Boolean)">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <returns>
            true when every work item in workItemResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitAll(MySoft.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            true when every work item in workItemResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitAny(MySoft.Threading.IWaitableResult[])">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if any of the work items has been canceled.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitAny(MySoft.Threading.IWaitableResult[],System.TimeSpan,System.Boolean)">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. </param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitAny(MySoft.Threading.IWaitableResult[],System.TimeSpan,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. </param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitAny(MySoft.Threading.IWaitableResult[],System.Int32,System.Boolean)">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitAny(MySoft.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.
            </returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.CreateWorkItemsGroup(System.Int32)">
            <summary>
            Creates a new WorkItemsGroup.
            </summary>
            <param name="concurrency">The number of work items that can be run concurrently</param>
            <returns>A reference to the WorkItemsGroup</returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.CreateWorkItemsGroup(System.Int32,MySoft.Threading.WIGStartInfo)">
            <summary>
            Creates a new WorkItemsGroup.
            </summary>
            <param name="concurrency">The number of work items that can be run concurrently</param>
            <param name="wigStartInfo">A WorkItemsGroup configuration that overrides the default behavior</param>
            <returns>A reference to the WorkItemsGroup</returns>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.AbortOnWorkItemCancel">
            <summary>
            Checks if the work item has been cancelled, and if yes then abort the thread.
            Can be used with Cancel and timeout
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.GetStates">
            <summary>
            Get an array with all the state objects of the currently running items.
            The array represents a snap shot and impact performance.
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Start">
            <summary>
            Start the thread pool if it was started suspended.
            If it is already running, this method is ignored.
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Cancel(System.Boolean)">
            <summary>
            Cancel all work items using thread abortion
            </summary>
            <param name="abortExecution">True to stop work items by raising ThreadAbortException</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.WaitForIdle(System.Int32)">
            <summary>
            Wait for the thread pool to be idle
            </summary>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Join(System.Collections.Generic.IEnumerable{MySoft.Threading.Action})">
            <summary>
            Executes all actions in parallel.
            Returns when they all finish.
            </summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Join(MySoft.Threading.Action[])">
            <summary>
            Executes all actions in parallel.
            Returns when they all finish.
            </summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Choice(System.Collections.Generic.IEnumerable{MySoft.Threading.Action})">
            <summary>
            Executes all actions in parallel
            Returns when the first one completes
            </summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Choice(MySoft.Threading.Action[])">
            <summary>
            Executes all actions in parallel
            Returns when the first one completes
            </summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Pipe``1(``0,System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>
            Executes actions in sequence asynchronously.
            Returns immediately.
            </summary>
            <param name="pipeState">A state context that passes </param>
            <param name="actions">Actions to execute in the order they should run</param>
        </member>
        <member name="M:MySoft.Threading.SmartThreadPool.Pipe``1(``0,System.Action{``0}[])">
            <summary>
            Executes actions in sequence asynchronously.
            Returns immediately.
            </summary>
            <param name="pipeState"></param>
            <param name="actions">Actions to execute in the order they should run</param>
        </member>
        <member name="E:MySoft.Threading.SmartThreadPool._onThreadInitialization">
            <summary>
            An event to call after a thread is created, but before 
            it's first use.
            </summary>
        </member>
        <member name="E:MySoft.Threading.SmartThreadPool._onThreadTermination">
            <summary>
            An event to call when a thread is about to exit, after 
            it is no longer belong to the pool.
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.CurrentThreadEntry">
            <summary>
            A reference to the current work item a thread from the thread pool 
            is executing.
            </summary>
        </member>
        <member name="E:MySoft.Threading.SmartThreadPool.OnThreadInitialization">
            <summary>
            This event is fired when a thread is created.
            Use it to initialize a thread before the work items use it.
            </summary>
        </member>
        <member name="E:MySoft.Threading.SmartThreadPool.OnThreadTermination">
            <summary>
            This event is fired when a thread is terminating.
            Use it for cleanup.
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.MinThreads">
            <summary>
            Get/Set the lower limit of threads in the pool.
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.MaxThreads">
            <summary>
            Get/Set the upper limit of threads in the pool.
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.ActiveThreads">
            <summary>
            Get the number of threads in the thread pool.
            Should be between the lower and the upper limits.
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.InUseThreads">
            <summary>
            Get the number of busy (not idle) threads in the thread pool.
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.IsWorkItemCanceled">
            <summary>
            Returns true if the current running work item has been cancelled.
            Must be used within the work item's callback method.
            The work item should sample this value in order to know if it
            needs to quit before its completion.
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.STPStartInfo">
            <summary>
            Thread Pool start information (readonly)
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.PerformanceCountersReader">
            <summary>
            Return the local calculated performance counters
            Available only if STPStartInfo.EnableLocalPerformanceCounters is true.
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.Concurrency">
            <summary>
            Get/Set the maximum number of work items that execute cocurrency on the thread pool
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.WaitingCallbacks">
            <summary>
            Get the number of work items in the queue.
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.WIGStartInfo">
            <summary>
            WorkItemsGroup start information (readonly)
            </summary>
        </member>
        <member name="E:MySoft.Threading.SmartThreadPool.OnIdle">
            <summary>
            This event is fired when all work items are completed.
            (When IsIdle changes to true)
            This event only work on WorkItemsGroup. On SmartThreadPool
            it throws the NotImplementedException.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.ThreadEntry._creationTime">
            <summary>
            The thread creation time
            The value is stored as UTC value.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.ThreadEntry._lastAliveTime">
            <summary>
            The last time this thread has been running
            It is updated by IAmAlive() method
            The value is stored as UTC value.
            </summary>
        </member>
        <member name="F:MySoft.Threading.SmartThreadPool.ThreadEntry._associatedSmartThreadPool">
            <summary>
            A reference from each thread in the thread pool to its SmartThreadPool
            object container.
            With this variable a thread can know whatever it belongs to a 
            SmartThreadPool.
            </summary>
        </member>
        <member name="P:MySoft.Threading.SmartThreadPool.ThreadEntry.CurrentWorkItem">
            <summary>
            A reference to the current work item a thread from the thread pool 
            is executing.
            </summary>            
        </member>
        <member name="T:MySoft.DynamicProxy">
            <summary>
            动态代理类
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>true if the tokens are equal; otherwise false.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte[]"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader"/> for this token.
            </summary>
            <returns>An <see cref="T:Newtonsoft.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken"/> to the <see cref="T:Newtonsoft.Json.Linq.JToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> that matches the object path or a null reference if no matching token is found.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken"/> to the <see cref="T:Newtonsoft.Json.Linq.JToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> that matches the object path.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>An <see cref="T:Newtonsoft.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject"/> class from another <see cref="T:Newtonsoft.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty"/> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> with the specified name or null.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> of this object's property values.
            </summary>
            <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> of this object's property values.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>true if item was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor"/> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object"/> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="T:MySoft.Installer.Configuration.InstallerConfiguration">
            <summary>
            Specifies the configuration settings in the Web.config for the Installer.
            </summary>
        </member>
        <member name="M:MySoft.Installer.Configuration.InstallerConfiguration.GetConfig">
            <summary>
            GetConfig() returns an instance of the <b>StaticPageConfiguration</b> class with the values populated from
            the Web.config file.  It uses XML deserialization to convert the XML structure in Web.config into
            a <b>StaticPageConfiguration</b> instance.
            </summary>
            <returns>A <see cref="!:StaticPageConfiguration"/> instance.</returns>
        </member>
        <member name="P:MySoft.Installer.Configuration.InstallerConfiguration.ServiceType">
            <summary>
            服务信息
            </summary>
        </member>
        <member name="P:MySoft.Installer.Configuration.InstallerConfiguration.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MySoft.Installer.Configuration.InstallerConfiguration.DisplayName">
            <summary>
            服务显示名称
            </summary>
        </member>
        <member name="P:MySoft.Installer.Configuration.InstallerConfiguration.Description">
            <summary>
            服务描述
            </summary>
        </member>
        <member name="P:MySoft.Installer.Configuration.InstallerConfiguration.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:MySoft.Installer.Configuration.InstallerConfiguration.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:MySoft.CompressType">
            <summary>
            compress Data Type
            </summary>
        </member>
        <member name="F:MySoft.CompressType.None">
            <summary>
            不压缩
            </summary>
        </member>
        <member name="F:MySoft.CompressType.GZip">
            <summary>
            GZip压缩
            </summary>
        </member>
        <member name="F:MySoft.CompressType.Deflate">
            <summary>
            Deflate压缩
            </summary>
        </member>
        <member name="F:MySoft.CompressType.SevenZip">
            <summary>
            7Zip压缩
            </summary>
        </member>
        <member name="F:MySoft.CompressType.SharpZip">
            <summary>
            SharpZip压缩
            </summary>
        </member>
        <member name="T:SharpZip.Zip.HostSystemID">
            <summary>
            Defines known values for the <see cref="T:SharpZip.Zip.HostSystemID"/> property.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.Msdos">
            <summary>
            Host system = MSDOS
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.Amiga">
            <summary>
            Host system = Amiga
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.OpenVms">
            <summary>
            Host system = Open VMS
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.Unix">
            <summary>
            Host system = Unix
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.VMCms">
            <summary>
            Host system = VMCms
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.AtariST">
            <summary>
            Host system = Atari ST
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.OS2">
            <summary>
            Host system = OS2
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.Macintosh">
            <summary>
            Host system = Macintosh
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.ZSystem">
            <summary>
            Host system = ZSystem
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.Cpm">
            <summary>
            Host system = Cpm
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.WindowsNT">
            <summary>
            Host system = Windows NT
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.MVS">
            <summary>
            Host system = MVS
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.Vse">
            <summary>
            Host system = VSE
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.AcornRisc">
            <summary>
            Host system = Acorn RISC
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.Vfat">
            <summary>
            Host system = VFAT
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.AlternateMvs">
            <summary>
            Host system = Alternate MVS
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.BeOS">
            <summary>
            Host system = BEOS
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.Tandem">
            <summary>
            Host system = Tandem
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.OS400">
            <summary>
            Host system = OS400
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.OSX">
            <summary>
            Host system = OSX
            </summary>
        </member>
        <member name="F:SharpZip.Zip.HostSystemID.WinZipAES">
            <summary>
            Host system = WinZIP AES
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix' style paths with relative names only.
            There are with no device names and path elements are separated by '/' characters.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:SharpZip.Zip.ZipEntry.CleanName(System.String)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32,SharpZip.Zip.CompressionMethod)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <param name="method">Compression method for this entry.</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.#ctor(SharpZip.Zip.ZipEntry)">
            <summary>
            Creates a deep copy of the given zip entry.
            </summary>
            <param name="entry">
            The entry to copy.
            </param>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.HasDosAttributes(System.Int32)">
            <summary>
            Test the external attributes for this <see cref="T:SharpZip.Zip.ZipEntry"/> to
            see if the external attributes are Dos based (including WINNT and variants)
            and match the values
            </summary>
            <param name="attributes">The attributes to test.</param>
            <returns>Returns true if the external attributes are known to be DOS/Windows 
            based and have the same attributes set as the value passed.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.ForceZip64">
            <summary>
            Force this entry to be recorded using Zip64 extensions.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.IsZip64Forced">
            <summary>
            Get a value indicating wether Zip64 extensions were forced.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value of true if Zip64 extensions have been forced on; false if not.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.ProcessExtraData(System.Boolean)">
            <summary>
            Process extra data fields updating the entry based on the contents.
            </summary>
            <param name="localHeader">True if the extra data fields should be handled
            for a local header, rather than for a central header.
            </param>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.IsCompressionMethodSupported">
            <summary>
            Test entry to see if data can be extracted.
            </summary>
            <returns>Returns true if data can be extracted for this entry; false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
            <returns>An <see cref="T:System.Object"/> that is a copy of the current instance.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.ToString">
            <summary>
            Gets a string representation of this ZipEntry.
            </summary>
            <returns>A readable textual representation of this <see cref="T:SharpZip.Zip.ZipEntry"/></returns>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.IsCompressionMethodSupported(SharpZip.Zip.CompressionMethod)">
            <summary>
            Test a <see cref="P:SharpZip.Zip.ZipEntry.CompressionMethod">compression method</see> to see if this library
            supports extracting data compressed with that method
            </summary>
            <param name="method">The compression method to test.</param>
            <returns>Returns true if the compression method is supported; false otherwise</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with the ZIP naming convention.
            </summary>
            <param name="name">The name to clean</param>
            <returns>The 'cleaned' name.</returns>
            <remarks>
            The <seealso cref="T:SharpZip.Zip.ZipNameTransform">Zip name transform</seealso> class is more flexible.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.HasCrc">
            <summary>
            Get a value indicating wether the entry has a CRC value available.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:SharpZip.Zip.ZipEntry.Flags">flags</see>
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:SharpZip.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.IsUnicodeText">
            <summary>
            Get / set a flag indicating wether entry name and comment text are
            encoded in <a href="http://www.unicode.org">unicode UTF8</a>.
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:SharpZip.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.CryptoCheckValue">
            <summary>
            Value used during password checking for PKZIP 2.0 / 'classic' encryption.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            <br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-10: Unused or reserved<br/>
            Bit 11: If set the name and comments for this entry are in <a href="http://www.unicode.org">unicode</a>.<br/>
            Bit 12-15: Unused or reserved<br/>
            </remarks>
            <seealso cref="P:SharpZip.Zip.ZipEntry.IsUnicodeText"></seealso>
            <seealso cref="P:SharpZip.Zip.ZipEntry.IsCrypted"></seealso>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
            <remarks>This is only valid when the entry is part of a <see cref="T:SharpZip.Zip.ZipFile"></see></remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:SharpZip.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.IsDOSEntry">
            <summary>
            Get a value indicating this entry is for a DOS/Windows system.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:SharpZip.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            6.3 - File is compressed using LZMA<br/>
            6.3 - File is compressed using PPMD+<br/>
            6.3 - File is encrypted using Blowfish<br/>
            6.3 - File is encrypted using Twofish<br/>
            </remarks>
            <seealso cref="P:SharpZip.Zip.ZipEntry.CanDecompress"></seealso>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.CanDecompress">
            <summary>
            Get a value indicating whether this entry can be decompressed by the library.
            </summary>
            <remarks>This is based on the <see cref="P:SharpZip.Zip.ZipEntry.Version"></see> and 
            wether the <see cref="M:SharpZip.Zip.ZipEntry.IsCompressionMethodSupported">compression method</see> is supported.</remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.LocalHeaderRequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions 
            to store the full entry values.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value of true if a local header requires Zip64 extensions; false if not.</value>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.CentralHeaderRequiresZip64">
            <summary>
            Get a value indicating wether the central directory entry requires Zip64 extensions to be stored.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime value.
            </summary>
            <remarks>
            The MS-DOS date format can only represent dates between 1/1/1980 and 12/31/2107.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
            <remarks>
            The <see cref="P:SharpZip.Zip.ZipEntry.DosTime"></see> property is updated to match this as far as possible.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.Name">
             <summary>
             Returns the entry name.
             </summary>
             <remarks>
             The unix naming convention is followed.
             Path components in the entry should always separated by forward slashes ('/').
             Dos device names like C: should also be removed.
             See the <see cref="T:SharpZip.Zip.ZipNameTransform"/> class, or <see cref="M:SharpZip.Zip.ZipEntry.CleanName(System.String)"/>
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <returns>
            The size or -1 if unknown.
            </returns>
            <remarks>Setting the size before adding an entry to an archive can help
            avoid compatability problems with some archivers which dont understand Zip64 extensions.</remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <returns>
            The compressed entry size or -1 if unknown.
            </returns>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:SharpZip.Zip.CompressionMethod.Deflated"/>
            <see cref="F:SharpZip.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.CompressionMethodForHeader">
            <summary>
            Gets the compression method for outputting to the local or central header.
            Returns same value as CompressionMethod except when AES encrypting, which
            places 99 in the method and places the real method in the extra data.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 64KB (0xffff) bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.AESKeySize">
            <summary>
            For AES encrypted files returns or sets the number of bits of encryption (128, 192 or 256).
            When setting, only 0 (off), 128 or 256 is supported.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.AESEncryptionStrength">
            <summary>
            AES Encryption strength for storage in extra data in entry header.
            1 is 128 bit, 2 is 192 bit, 3 is 256 bit.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.AESSaltLen">
            <summary>
            Returns the length of the salt, in bytes 
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.AESOverheadSize">
            <summary>
            Number of extra bytes required to hold the AES Header fields (Salt, Pwd verify, AuthCode)
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
            <remarks>
            A comment is only available for entries when read via the <see cref="T:SharpZip.Zip.ZipFile"/> class.
            The <see cref="T:SharpZip.Zip.ZipInputStream"/> class doesnt have the comment data available.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating if the entry is a directory.
            however.
            </summary>
            <remarks>
            A directory is determined by an entry name with a trailing slash '/'.
            The external file attributes can also indicate an entry is for a directory.
            Currently only dos/windows attributes are tested in this manner.
            The trailing slash convention should always be followed.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account of DOS/Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="T:SharpZip.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,SharpZip.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="deflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,SharpZip.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufferSize">
            The buffer size in bytes to use when deflating (minimum value 512)
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:SharpZip.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="F:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.AESAuthCode">
            <summary>
            Returns the 10 byte AUTH CODE to be appended immediately following the AES data stream.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given <paramref name="password"/>.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.InitializeAESPassword(SharpZip.Zip.ZipEntry,System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Initializes encryption keys based on given password.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <param name="value">The new stream length.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <returns>The byte read cast to an int.  THe value is -1 if at the end of the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <param name="buffer">The buffer to store read data in.</param>
            <param name="offset">The offset to start storing at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.  Zero if end of stream is detected.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset to start storing data at.</param>
            <param name="count">The number of bytes to read</param>
            <param name="callback">The async callback to use.</param>
            <param name="state">The state to use.</param>
            <returns>Returns an <see cref="T:System.IAsyncResult"/></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset to begin writing at.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to use.</param>
            <param name="state">The state object.</param>
            <returns>Returns an IAsyncResult.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling <see cref="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Flush">Flush</see> on the deflater and then
            on the underlying stream.  This ensures that all bytes are flushed.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls <see cref="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Finish"/> and closes the underlying
            stream when <see cref="P:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">
            The byte value.
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">
            The byte array
            </param>
            <param name="offset">
            The offset into the byte array where to start.
            </param>
            <param name="count">
            The number of bytes to write.
            </param>
        </member>
        <member name="F:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.buffer_">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.deflater_">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream_">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            </summary>
            <remarks>When set to null or if the password is empty no encryption is performed</remarks>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="T:SharpZip.Tar.TarOutputStream">
            <summary>
            The TarOutputStream writes a UNIX tar archive as an OutputStream.
            Methods are provided to put entries, and then write their contents
            by writing to this stream using write().
            </summary>
            public
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct TarOutputStream using default block factor
            </summary>
            <param name="outputStream">stream to write to</param>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarOutputStream with user specified block factor
            </summary>
            <param name="outputStream">stream to write to</param>
            <param name="blockFactor">blocking factor</param>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            set the position within the current stream
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek to</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            </summary>
            <param name="value">The new stream length.</param>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.ReadByte">
            <summary>
            Read a byte from the stream and advance the position within the stream 
            by one byte or returns -1 if at the end of the stream.
            </summary>
            <returns>The byte value or -1 if at end of stream</returns>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read bytes from the current stream and advance the position within the 
            stream by the number of bytes read.
            </summary>
            <param name="buffer">The buffer to store read bytes in.</param>
            <param name="offset">The index into the buffer to being storing bytes at.</param>
            <param name="count">The desired number of bytes to read.</param>
            <returns>The total number of bytes read, or zero if at the end of the stream.
            The number of bytes may be less than the <paramref name="count">count</paramref>
            requested if data is not avialable.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.Flush">
            <summary>
            All buffered data is written to destination
            </summary>		
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.Finish">
            <summary>
            Ends the TAR archive without closing the underlying OutputStream.
            The result is that the EOF block of nulls is written.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.Close">
            <summary>
            Ends the TAR archive and closes the underlying OutputStream.
            </summary>
            <remarks>This means that Finish() is called followed by calling the
            TarBuffer's Close().</remarks>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            The TarBuffer record size.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.PutNextEntry(SharpZip.Tar.TarEntry)">
            <summary>
            Put an entry on the output stream. This writes the entry's
            header and positions the output stream for writing
            the contents of the entry. Once this method is called, the
            stream is ready for calls to write() to write the entry's
            contents. Once the contents are written, closeEntry()
            <B>MUST</B> be called to ensure that all buffered data
            is completely written to the output stream.
            </summary>
            <param name="entry">
            The TarEntry to be written to the archive.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.CloseEntry">
            <summary>
            Close an entry. This method MUST be called for all file
            entries that contain data. The reason is that we must
            buffer data written to the stream in order to satisfy
            the buffer's block based writes. Thus, there may be
            data fragments still being assembled that must be written
            to the output stream before this entry is closed and the
            next entry written.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current tar archive entry.
            This method simply calls Write(byte[], int, int).
            </summary>
            <param name="value">
            The byte to be written.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the current tar archive entry. This method
            is aware of the current entry and will throw an exception if
            you attempt to write bytes past the length specified for the
            current entry. The method is also (painfully) aware of the
            record buffering required by TarBuffer, and manages buffers
            that are not a multiple of recordsize in length, including
            assembling records from small buffers.
            </summary>
            <param name = "buffer">
            The buffer to write to the archive.
            </param>
            <param name = "offset">
            The offset in the buffer from which to get bytes.
            </param>
            <param name = "count">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarOutputStream.WriteEofBlock">
            <summary>
            Write an EOF (end of archive) block to the tar archive.
            An EOF block consists of all zeros.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarOutputStream.currBytes">
            <summary>
            bytes written for this entry so far
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarOutputStream.assemblyBufferLength">
            <summary>
            current 'Assembly' buffer length
            </summary>		
        </member>
        <member name="F:SharpZip.Tar.TarOutputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarOutputStream.currSize">
            <summary>
            Size for the current entry
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarOutputStream.blockBuffer">
            <summary>
            single block working buffer 
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarOutputStream.assemblyBuffer">
            <summary>
            'Assembly' buffer used to assemble data before writing
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarOutputStream.buffer">
            <summary>
            TarBuffer used to provide correct blocking factor
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarOutputStream.outputStream">
            <summary>
            the destination stream for the archive contents
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:SharpZip.Tar.TarOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarOutputStream.CanRead">
            <summary>
            true if the stream supports reading; otherwise, false.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarOutputStream.CanSeek">
            <summary>
            true if the stream supports seeking; otherwise, false.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarOutputStream.CanWrite">
            <summary>
            true if stream supports writing; otherwise, false.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarOutputStream.Length">
            <summary>
            length of stream in bytes
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarOutputStream.Position">
            <summary>
            gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarOutputStream.RecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarOutputStream.IsEntryOpen">
            <summary>
            Get a value indicating wether an entry is open, requiring more data to be written.
            </summary>
        </member>
        <member name="T:SharpZip.Tar.TarInputStream">
            <summary>
            The TarInputStream reads a UNIX tar archive as an InputStream.
            methods are provided to position at each successive entry in
            the archive, and the read each entry as a normal input stream
            using read().
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a TarInputStream with default block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct a TarInputStream with user specified block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
            <param name="blockFactor">block factor to apply to archive</param>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="offset">The offset relative to the origin to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to start seeking from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="value">The new stream length.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="buffer">The buffer containing bytes to write.</param>
            <param name="offset">The offset in the buffer of the frist byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="value">The byte value to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.ReadByte">
            <summary>
            Reads a byte from the current tar archive entry.
            </summary>
            <returns>A byte cast to an int; -1 if the at the end of the stream.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the current tar archive entry.
            
            This method is aware of the boundaries of the current
            entry in the archive and will deal with them appropriately
            </summary>
            <param name="buffer">
            The buffer into which to place bytes read.
            </param>
            <param name="offset">
            The offset at which to place bytes read.
            </param>
            <param name="count">
            The number of bytes to read.
            </param>
            <returns>
            The number of bytes read, or 0 at end of stream/EOF.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.Close">
            <summary>
            Closes this stream. Calls the TarBuffer's close() method.
            The underlying stream is closed by the TarBuffer.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.SetEntryFactory(SharpZip.Tar.TarInputStream.IEntryFactory)">
            <summary>
            Set the entry factory for this instance.
            </summary>
            <param name="factory">The factory for creating new entries</param>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            TarBuffer record size.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.Skip(System.Int64)">
            <summary>
            Skip bytes in the input buffer. This skips bytes in the
            current entry's data, not the entire archive, and will
            stop at the end of the current entry's data if the number
            to skip extends beyond that point.
            </summary>
            <param name="skipCount">
            The number of bytes to skip.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.Mark(System.Int32)">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
            <param name ="markLimit">
            The limit to mark.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.Reset">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.GetNextEntry">
            <summary>
            Get the next entry in this tar archive. This will skip
            over any remaining data in the current entry, if there
            is one, and place the input stream at the header of the
            next entry, and read the header and instantiate a new
            TarEntry from the header bytes and return that entry.
            If there are no more entries in the archive, null will
            be returned to indicate that the end of the archive has
            been reached.
            </summary>
            <returns>
            The next TarEntry in the archive, or null.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.CopyEntryContents(System.IO.Stream)">
            <summary>
            Copies the contents of the current tar archive entry directly into
            an output stream.
            </summary>
            <param name="outputStream">
            The OutputStream into which to write the entry's data.
            </param>
        </member>
        <member name="F:SharpZip.Tar.TarInputStream.hasHitEOF">
            <summary>
            Flag set when last block has been read
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarInputStream.entrySize">
            <summary>
            Size of this entry as recorded in header
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarInputStream.entryOffset">
            <summary>
            Number of bytes read for this entry so far
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarInputStream.readBuffer">
            <summary>
            Buffer used with calls to <code>Read()</code>
            </summary>		
        </member>
        <member name="F:SharpZip.Tar.TarInputStream.tarBuffer">
            <summary>
            Working buffer
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarInputStream.currentEntry">
            <summary>
            Current entry being read
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarInputStream.entryFactory">
            <summary>
            Factory used to create TarEntry or descendant class instance
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarInputStream.inputStream">
            <summary>
            Stream used as the source of input data.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:SharpZip.Tar.TarInputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            This property always returns false.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarInputStream.CanWrite">
            <summary>
            Gets a value indicating if the stream supports writing.
            This property always returns false.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarInputStream.Length">
            <summary>
            The length in bytes of the stream
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarInputStream.Position">
            <summary>
            Gets or sets the position within the stream. 
            Setting the Position is not supported and throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:SharpZip.Tar.TarInputStream.RecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarInputStream.Available">
            <summary>
            Get the available data that can be read from the current
            entry in the archive. This does not indicate how much data
            is left in the entire archive, only in the current entry.
            This value is determined from the entry's size header field
            and the amount of data already read from the current entry.
            </summary>
            <returns>
            The number of available bytes for the current entry.
            </returns>
        </member>
        <member name="P:SharpZip.Tar.TarInputStream.IsMarkSupported">
            <summary>
            Return a value of true if marking is supported; false otherwise.
            </summary>
            <remarks>Currently marking is not supported, the return value is always false.</remarks>
        </member>
        <member name="T:SharpZip.Tar.TarInputStream.IEntryFactory">
            <summary>
            This interface is provided, along with the method <see cref="M:SharpZip.Tar.TarInputStream.SetEntryFactory(SharpZip.Tar.TarInputStream.IEntryFactory)"/>, to allow
            the programmer to have their own <see cref="T:SharpZip.Tar.TarEntry"/> subclass instantiated for the
            entries return from <see cref="M:SharpZip.Tar.TarInputStream.GetNextEntry"/>.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.IEntryFactory.CreateEntry(System.String)">
            <summary>
            Create an entry based on name alone
            </summary>
            <param name="name">
            Name of the new EntryPointNotFoundException to create
            </param>
            <returns>created TarEntry or descendant class</returns>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.IEntryFactory.CreateEntryFromFile(System.String)">
            <summary>
            Create an instance based on an actual file
            </summary>
            <param name="fileName">
            Name of file to represent in the entry
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.IEntryFactory.CreateEntry(System.Byte[])">
            <summary>
            Create a tar entry based on the header information passed
            </summary>
            <param name="headerBuffer">
            Buffer containing header information to create an an entry from.
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="T:SharpZip.Tar.TarInputStream.EntryFactoryAdapter">
            <summary>
            Standard entry factory class creating instances of the class TarEntry
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.String)">
            <summary>
            Create a <see cref="T:SharpZip.Tar.TarEntry"/> based on named
            </summary>
            <param name="name">The name to use for the entry</param>
            <returns>A new <see cref="T:SharpZip.Tar.TarEntry"/></returns>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.EntryFactoryAdapter.CreateEntryFromFile(System.String)">
            <summary>
            Create a tar entry with details obtained from <paramref name="fileName">file</paramref>
            </summary>
            <param name="fileName">The name of the file to retrieve details from.</param>
            <returns>A new <see cref="T:SharpZip.Tar.TarEntry"/></returns>
        </member>
        <member name="M:SharpZip.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.Byte[])">
            <summary>
            Create an entry based on details in <paramref name="headerBuffer">header</paramref>
            </summary>			
            <param name="headerBuffer">The buffer containing entry details.</param>
            <returns>A new <see cref="T:SharpZip.Tar.TarEntry"/></returns>
        </member>
        <member name="T:MySoft.XmlHelper">
            <summary>
            Xml工具
            </summary>
        </member>
        <member name="M:MySoft.XmlHelper.CreateRoot(System.String)">
            <summary>
            创建一个根节点
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.XmlChildNode">
            <summary>
            XmlChildNode 的摘要说明
            </summary>
        </member>
        <member name="M:MySoft.XmlChildNode.#ctor(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            实例化 XmlChildNode
            </summary>
            <param name="doc"></param>
            <param name="node"></param>
        </member>
        <member name="M:MySoft.XmlChildNode.GetNode(System.String)">
            <summary>
            获取一个节点
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlChildNode.GetValueByAttributeValue(System.String,System.String,System.String)">
            <summary>
            通过属性的值获取另一属性的值
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
            <param name="outAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlChildNode.GetValueByAttributeValue(System.String[],System.String[],System.String)">
            <summary>
            通过属性的值获取另一属性的值
            </summary>
            <param name="attributes"></param>
            <param name="values"></param>
            <param name="outAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlChildNode.GetNodesByAttributeValue(System.String,System.String)">
            <summary>
            通过属性的值获取节点
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlChildNode.GetNodesByAttributeValue(System.String[],System.String[])">
            <summary>
            通过属性的值获取节点
            </summary>
            <param name="attributes"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlChildNode.GetNodes(System.String)">
            <summary>
            获取节点列表
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlChildNode.GetAttribute(System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlChildNode.Create(System.String)">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MySoft.XmlChildNode.Create(System.String,System.String)">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MySoft.XmlChildNode.Insert(System.String,System.String)">
            <summary>
            插入节点及值
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlChildNode.Insert(System.String[],System.String[])">
            <summary>
            插入属性及值
            </summary>
            <param name="attributes"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.XmlChildNode.Insert(System.String,System.String,System.String)">
            <summary>
            插入节点、属性及值
            </summary>
            <param name="element"></param>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.XmlChildNode.Insert(System.String,System.String[],System.String[])">
            <summary>
            插入节点、属性及值
            </summary>
            <param name="element"></param>
            <param name="attributes"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.XmlChildNode.Update(System.String,System.String)">
            <summary>
            更新属性值
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.XmlChildNode.Update(System.String[],System.String[])">
            <summary>
            更新属性值
            </summary>
            <param name="attributes"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.XmlChildNode.Delete">
            <summary>
            删除节点
            </summary>
        </member>
        <member name="M:MySoft.XmlChildNode.Delete(System.String)">
            <summary>
            删除属性
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="P:MySoft.XmlChildNode.Item(System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.XmlChildNode.Text">
            <summary>
            获取节点值
            </summary>
        </member>
        <member name="P:MySoft.XmlChildNode.XML">
            <summary>
            获取节点xml
            </summary>
        </member>
        <member name="T:MySoft.XmlRootNode">
            <summary>
            XmlRootNode 的摘要说明
            </summary>
        </member>
        <member name="M:MySoft.XmlRootNode.#ctor(System.String)">
            <summary>
            实例化XmlRootNode
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:MySoft.XmlRootNode.Create(System.String)">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MySoft.XmlRootNode.Create(System.String,System.String)">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MySoft.XmlRootNode.Create(System.String,System.String,System.String)">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlRootNode.Create(System.String,System.String[],System.String[])">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
            <param name="attributes"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlRootNode.GetNode(System.String)">
            <summary>
            获取一个节点
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.XmlRootNode.SetObject(System.Object)">
            <summary>
            将对象设置到当前文档
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.XmlRootNode.Save">
            <summary>
            保存更新
            </summary>
        </member>
        <member name="M:MySoft.XmlRootNode.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:MySoft.XmlRootNode.Item(System.String)">
            <summary>
            获取一个节点
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.CacheHelper">
            <summary>
            缓存管理类
            </summary>
        </member>
        <member name="F:MySoft.CacheHelper.DayFactor">
            <summary>
            DayFactor
            </summary>
        </member>
        <member name="F:MySoft.CacheHelper.HourFactor">
            <summary>
            HourFactor
            </summary>
        </member>
        <member name="F:MySoft.CacheHelper.MinuteFactor">
            <summary>
            MinuteFactor
            </summary>
        </member>
        <member name="F:MySoft.CacheHelper.SecondFactor">
            <summary>
            SecondFactor
            </summary>
        </member>
        <member name="M:MySoft.CacheHelper.ReSetFactor(System.Int32)">
            <summary>
            
            </summary>
            <param name="cacheFactor"></param>
        </member>
        <member name="M:MySoft.CacheHelper.#cctor">
            <summary>
            确保当前HttpContext只有一个Cache实例
            </summary>
        </member>
        <member name="M:MySoft.CacheHelper.Clear">
            <summary>
            清空Cache
            </summary>
        </member>
        <member name="M:MySoft.CacheHelper.RemoveByPattern(System.String)">
            <summary>
            根据正则表达式的模式移除Cache
            </summary>
            <param name="pattern">模式</param>
        </member>
        <member name="M:MySoft.CacheHelper.Remove(System.String)">
            <summary>
            根据键值移除Cache
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MySoft.CacheHelper.Insert(System.String,System.Object)">
            <summary>
            把对象加载到Cache
            </summary>
            <param name="key">键</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:MySoft.CacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            把对象加载到Cache,附加缓存依赖信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:MySoft.CacheHelper.Insert(System.String,System.Object,System.Int32)">
            <summary>
            把对象加载到Cache,附加过期时间信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:MySoft.CacheHelper.Insert(System.String,System.Object,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            把对象加载到Cache,附加过期时间信息和优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
            <param name="priority"></param>
        </member>
        <member name="M:MySoft.CacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32)">
            <summary>
            把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期)
            (默认优先级为High)
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:MySoft.CacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期)及优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="seconds"></param>
            <param name="priority"></param>
        </member>
        <member name="M:MySoft.CacheHelper.MicroInsert(System.String,System.Object,System.Int32)">
            <summary>
            把对象加到缓存并忽略优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:MySoft.CacheHelper.Max(System.String,System.Object)">
            <summary>
            把对象加到缓存,并把过期时间设为最大值
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MySoft.CacheHelper.Max(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            把对象加到缓存,并把过期时间设为最大值,附加缓存依赖信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:MySoft.CacheHelper.Permanent(System.String,System.Object)">
            <summary>
            插入持久性缓存
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MySoft.CacheHelper.Permanent(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            插入持久性缓存,附加缓存依赖
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:MySoft.CacheHelper.Get(System.String)">
            <summary>
            根据键获取被缓存的对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CacheHelper.Get``1(System.String)">
            <summary>
            根据键获取被缓存的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CacheHelper.SecondFactorCalculate(System.Int32)">
            <summary>
            Return int of seconds * SecondFactor
            </summary>
        </member>
        <member name="T:MySoft.Task.TaskRunner">
            <summary>
            计划任务执行者
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskRunner.AddJob(MySoft.Task.Job)">
            <summary>
            添加任务
            </summary>
            <param name="job"></param>
        </member>
        <member name="M:MySoft.Task.TaskRunner.#ctor">
            <summary>
            实例化TaskRunner
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskRunner.#ctor(MySoft.Task.Configuration.TaskConfiguration)">
            <summary>
            实例化TaskRunner
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskRunner.RunSchemeTask">
            <summary>
            执行计划任务
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskRunner.Start(System.String)">
            <summary>
            启动指定任务
            </summary>
            <param name="jobName"></param>
        </member>
        <member name="M:MySoft.Task.TaskRunner.Stop(System.String)">
            <summary>
            停止指定任务
            </summary>
            <param name="jobName"></param>
        </member>
        <member name="M:MySoft.Task.TaskRunner.StartAll">
            <summary>
            启动所有任务
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskRunner.StopAll">
            <summary>
            停止所有任务
            </summary>
        </member>
        <member name="P:MySoft.Task.TaskRunner.JobList">
            <summary>
            
            </summary>
        </member>
        <member name="E:MySoft.Task.TaskRunner.OnLog">
            <summary>
            
            </summary>
        </member>
        <member name="T:MySoft.Security.DES">
            <summary> 
            DES加密
            </summary> 
        </member>
        <member name="M:MySoft.Security.DES.Encrypt(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串,失败返回源串</returns>
        </member>
        <member name="M:MySoft.Security.DES.Decrypt(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="M:MySoft.Security.DES.Encrypt(System.Byte[],System.Byte[],System.String)">
            DES加密
            <param >待加密的字符串</param>
            <param >加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:MySoft.Security.DES.Decrypt(System.Byte[],System.Byte[],System.String)">
            DES解密
            <param >待解密的字符串</param>
            <param >解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>      
        </member>
        <member name="T:MySoft.Mail.AsyncMailSender">
            <summary>
            异步邮件发送
            </summary>
            <param name="smtp"></param>
        </member>
        <member name="T:MySoft.Mail.SmtpMail">
            <summary>
            邮件发送
            </summary>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.Send(System.String,System.String,System.String)">
            <summary>
            发送邮件到指定邮箱
            </summary>
            <param name="title"></param>
            <param name="body"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendAsync(System.String,System.String,System.String)">
            <summary>
            发送邮件到指定邮箱
            </summary>
            <param name="title"></param>
            <param name="body"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.Send(System.String,System.String,System.String[])">
            <summary>
            发送邮件到指定邮箱
            </summary>
            <param name="title"></param>
            <param name="body"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendAsync(System.String,System.String,System.String[])">
            <summary>
            发送邮件到指定邮箱
            </summary>
            <param name="title"></param>
            <param name="body"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendException(System.Exception,System.String,System.String)">
            <summary>
            发送错误
            </summary>
            <param name="ex"></param>
            <param name="title"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendSampleException(System.Exception,System.String,System.String)">
            <summary>
            发送错误
            </summary>
            <param name="ex"></param>
            <param name="title"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendException(System.Web.HttpContext,System.String,System.String)">
            <summary>
            发送错误
            </summary>
            <param name="current"></param>
            <param name="title"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendException(System.Exception,System.String,System.String[])">
            <summary>
            发送错误
            </summary>
            <param name="ex"></param>
            <param name="title"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendSampleException(System.Exception,System.String,System.String[])">
            <summary>
            发送错误
            </summary>
            <param name="ex"></param>
            <param name="title"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendException(System.Web.HttpContext,System.String,System.String[])">
            <summary>
            发送错误
            </summary>
            <param name="current"></param>
            <param name="title"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendExceptionAsync(System.Exception,System.String,System.String)">
            <summary>
            发送错误
            </summary>
            <param name="ex"></param>
            <param name="title"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendSampleExceptionAsync(System.Exception,System.String,System.String)">
            <summary>
            发送错误
            </summary>
            <param name="ex"></param>
            <param name="title"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendExceptionAsync(System.Exception,System.String,System.String[])">
            <summary>
            发送错误
            </summary>
            <param name="ex"></param>
            <param name="title"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SmtpMail.SendSampleExceptionAsync(System.Exception,System.String,System.String[])">
            <summary>
            发送错误
            </summary>
            <param name="ex"></param>
            <param name="title"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Mail.SmtpMail.SmtpServer">
            <summary>
            邮件发送服务器
            </summary>
        </member>
        <member name="P:MySoft.Mail.SmtpMail.UserName">
            <summary>
            发件人邮箱
            </summary>
        </member>
        <member name="P:MySoft.Mail.SmtpMail.Password">
            <summary>
            发件人密码
            </summary>
        </member>
        <member name="P:MySoft.Mail.SmtpMail.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:MySoft.Mail.SmtpMail.SmtpPort">
            <summary>
            邮件端口
            </summary>
        </member>
        <member name="P:MySoft.Mail.SmtpMail.IsSystemMail">
            <summary>
            是否系统邮件
            </summary>
        </member>
        <member name="T:MySoft.RESTful.Configuration.Authentication">
            <summary>
            Represents a rewriter rule.  A rewriter rule is composed of a pattern to search for and a string to replace
            the pattern with (if matched).
            </summary>
        </member>
        <member name="P:MySoft.RESTful.Configuration.Authentication.Name">
            <summary>
            Gets or sets the pattern to look for.
            </summary>
            <remarks><b>CacheName</b> is a regular expression pattern.  Therefore, you might need to escape
            characters in the pattern that are reserved characters in regular expression syntax (., ?, ^, $, etc.).
            <p />
            The pattern is searched for using the <b>System.Text.RegularExpression.Regex</b> class's <b>IsMatch()</b>
            method.  The pattern is case insensitive.</remarks>
        </member>
        <member name="P:MySoft.RESTful.Configuration.Authentication.Type">
            <summary>
            The string to replace the pattern with, if found.
            </summary>
            <remarks>The replacement string may use grouping symbols, like $1, $2, etc.  Specifically, the
            <b>System.Text.RegularExpression.Regex</b> class's <b>Replace()</b> method is used to replace
            the match in <see cref="!:Timeout"/> with the value in <b>SendTo</b>.</remarks>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the sepecified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty"/> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>A new <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="E:Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:MySoft.IoC.ServiceContractAttribute">
            <summary>
            Attribute used to mark service interfaces.
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceContractAttribute.#ctor">
            <summary>
            实例化ServiceContractAttribute
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceContractAttribute.#ctor(System.Boolean)">
            <summary>
            实例化ServiceContractAttribute
            </summary>
            <param name="allowCache"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceContractAttribute.#ctor(System.Int32)">
            <summary>
            实例化ServiceContractAttribute
            </summary>
            <param name="cacheTime"></param>
        </member>
        <member name="T:SharpZip.Zip.ITaggedData">
            <summary>
            ExtraData tagged value interface.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ITaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the contents of this instance from the data passed.
            </summary>
            <param name="data">The data to extract contents from.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
        </member>
        <member name="M:SharpZip.Zip.ITaggedData.GetData">
            <summary>
            Get the data representing this instance.
            </summary>
            <returns>Returns the data for this instance.</returns>
        </member>
        <member name="P:SharpZip.Zip.ITaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.RawTaggedData">
            <summary>
            A raw binary tagged value
            </summary>
        </member>
        <member name="M:SharpZip.Zip.RawTaggedData.#ctor(System.Int16)">
            <summary>
            Initialise a new instance.
            </summary>
            <param name="tag">The tag ID.</param>
        </member>
        <member name="M:SharpZip.Zip.RawTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="offset">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:SharpZip.Zip.RawTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="F:SharpZip.Zip.RawTaggedData._tag">
            <summary>
            The tag ID for this instance.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.RawTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.RawTaggedData.Data">
            <summary>
            Get /set the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="T:SharpZip.Zip.ExtendedUnixData">
            <summary>
            Class representing extended unix date time values.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ExtendedUnixData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:SharpZip.Zip.ExtendedUnixData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:SharpZip.Zip.ExtendedUnixData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> value to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>The standard Unix time is a signed integer data type, directly encoding the Unix time number,
            which is the number of seconds since 1970-01-01.
            Being 32 bits means the values here cover a range of about 136 years.
            The minimum representable time is 1901-12-13 20:45:52,
            and the maximum representable time is 2038-01-19 03:14:07.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ExtendedUnixData.TagID">
            <summary>
            Get the ID
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ExtendedUnixData.ModificationTime">
            <summary>
            Get /set the Modification Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:SharpZip.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:SharpZip.Zip.ExtendedUnixData.AccessTime">
            <summary>
            Get / set the Access Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:SharpZip.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:SharpZip.Zip.ExtendedUnixData.CreateTime">
            <summary>
            Get / Set the Create Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:SharpZip.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:SharpZip.Zip.ExtendedUnixData.Include">
            <summary>
            Get/set the <see cref="T:SharpZip.Zip.ExtendedUnixData.Flags">values</see> to include.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ExtendedUnixData.Flags">
            <summary>
            Flags indicate which values are included in this instance.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ExtendedUnixData.Flags.ModificationTime">
            <summary>
            The modification time is included
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ExtendedUnixData.Flags.AccessTime">
            <summary>
            The access time is included
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ExtendedUnixData.Flags.CreateTime">
            <summary>
            The create time is included.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.NTTaggedData">
            <summary>
            Class handling NT date time values.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.NTTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:SharpZip.Zip.NTTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:SharpZip.Zip.NTTaggedData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> valuie to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>
            NTFS filetimes are 64-bit unsigned integers, stored in Intel
            (least significant byte first) byte order. They determine the
            number of 1.0E-07 seconds (1/10th microseconds!) past WinNT "epoch",
            which is "01-Jan-1601 00:00:00 UTC". 28 May 60056 is the upper limit
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.NTTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.NTTaggedData.LastModificationTime">
            <summary>
            Get/set the <see cref="T:System.DateTime">last modification time</see>.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.NTTaggedData.CreateTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">create time</see>
            </summary>
        </member>
        <member name="P:SharpZip.Zip.NTTaggedData.LastAccessTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">last access time</see>.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ITaggedDataFactory">
            <summary>
            A factory that creates <see cref="T:SharpZip.Zip.ITaggedData">tagged data</see> instances.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ITaggedDataFactory.Create(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get data for a specific tag value.
            </summary>
            <param name="tag">The tag ID to find.</param>
            <param name="data">The data to search.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
            <returns>The located <see cref="T:SharpZip.Zip.ITaggedData">value found</see>, or null if not found.</returns>
        </member>
        <member name="T:SharpZip.Zip.ZipExtraData">
            
            <summary>
            A class to handle the extra data field for Zip entries
            </summary>
            <remarks>
            Extra data contains 0 or more values each prefixed by a header tag and length.
            They contain zero or more bytes of actual data.
            The data is held internally using a copy on write strategy.  This is more efficient but
            means that for extra data created by passing in data can have the values modified by the caller
            in some circumstances.
            </remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.#ctor">
            <summary>
            Initialise a default instance.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.#ctor(System.Byte[])">
            <summary>
            Initialise with known extra data.
            </summary>
            <param name="data">The extra data.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.GetEntryData">
            <summary>
            Get the raw extra data value
            </summary>
            <returns>Returns the raw byte[] extra data this instance represents.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.Clear">
            <summary>
            Clear the stored data.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.GetStreamForTag(System.Int32)">
            <summary>
            Get a read-only <see cref="T:System.IO.Stream"/> for the associated tag.
            </summary>
            <param name="tag">The tag to locate data for.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> containing tag data or null if no tag was found.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.GetData(System.Int16)">
            <summary>
            Get the <see cref="T:SharpZip.Zip.ITaggedData">tagged data</see> for a tag.
            </summary>
            <param name="tag">The tag to search for.</param>
            <returns>Returns a <see cref="T:SharpZip.Zip.ITaggedData">tagged value</see> or null if none found.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.Find(System.Int32)">
            <summary>
            Find an extra data value
            </summary>
            <param name="headerID">The identifier for the value to find.</param>
            <returns>Returns true if the value was found; false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.AddEntry(SharpZip.Zip.ITaggedData)">
            <summary>
            Add a new entry to extra data.
            </summary>
            <param name="taggedData">The <see cref="T:SharpZip.Zip.ITaggedData"/> value to add.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.AddEntry(System.Int32,System.Byte[])">
            <summary>
            Add a new entry to extra data
            </summary>
            <param name="headerID">The ID for this entry.</param>
            <param name="fieldData">The data to add.</param>
            <remarks>If the ID already exists its contents are replaced.</remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.StartNewEntry">
            <summary>
            Start adding a new entry.
            </summary>
            <remarks>Add data using <see cref="M:SharpZip.Zip.ZipExtraData.AddData(System.Byte[])"/>, <see cref="M:SharpZip.Zip.ZipExtraData.AddLeShort(System.Int32)"/>, <see cref="M:SharpZip.Zip.ZipExtraData.AddLeInt(System.Int32)"/>, or <see cref="M:SharpZip.Zip.ZipExtraData.AddLeLong(System.Int64)"/>.
            The new entry is completed and actually added by calling <see cref="M:SharpZip.Zip.ZipExtraData.AddNewEntry(System.Int32)"/></remarks>
            <seealso cref="M:SharpZip.Zip.ZipExtraData.AddEntry(SharpZip.Zip.ITaggedData)"/>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.AddNewEntry(System.Int32)">
            <summary>
            Add entry data added since <see cref="M:SharpZip.Zip.ZipExtraData.StartNewEntry"/> using the ID passed.
            </summary>
            <param name="headerID">The identifier to use for this entry.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.AddData(System.Byte)">
            <summary>
            Add a byte of data to the pending new entry.
            </summary>
            <param name="data">The byte to add.</param>
            <seealso cref="M:SharpZip.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.AddData(System.Byte[])">
            <summary>
            Add data to a pending new entry.
            </summary>
            <param name="data">The data to add.</param>
            <seealso cref="M:SharpZip.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.AddLeShort(System.Int32)">
            <summary>
            Add a short value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:SharpZip.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.AddLeInt(System.Int32)">
            <summary>
            Add an integer value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:SharpZip.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.AddLeLong(System.Int64)">
            <summary>
            Add a long value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:SharpZip.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.Delete(System.Int32)">
            <summary>
            Delete an extra data field.
            </summary>
            <param name="headerID">The identifier of the field to delete.</param>
            <returns>Returns true if the field was found and deleted.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.ReadLong">
            <summary>
            Read a long in little endian form from the last <see cref="M:SharpZip.Zip.ZipExtraData.Find(System.Int32)">found</see> data value
            </summary>
            <returns>Returns the long value read.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.ReadInt">
            <summary>
            Read an integer in little endian form from the last <see cref="M:SharpZip.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the integer read.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.ReadShort">
            <summary>
            Read a short value in little endian form from the last <see cref="M:SharpZip.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.ReadByte">
            <summary>
            Read a byte from an extra data
            </summary>
            <returns>The byte value read or -1 if the end of data has been reached.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.Skip(System.Int32)">
            <summary>
            Skip data during reading.
            </summary>
            <param name="amount">The number of bytes to skip.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.ReadShortInternal">
            <summary>
            Internal form of <see cref="M:SharpZip.Zip.ZipExtraData.ReadShort"/> that reads data at any location.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipExtraData.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipExtraData.Length">
            <summary>
            Gets the current extra data length.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipExtraData.ValueLength">
            <summary>
            Get the length of the last value found by <see cref="M:SharpZip.Zip.ZipExtraData.Find(System.Int32)"/>
            </summary>
            <remarks>This is only valid if <see cref="M:SharpZip.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.</remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipExtraData.CurrentReadIndex">
            <summary>
            Get the index for the current read value.
            </summary>
            <remarks>This is only valid if <see cref="M:SharpZip.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.
            Initially the result will be the index of the first byte of actual data.  The value is updated after calls to
            <see cref="M:SharpZip.Zip.ZipExtraData.ReadInt"/>, <see cref="M:SharpZip.Zip.ZipExtraData.ReadShort"/> and <see cref="M:SharpZip.Zip.ZipExtraData.ReadLong"/>. </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipExtraData.UnreadCount">
            <summary>
            Get the number of bytes remaining to be read for the current value;
            </summary>
        </member>
        <member name="T:SharpZip.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
            <param name="bitCount">The number of bits to drop.</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:SharpZip.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:SharpZip.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:SharpZip.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="T:SharpZip.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:SharpZip.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:SharpZip.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:SharpZip.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:SharpZip.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="P:SharpZip.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="T:SharpZip.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:SharpZip.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:SharpZip.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:SharpZip.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "value">
            the byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:SharpZip.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:SharpZip.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="P:SharpZip.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:MySoft.Aop.IAopProxyFactory">
            <summary>
            IAopProxyFactory 用于创建特定的Aop代理的实例，IAopProxyFactory的作用是使AopProxyAttribute独立于具体的AOP代理类。
            2010.11.09
            </summary>
        </member>
        <member name="M:MySoft.Aop.IAopProxyFactory.CreateAopProxyInstance(System.MarshalByRefObject,System.Type)">
            <summary>
            创建Aop代理对象
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Logger.LogEventHandler">
            <summary>
            A delegate used for log.
            </summary>
            <param name="log">The msg to write to log.</param>
        </member>
        <member name="T:MySoft.Logger.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:MySoft.Logger.LogType.Error">
            <summary>
            错误事件
            </summary>
        </member>
        <member name="F:MySoft.Logger.LogType.Warning">
            <summary>
            警告事件
            </summary>
        </member>
        <member name="F:MySoft.Logger.LogType.Information">
            <summary>
            信息事件
            </summary>
        </member>
        <member name="T:MySoft.DnsHelper">
            <summary>
            DnsHelper
            </summary>
        </member>
        <member name="M:MySoft.DnsHelper.GetHostName">
            <summary>
            用户的机器名
            </summary>
        </member>
        <member name="M:MySoft.DnsHelper.GetIPAddress">
            <summary>
            获得本机局域网IP地址   
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.DnsHelper.GetDynamicIPAddress">
            <summary>
            获得拨号动态分配IP地址   
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.ImageZoomMode">
            <summary>
            缩放格式
            </summary>
        </member>
        <member name="F:MySoft.ImageZoomMode.HW">
            <summary>
            指定高宽缩放（可能变形）
            </summary>
        </member>
        <member name="F:MySoft.ImageZoomMode.W">
            <summary>
            指定宽，高按比例
            </summary>
        </member>
        <member name="F:MySoft.ImageZoomMode.H">
            <summary>
            指定高，宽按比例
            </summary>
        </member>
        <member name="F:MySoft.ImageZoomMode.Cut">
            <summary>
            指定高宽裁减（不变形） 
            </summary>
        </member>
        <member name="F:MySoft.ImageZoomMode.Auto">
            <summary>
            自动模式
            </summary>
        </member>
        <member name="T:MySoft.CodeType">
            <summary>
            验证码类型
            </summary>
        </member>
        <member name="F:MySoft.CodeType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:MySoft.CodeType.Char">
            <summary>
            字符
            </summary>
        </member>
        <member name="F:MySoft.CodeType.NumberChar">
            <summary>
            数字和字符
            </summary>
        </member>
        <member name="T:MySoft.ImageHelper">
            <summary>
            ImageHelper 的摘要说明
            </summary>
        </member>
        <member name="M:MySoft.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,MySoft.ImageZoomMode)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:MySoft.ImageHelper.AddWordWatermark(System.String,System.String,System.String)">
            
            <summary>
            在图片上增加文字水印
            </summary>
            <param name="Path">原服务器图片路径</param>
            <param name="WatermarkPath">生成的带文字水印的图片路径</param>
        </member>
        <member name="M:MySoft.ImageHelper.AddImageWatermark(System.String,System.String,System.Drawing.Image)">
            
            <summary>
            在图片上生成图片水印
            </summary>
            <param name="Path">原服务器图片路径</param>
            <param name="WatermarkPath">生成的带图片水印的图片路径</param>
            <param name="WatermarkImage">水印图片路径</param>
        </member>
        <member name="M:MySoft.ImageHelper.CreateRandomCode(System.Int32)">
            <summary>
            生成随机码
            </summary>
            <param name="length">随机码个数</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.ImageHelper.CreateRandomCode(System.Int32,MySoft.CodeType)">
            <summary>
            生成随机码
            </summary>
            <param name="length">随机码个数</param>
            <param name="number">是否为全数字</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.ImageHelper.CreateImage(System.String)">
            <summary>
            创建随机码图片
            </summary>
            <param name="randomcode">随机码</param>
        </member>
        <member name="M:MySoft.ImageHelper.CreateImageBytes(System.String)">
            <summary>
            创建随机码图片
            </summary>
            <param name="randomcode">随机码</param>
        </member>
        <member name="M:MySoft.ImageHelper.CreateImageStream(System.String)">
            <summary>
            创建字节的图像，一般用于传输
            </summary>
            <param name="randomcode">随机码</param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Remoting.ServiceModule">
            <summary>
            业务模块实体类
            </summary>
        </member>
        <member name="P:MySoft.Remoting.ServiceModule.Mode">
            <summary>
            对象激活方式（SingleCall或者SingleTon）
            </summary>
        </member>
        <member name="P:MySoft.Remoting.ServiceModule.Name">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:MySoft.Remoting.ServiceModule.AssemblyName">
            <summary>
            程序集名称字符串
            </summary>
        </member>
        <member name="P:MySoft.Remoting.ServiceModule.ClassName">
            <summary>
            完整类名
            </summary>
        </member>
        <member name="T:MySoft.Remoting.Configuration.RemotingServer">
            <summary>
            远程服务器实体
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingServer.ServerName">
            <summary>
            服务器名（用来区别其它服务器）
            </summary>
        </member>
        <member name="P:MySoft.Remoting.Configuration.RemotingServer.ServerUrl">
            <summary>
            获取远程业务对象Url（如：tcp://127.0.0.1:8888/NetValue）
            </summary>
        </member>
        <member name="T:MySoft.Threading.WorkItemInfo">
            <summary>
            Summary description for WorkItemInfo.
            </summary>
        </member>
        <member name="P:MySoft.Threading.WorkItemInfo.UseCallerCallContext">
            <summary>
            Get/Set if to use the caller's security context
            </summary>
        </member>
        <member name="P:MySoft.Threading.WorkItemInfo.UseCallerHttpContext">
            <summary>
            Get/Set if to use the caller's HTTP context
            </summary>
        </member>
        <member name="P:MySoft.Threading.WorkItemInfo.DisposeOfStateObjects">
            <summary>
            Get/Set if to dispose of the state object of a work item
            </summary>
        </member>
        <member name="P:MySoft.Threading.WorkItemInfo.CallToPostExecute">
            <summary>
            Get/Set the run the post execute options
            </summary>
        </member>
        <member name="P:MySoft.Threading.WorkItemInfo.PostExecuteWorkItemCallback">
            <summary>
            Get/Set the post execute callback
            </summary>
        </member>
        <member name="P:MySoft.Threading.WorkItemInfo.WorkItemPriority">
            <summary>
            Get/Set the work item's priority
            </summary>
        </member>
        <member name="P:MySoft.Threading.WorkItemInfo.Timeout">
            <summary>
            Get/Set the work item's timout in milliseconds.
            This is a passive timout. When the timout expires the work item won't be actively aborted!
            </summary>
        </member>
        <member name="T:MySoft.Threading.WIGStartInfo">
            <summary>
            Summary description for WIGStartInfo.
            </summary>
        </member>
        <member name="M:MySoft.Threading.WIGStartInfo.AsReadOnly">
            <summary>
            Get a readonly version of this WIGStartInfo
            </summary>
            <returns>Returns a readonly reference to this WIGStartInfoRO</returns>
        </member>
        <member name="P:MySoft.Threading.WIGStartInfo.UseCallerCallContext">
            <summary>
            Get/Set if to use the caller's security context
            </summary>
        </member>
        <member name="P:MySoft.Threading.WIGStartInfo.UseCallerHttpContext">
            <summary>
            Get/Set if to use the caller's HTTP context
            </summary>
        </member>
        <member name="P:MySoft.Threading.WIGStartInfo.DisposeOfStateObjects">
            <summary>
            Get/Set if to dispose of the state object of a work item
            </summary>
        </member>
        <member name="P:MySoft.Threading.WIGStartInfo.CallToPostExecute">
            <summary>
            Get/Set the run the post execute options
            </summary>
        </member>
        <member name="P:MySoft.Threading.WIGStartInfo.PostExecuteWorkItemCallback">
            <summary>
            Get/Set the default post execute callback
            </summary>
        </member>
        <member name="P:MySoft.Threading.WIGStartInfo.StartSuspended">
            <summary>
            Get/Set if the work items execution should be suspended until the Start()
            method is called.
            </summary>
        </member>
        <member name="P:MySoft.Threading.WIGStartInfo.WorkItemPriority">
            <summary>
            Get/Set the default priority that a work item gets when it is enqueued
            </summary>
        </member>
        <!-- 对于成员“P:MySoft.Threading.WIGStartInfo.FillStateWithArgs”忽略有格式错误的 XML 注释 -->
        <member name="T:MySoft.Threading.Internal.STPPerformanceCounter">
            <summary>
            Summary description for STPPerformanceCounter.
            </summary>
        </member>
        <member name="T:MySoft.Security.MD5">
            <summary>
            MD5加密
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert``1(System.Object)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="initialValue">The value to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert``1(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert the value to.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert``1(System.Object,``0@)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="initialValue">The value to convert.</param>
            <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
            <returns>
            	<c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert``1(System.Object,System.Globalization.CultureInfo,``0@)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
            <returns>
            	<c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert the value to.</param>
            <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
            <returns>
            	<c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast``1(System.Object)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <typeparam name="T">The type to convert or cast the value to.</typeparam>
            <param name="initialValue">The value to convert.</param>
            <returns>The converted type. If conversion was unsuccessful, the initial value is returned if assignable to the target type</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast``1(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <typeparam name="T">The type to convert or cast the value to.</typeparam>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <returns>The converted type. If conversion was unsuccessful, the initial value is returned if assignable to the target type</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvertOrCast``1(System.Object,``0@)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="initialValue">The value to convert.</param>
            <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
            <returns>
            	<c>true</c> if <c>initialValue</c> was converted successfully or is assignable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvertOrCast``1(System.Object,System.Globalization.CultureInfo,``0@)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
            <returns>
            	<c>true</c> if <c>initialValue</c> was converted successfully or is assignable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert the value to.</param>
            <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
            <returns>
            	<c>true</c> if <c>initialValue</c> was converted successfully or is assignable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter"/> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
            <value>A predicate used to determine whether the property should be serialize.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            An in-memory representation of a JSON Schema.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains schema JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter"/> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read only.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
            <value>A number that the value should be divisble by.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Identity">
            <summary>
            Gets or sets the identity.
            </summary>
            <value>The identity.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Options">
            <summary>
            Gets or sets a collection of options.
            </summary>
            <value>A collection of options.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallow types.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the extend <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>.
            </summary>
            <value>The extended <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object reference data.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MySoft.Cache.ICacheDependent">
            <summary>
            缓存依赖
            </summary>
        </member>
        <member name="M:MySoft.Cache.ICacheDependent.AddCache(System.Type,System.String,System.Object,System.Double)">
            <summary>
            添加缓存
            </summary>
            <param name="cacheType"></param>
            <param name="cacheKey"></param>
            <param name="cacheValue"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:MySoft.Cache.ICacheDependent.RemoveCache(System.Type,System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="cacheType"></param>
            <param name="cacheKey"></param>
        </member>
        <member name="M:MySoft.Cache.ICacheDependent.GetCache(System.Type,System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="cacheType"></param>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Cache.ICacheDependent.RemoveCache(System.Type)">
            <summary>
            移除缓存
            </summary>
            <param name="cacheType"></param>
        </member>
        <member name="M:MySoft.Cache.ICacheDependent.GetCache(System.Type)">
            <summary>
            获取缓存
            </summary>
            <param name="cacheType"></param>
            <returns></returns>
        </member>
        <member name="T:SharpZip.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:SharpZip.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Zip.Compression.Streams.InflaterInputBuffer"/> with a default buffer size
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The size to use for the buffer</param>
            <remarks>A minimum buffer size of 1KB is permitted.  Lower sizes are treated as 1KB.</remarks>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(SharpZip.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:SharpZip.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a <see cref="T:System.Byte"/> from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an <see cref="T:System.Int16"/> in little endian byte order.
            </summary>
            <returns>The short value read case to an int.</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an <see cref="T:System.Int32"/> in little endian byte order.
            </summary>
            <returns>The int value read.</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read a <see cref="T:System.Int64"/> in little endian byte order.
            </summary>
            <returns>The long value read.</returns>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:SharpZip.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="T:SharpZip.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,SharpZip.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,SharpZip.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="count">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count">The number of bytes</paramref> to skip is less than or equal to zero.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:SharpZip.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="offset">The relative offset to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> defining where to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="value">The new length value for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <param name="buffer">Thew buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <param name="value">The byte to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:SharpZip.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name="buffer">
            The array to read and decompress data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:SharpZip.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="F:SharpZip.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:SharpZip.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Streams.InflaterInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Streams.InflaterInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:SharpZip.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="T:SharpZip.Tar.ProgressMessageHandler">
            <summary>
            Used to advise clients of 'events' while processing archives
            </summary>
        </member>
        <member name="T:SharpZip.Tar.TarArchive">
            <summary>
            The TarArchive class implements the concept of a
            'Tape Archive'. A tar archive is a series of entries, each of
            which represents a file system object. Each entry in
            the archive consists of a header block followed by 0 or more data blocks.
            Directory entries consist only of the header block, and are followed by entries
            for the directory's contents. File entries consist of a
            header followed by the number of blocks needed to
            contain the file's contents. All entries are written on
            block boundaries. Blocks are 512 bytes long.
            
            TarArchives are instantiated in either read or write mode,
            based upon whether they are instantiated with an InputStream
            or an OutputStream. Once instantiated TarArchives read/write
            mode can not be changed.
            
            There is currently no support for random access to tar archives.
            However, it seems that subclassing TarArchive, and using the
            TarBuffer.CurrentRecord and TarBuffer.CurrentBlock
            properties, this would be rather trivial.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.OnProgressMessageEvent(SharpZip.Tar.TarEntry,System.String)">
            <summary>
            Raises the ProgressMessage event
            </summary>
            <param name="entry">The <see cref="T:SharpZip.Tar.TarEntry">TarEntry</see> for this event</param>
            <param name="message">message for this event.  Null is no message</param>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.#ctor">
            <summary>
            Constructor for a default <see cref="T:SharpZip.Tar.TarArchive"/>.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.#ctor(SharpZip.Tar.TarInputStream)">
            <summary>
            Initalise a TarArchive for input.
            </summary>
            <param name="stream">The <see cref="T:SharpZip.Tar.TarInputStream"/> to use for input.</param>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.#ctor(SharpZip.Tar.TarOutputStream)">
            <summary>
            Initialise a TarArchive for output.
            </summary>
            <param name="stream">The <see cref="T:SharpZip.Tar.TarOutputStream"/> to use for output.</param> 
        </member>
        <member name="M:SharpZip.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream)">
            <summary>
            The InputStream based constructors create a TarArchive for the
            purposes of extracting or listing a tar archive. Thus, use
            these constructors when you wish to extract files from or list
            the contents of an existing tar archive.
            </summary>
            <param name="inputStream">The stream to retrieve archive data from.</param>
            <returns>Returns a new <see cref="T:SharpZip.Tar.TarArchive"/> suitable for reading from.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create TarArchive for reading setting block factor
            </summary>
            <param name="inputStream">A stream containing the tar archive contents</param>
            <param name="blockFactor">The blocking factor to apply</param>
            <returns>Returns a <see cref="T:SharpZip.Tar.TarArchive"/> suitable for reading.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream)">
            <summary>
            Create a TarArchive for writing to, using the default blocking factor
            </summary>
            <param name="outputStream">The <see cref="T:System.IO.Stream"/> to write to</param>
            <returns>Returns a <see cref="T:SharpZip.Tar.TarArchive"/> suitable for writing.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create a <see cref="T:SharpZip.Tar.TarArchive">tar archive</see> for writing.
            </summary>
            <param name="outputStream">The stream to write to</param>
            <param name="blockFactor">The blocking factor to use for buffering.</param>
            <returns>Returns a <see cref="T:SharpZip.Tar.TarArchive"/> suitable for writing.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.SetKeepOldFiles(System.Boolean)">
            <summary>
            Set the flag that determines whether existing files are
            kept, or overwritten during extraction.
            </summary>
            <param name="keepExistingFiles">
            If true, do not overwrite existing files.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.SetAsciiTranslation(System.Boolean)">
            <summary>
            Set the ascii file translation flag.
            </summary>
            <param name= "translateAsciiFiles">
            If true, translate ascii text files.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set user and group information that will be used to fill in the
            tar archive's entry headers. This information is based on that available 
            for the linux operating system, which is not always available on other
            operating systems.  TarArchive allows the programmer to specify values
            to be used in their place.
            <see cref="P:SharpZip.Tar.TarArchive.ApplyUserInfoOverrides"/> is set to true by this call.
            </summary>
            <param name="userId">
            The user id to use in the headers.
            </param>
            <param name="userName">
            The user name to use in the headers.
            </param>
            <param name="groupId">
            The group id to use in the headers.
            </param>
            <param name="groupName">
            The group name to use in the headers.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.CloseArchive">
            <summary>
            Close the archive.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.ListContents">
            <summary>
            Perform the "list" command for the archive contents.
            
            NOTE That this method uses the <see cref="E:SharpZip.Tar.TarArchive.ProgressMessageEvent"> progress event</see> to actually list
            the contents. If the progress display event is not set, nothing will be listed!
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.ExtractContents(System.String)">
            <summary>
            Perform the "extract" command and extract the contents of the archive.
            </summary>
            <param name="destinationDirectory">
            The destination directory into which to extract.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.ExtractEntry(System.String,SharpZip.Tar.TarEntry)">
            <summary>
            Extract an entry from the archive. This method assumes that the
            tarIn stream has been properly set with a call to GetNextEntry().
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
            <param name="entry">
            The TarEntry returned by tarIn.GetNextEntry().
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.WriteEntry(SharpZip.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.WriteEntryCore(SharpZip.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the FileStream and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.Close">
            <summary>
            Closes the archive and releases any associated resources.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarArchive.Finalize">
            <summary>
            Ensures that resources are freed and other cleanup operations are performed
            when the garbage collector reclaims the <see cref="T:SharpZip.Tar.TarArchive"/>.
            </summary>
        </member>
        <member name="E:SharpZip.Tar.TarArchive.ProgressMessageEvent">
            <summary>
            Client hook allowing detailed information to be reported during processing
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarArchive.AsciiTranslate">
            <summary>
            Get/set the ascii file translation flag. If ascii file translation
            is true, then the file is checked to see if it a binary file or not. 
            If the flag is true and the test indicates it is ascii text 
            file, it will be translated. The translation converts the local
            operating system's concept of line ends into the UNIX line end,
            '\n', which is the defacto standard for a TAR archive. This makes
            text files compatible with UNIX.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarArchive.PathPrefix">
            <summary>
            PathPrefix is added to entry names as they are written if the value is not null.
            A slash character is appended after PathPrefix 
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarArchive.RootPath">
            <summary>
            RootPath is removed from entry names if it is found at the
            beginning of the name.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarArchive.ApplyUserInfoOverrides">
            <summary>
            Get or set a value indicating if overrides defined by <see cref="M:SharpZip.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">SetUserInfo</see> should be applied.
            </summary>
            <remarks>If overrides are not applied then the values as set in each header will be used.</remarks>
        </member>
        <member name="P:SharpZip.Tar.TarArchive.UserId">
            <summary>
            Get the archive user id.
            See <see cref="P:SharpZip.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user id.
            </returns>
        </member>
        <member name="P:SharpZip.Tar.TarArchive.UserName">
            <summary>
            Get the archive user name.
            See <see cref="P:SharpZip.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user name.
            </returns>
        </member>
        <member name="P:SharpZip.Tar.TarArchive.GroupId">
            <summary>
            Get the archive group id.
            See <see cref="P:SharpZip.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group id.
            </returns>
        </member>
        <member name="P:SharpZip.Tar.TarArchive.GroupName">
            <summary>
            Get the archive group name.
            See <see cref="P:SharpZip.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group name.
            </returns>
        </member>
        <member name="P:SharpZip.Tar.TarArchive.RecordSize">
            <summary>
            Get the archive's record size. Tar archives are composed of
            a series of RECORDS each containing a number of BLOCKS.
            This allowed tar archives to match the IO characteristics of
            the physical device being used. Archives are expected
            to be properly "blocked".
            </summary>
            <returns>
            The record size this archive is using.
            </returns>
        </member>
        <member name="P:SharpZip.Tar.TarArchive.IsStreamOwner">
            <summary>
            Sets the IsStreamOwner property on the underlying stream.
            Set this to false to prevent the Close of the TarArchive from closing the stream.
            </summary>
        </member>
        <member name="T:MySoft.BusinessException">
            <summary>
            业务异常类，继承自SystemException
            用于业务出错时抛出业务异常信息
            </summary>
        </member>
        <member name="M:MySoft.BusinessException.#ctor(System.String)">
            <summary>
            实例化BusinessException
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:MySoft.BusinessException.#ctor(System.String,System.Exception)">
            <summary>
            实例化BusinessException
            </summary>
            <param name="message">异常消息</param>
            <param name="inner">内部异常</param>
        </member>
        <member name="M:MySoft.BusinessException.#ctor(System.Int32,System.String)">
            <summary>
            实例化BusinessException
            </summary>
            <param name="code">业务代码</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:MySoft.BusinessException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            实例化BusinessException
            </summary>
            <param name="code">业务代码</param>
            <param name="message">异常消息</param>
            <param name="inner">内部异常</param>
        </member>
        <member name="M:MySoft.BusinessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info">存储对象序列化和反序列化所需的全部数据</param>
            <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文</param>
        </member>
        <member name="M:MySoft.BusinessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            重载GetObjectData方法
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:MySoft.BusinessException.Code">
            <summary>
            异常代码
            </summary>
        </member>
        <member name="T:MySoft.Logger.SimpleLog">
            <summary>
            简单日志管理类(按日期生成文件)
            </summary>
        </member>
        <member name="F:MySoft.Logger.SimpleLog.Instance">
            <summary>
            简单日志的单例 (默认路径为根目录下的Logs目录)
            </summary>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.#ctor(System.String)">
            <summary>
            实例化简单日志组件
            </summary>
            <param name="basedir">日志存储根目录，下面会自动创建Log与ErrorLog文件夹</param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLog(System.Exception)">
            <summary>
            写错误日志
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLogForDir(System.String,System.Exception)">
            <summary>
            写错误日志
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLog(System.String)">
            <summary>
            写入日志
            </summary>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLogForDir(System.String,System.String)">
            <summary>
            写入日志
            </summary>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLogWithSendMail(System.String,System.String)">
            <summary>
            写日志并发送邮件
            </summary>
            <param name="log"></param>
            <param name="mailTo"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLogWithSendMail(System.String,System.String[])">
            <summary>
            写日志并发送邮件
            </summary>
            <param name="log"></param>
            <param name="mailTo"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLogWithSendMail(System.Exception,System.String)">
            <summary>
            写错误日志并发送邮件
            </summary>
            <param name="ex"></param>
            <param name="mailTo"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLogWithSendMail(System.Exception,System.String[])">
            <summary>
            写错误日志并发送邮件
            </summary>
            <param name="ex"></param>
            <param name="mailTo"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLog(System.String,System.Exception)">
            <summary>
            写错误日志
            </summary>
            <param name="fileName"></param>
            <param name="ex"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLog(System.String,System.String)">
            <summary>
            写入日志
            </summary>
            <param name="fileName"></param>
            <param name="log"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLogWithSendMail(System.String,System.String,System.String)">
            <summary>
            写日志并发送邮件
            </summary>
            <param name="fileName"></param>
            <param name="log"></param>
            <param name="mailTo"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLogWithSendMail(System.String,System.String,System.String[])">
            <summary>
            写日志并发送邮件
            </summary>
            <param name="fileName"></param>
            <param name="log"></param>
            <param name="mailTo"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLogWithSendMail(System.String,System.Exception,System.String)">
            <summary>
            写错误日志并发送邮件
            </summary>
            <param name="fileName"></param>
            <param name="ex"></param>
            <param name="mailTo"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteLogWithSendMail(System.String,System.Exception,System.String[])">
            <summary>
            写错误日志并发送邮件
            </summary>
            <param name="fileName"></param>
            <param name="ex"></param>
            <param name="mailTo"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.SendMail(System.String,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="log"></param>
            <param name="to"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.SendMail(System.Exception,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="ex"></param>
            <param name="to"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteFileLog(System.String,System.Exception)">
            <summary>
            写文件日志
            </summary>
            <param name="filePath"></param>
            <param name="ex"></param>
        </member>
        <member name="M:MySoft.Logger.SimpleLog.WriteFileLog(System.String,System.String)">
            <summary>
            写文件日志
            </summary>
            <param name="filePath"></param>
            <param name="log"></param>
        </member>
        <member name="T:MySoft.Remoting.RemotingClientHelper">
            <summary>
            The Remoting Client Helper
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.#ctor(MySoft.Remoting.RemotingChannelType,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.Remoting.RemotingClientHelper"/> class.
            </summary>
            <param name="channelType">Type of the channel.</param>
            <param name="serverAddress">The server address.</param>
            <param name="serverPort">The server port.</param>
            <param name="callbackPort">The callback port.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.GetWellKnownClientInstance``1(System.String)">
            <summary>
            Gets the well known client instance.
            </summary>
            <param name="notifyName">Name of the notify.</param>
            <returns>Te instance.</returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.CreateActivatedClientInstance``1">
            <summary>
            Creates the activated client instance.
            </summary>
            <returns>Te instance.</returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.IsClientTypeRegistered(System.Type)">
            <summary>
            Determines whether the specified client type is registered.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.RegisterActivatedClientType(System.Type)">
            <summary>
            Registers the type of the activated client.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:MySoft.Remoting.RemotingClientHelper.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:MySoft.RESTful.SubmitType">
            <summary>
            方法类型
            </summary>
        </member>
        <member name="F:MySoft.RESTful.SubmitType.GET">
            <summary>
            Get方式
            </summary>
        </member>
        <member name="F:MySoft.RESTful.SubmitType.POST">
            <summary>
            Post方式
            </summary>
        </member>
        <member name="F:MySoft.RESTful.SubmitType.DELETE">
            <summary>
            Delete方式
            </summary>
        </member>
        <member name="F:MySoft.RESTful.SubmitType.PUT">
            <summary>
            Put方式
            </summary>
        </member>
        <member name="T:MySoft.ProxyFactory">
            <summary>
            代理工厂
            </summary>
        </member>
        <member name="M:MySoft.ProxyFactory.GetInstance">
            <summary>
            获取一个实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.ProxyFactory.Create(MySoft.IProxyInvocationHandler,System.Type,System.Boolean)">
            <summary>
            创建一个代理对象
            </summary>
            <param name="handler"></param>
            <param name="objType"></param>
            <param name="isObjInterface"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.ProxyFactory.Create(MySoft.IProxyInvocationHandler,System.Type)">
            <summary>
            创建一个代理对象
            </summary>
            <param name="handler"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether the collection is null, empty or its contents are uninitialized values.
            </summary>
            <param name="list">The list.</param>
            <returns>
            	<c>true</c> if the collection is null or empty or its contents are uninitialized values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Makes a slice of the specified list in between the start and end indexes.
            </summary>
            <param name="list">The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <returns>A slice of the list.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Makes a slice of the specified list in between the start and end indexes,
            getting every so many items based upon the step.
            </summary>
            <param name="list">The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <param name="step">The step.</param>
            <returns>A slice of the list.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.GroupBy``2(System.Collections.Generic.ICollection{``1},System.Func{``1,``0})">
            <summary>
            Group the collection using a function which returns the key.
            </summary>
            <param name="source">The source collection to group.</param>
            <param name="keySelector">The key selector.</param>
            <returns>A Dictionary with each key relating to a list of objects in a list grouped under it.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConvert">
            <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="T:Newtonsoft.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            Include default values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore default values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:MySoft.IoC.OperationContractAttribute">
            <summary>
            Attribute used to mark service interfaces.
            </summary>
        </member>
        <member name="M:MySoft.IoC.OperationContractAttribute.#ctor">
            <summary>
            实例化OperationContractAttribute
            </summary>
        </member>
        <member name="M:MySoft.IoC.OperationContractAttribute.#ctor(System.Boolean)">
            <summary>
            实例化OperationContractAttribute
            </summary>
            <param name="allowCache"></param>
        </member>
        <member name="M:MySoft.IoC.OperationContractAttribute.#ctor(System.Int32)">
            <summary>
            实例化OperationContractAttribute
            </summary>
            <param name="cacheTime"></param>
        </member>
        <member name="P:MySoft.IoC.OperationContractAttribute.Compress">
            <summary>
            是否压缩
            </summary>
        </member>
        <member name="P:MySoft.IoC.OperationContractAttribute.Encrypt">
            <summary>
            是否加密
            </summary>
        </member>
        <member name="T:SharpZip.Zip.DescriptorData">
            <summary>
            Holds data pertinent to a data descriptor.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.DescriptorData.CompressedSize">
            <summary>
            Get /set the compressed size of data.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.DescriptorData.Size">
            <summary>
            Get / set the uncompressed size of data
            </summary>
        </member>
        <member name="P:SharpZip.Zip.DescriptorData.Crc">
            <summary>
            Get /set the crc value.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipHelperStream">
            <summary>
            This class assists with writing/reading from Zip files.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.#ctor(System.String)">
            <summary>
            Initialise an instance of this class.
            </summary>
            <param name="name">The name of the file to open.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Zip.ZipHelperStream"/>.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            The underlying stream is closed only if <see cref="P:SharpZip.Zip.ZipHelperStream.IsStreamOwner"/> is true.
            </remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.LocateBlockWithSignature(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Locates a block with the desired <paramref name="signature"/>.
            </summary>
            <param name="signature">The signature to find.</param>
            <param name="endLocation">Location, marking the end of block.</param>
            <param name="minimumBlockSize">Minimum size of the block.</param>
            <param name="maximumVariableData">The maximum variable data.</param>
            <returns>Eeturns the offset of the first byte after the signature; -1 if not found</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.WriteZip64EndOfCentralDirectory(System.Int64,System.Int64,System.Int64)">
            <summary>
            Write Zip64 end of central directory records (File header and locator).
            </summary>
            <param name="noOfEntries">The number of entries in the central directory.</param>
            <param name="sizeEntries">The size of entries in the central directory.</param>
            <param name="centralDirOffset">The offset of the dentral directory.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.WriteEndOfCentralDirectory(System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Write the required records to end the central directory.
            </summary>
            <param name="noOfEntries">The number of entries in the directory.</param>
            <param name="sizeEntries">The size of the entries in the directory.</param>
            <param name="startOfCentralDirectory">The start of the central directory.</param>
            <param name="comment">The archive comment.  (This can be null).</param>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.ReadLEShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.ReadLEInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.ReadLELong">
            <summary>
            Read a long in little endian byte order.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.WriteLEShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.WriteLEUshort(System.UInt16)">
            <summary>
            Write a ushort in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.WriteLEUint(System.UInt32)">
            <summary>
            Write a uint in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.WriteLELong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.WriteLEUlong(System.UInt64)">
            <summary>
            Write a ulong in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.WriteDataDescriptor(SharpZip.Zip.ZipEntry)">
            <summary>
            Write a data descriptor.
            </summary>
            <param name="entry">The entry to write a descriptor for.</param>
            <returns>Returns the number of descriptor bytes written.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipHelperStream.ReadDataDescriptor(System.Boolean,SharpZip.Zip.DescriptorData)">
            <summary>
            Read data descriptor at the end of compressed data.
            </summary>
            <param name="zip64">if set to <c>true</c> [zip64].</param>
            <param name="data">The data to fill in.</param>
            <returns>Returns the number of bytes read in the descriptor.</returns>
        </member>
        <member name="P:SharpZip.Zip.ZipHelperStream.IsStreamOwner">
            <summary>
            Get / set a value indicating wether the the underlying stream is owned or not.
            </summary>
            <remarks>If the stream is owned it is closed when this instance is closed.</remarks>
        </member>
        <member name="T:SharpZip.Zip.KeysRequiredEventArgs">
            <summary>
            Arguments used with KeysRequiredEvent
            </summary>
        </member>
        <member name="M:SharpZip.Zip.KeysRequiredEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
        </member>
        <member name="M:SharpZip.Zip.KeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
            <param name="keyValue">The current key value.</param>
        </member>
        <member name="P:SharpZip.Zip.KeysRequiredEventArgs.FileName">
            <summary>
            Gets the name of the file for which keys are required.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.KeysRequiredEventArgs.Key">
            <summary>
            Gets or sets the key value
            </summary>
        </member>
        <member name="T:SharpZip.Zip.TestStrategy">
            <summary>
            The strategy to apply to testing.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.TestStrategy.FindFirstError">
            <summary>
            Find the first error only.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.TestStrategy.FindAllErrors">
            <summary>
            Find all possible errors.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.TestOperation">
            <summary>
            The operation in progress reported by a <see cref="T:SharpZip.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:SharpZip.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="F:SharpZip.Zip.TestOperation.Initialising">
            <summary>
            Setting up testing.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.TestOperation.EntryHeader">
            <summary>
            Testing an individual entries header
            </summary>
        </member>
        <member name="F:SharpZip.Zip.TestOperation.EntryData">
            <summary>
            Testing an individual entries data
            </summary>
        </member>
        <member name="F:SharpZip.Zip.TestOperation.EntryComplete">
            <summary>
            Testing an individual entry has completed.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.TestOperation.MiscellaneousTests">
            <summary>
            Running miscellaneous tests
            </summary>
        </member>
        <member name="F:SharpZip.Zip.TestOperation.Complete">
            <summary>
            Testing is complete
            </summary>
        </member>
        <member name="T:SharpZip.Zip.TestStatus">
            <summary>
            Status returned returned by <see cref="T:SharpZip.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:SharpZip.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="M:SharpZip.Zip.TestStatus.#ctor(SharpZip.Zip.ZipFile)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Zip.TestStatus"/>
            </summary>
            <param name="file">The <see cref="T:SharpZip.Zip.ZipFile"/> this status applies to.</param>
        </member>
        <member name="P:SharpZip.Zip.TestStatus.Operation">
            <summary>
            Get the current <see cref="T:SharpZip.Zip.TestOperation"/> in progress.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.TestStatus.File">
            <summary>
            Get the <see cref="T:SharpZip.Zip.ZipFile"/> this status is applicable to.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.TestStatus.Entry">
            <summary>
            Get the current/last entry tested.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.TestStatus.ErrorCount">
            <summary>
            Get the number of errors detected so far.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.TestStatus.BytesTested">
            <summary>
            Get the number of bytes tested so far for the current entry.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.TestStatus.EntryValid">
            <summary>
            Get a value indicating wether the last entry test was valid.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipTestResultHandler">
            <summary>
            Delegate invoked during <see cref="M:SharpZip.Zip.ZipFile.TestArchive(System.Boolean,SharpZip.Zip.TestStrategy,SharpZip.Zip.ZipTestResultHandler)">testing</see> if supplied indicating current progress and status.
            </summary>
            <remarks>If the message is non-null an error has occured.  If the message is null
            the operation as found in <see cref="T:SharpZip.Zip.TestStatus">status</see> has started.</remarks>
        </member>
        <member name="T:SharpZip.Zip.FileUpdateMode">
            <summary>
            The possible ways of <see cref="M:SharpZip.Zip.ZipFile.CommitUpdate">applying updates</see> to an archive.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FileUpdateMode.Safe">
            <summary>
            Perform all updates on temporary files ensuring that the original file is saved.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FileUpdateMode.Direct">
            <summary>
            Update the archive directly, which is faster but less safe.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            You can also update the archive adding or deleting entries.
            
            This class is thread safe for input:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using SharpZip.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		using (ZipFile zFile = new ZipFile(args[0])) {
            			Console.WriteLine("Listing of : " + zFile.Name);
            			Console.WriteLine("");
            			Console.WriteLine("Raw Size    Size      Date     Time     Name");
            			Console.WriteLine("--------  --------  --------  ------  ---------");
            			foreach (ZipEntry e in zFile) {
            				if ( e.IsFile ) {
            					DateTime d = e.DateTime;
            					Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            						d.ToString("dd-MM-yy"), d.ToString("HH:mm"),
            						e.Name);
            				}
            			}
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="F:SharpZip.Zip.ZipFile.KeysRequired">
            <summary>
            Event handler for handling encryption keys.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.OnKeysRequired(System.String)">
            <summary>
            Handles getting of encryption keys when required.
            </summary>
            <param name="fileName">The file for which encryption keys are required.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <param name="name">The name of the file to open.</param>
            <exception cref="T:System.ArgumentNullException">The argument supplied is null.</exception>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="file">The <see cref="T:System.IO.FileStream"/> to read archive data from.</param>
            <exception cref="T:System.ArgumentNullException">The supplied argument is null.</exception>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read archive data from.</param>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            The stream doesn't contain a valid zip archive.<br/>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:System.IO.Stream">stream</see> doesnt support seeking.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.IO.Stream">stream</see> argument is null.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.#ctor">
            <summary>
            Initialises a default <see cref="T:SharpZip.Zip.ZipFile"/> instance with no entries and no file storage.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Finalize">
            <summary>
            Finalize this instance.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Close">
            <summary>
            Closes the ZipFile.  If the stream is <see cref="P:SharpZip.Zip.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Create(System.String)">
            <summary>
            Create a new <see cref="T:SharpZip.Zip.ZipFile"/> whose data will be stored in a file.
            </summary>
            <param name="fileName">The name of the archive to create.</param>
            <returns>Returns the newly created <see cref="T:SharpZip.Zip.ZipFile"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"></paramref> is null</exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Create(System.IO.Stream)">
            <summary>
            Create a new <see cref="T:SharpZip.Zip.ZipFile"/> whose data will be stored on a stream.
            </summary>
            <param name="outStream">The stream providing data storage.</param>
            <returns>Returns the newly created <see cref="T:SharpZip.Zip.ZipFile"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="outStream"> is null</paramref></exception>
            <exception cref="T:System.ArgumentException"><paramref name="outStream"> doesnt support writing.</paramref></exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.GetEnumerator">
            <summary>
            Gets an enumerator for the Zip entries in this Zip file.
            </summary>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> for this archive.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            A clone of the zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.GetInputStream(SharpZip.Zip.ZipEntry)">
            <summary>
            Gets an input stream for reading the given zip entry data in an uncompressed form.
            Normally the <see cref="T:SharpZip.Zip.ZipEntry"/> should be an entry returned by GetEntry().
            </summary>
            <param name="entry">The <see cref="T:SharpZip.Zip.ZipEntry"/> to obtain a data <see cref="T:System.IO.Stream"/> for</param>
            <returns>An input <see cref="T:System.IO.Stream"/> containing data for this <see cref="T:SharpZip.Zip.ZipEntry"/></returns>
            <exception cref="T:System.ObjectDisposedException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.GetInputStream(System.Int64)">
            <summary>
            Creates an input stream reading a zip entry
            </summary>
            <param name="entryIndex">The index of the entry to obtain an input stream for.</param>
            <returns>
            An input <see cref="T:System.IO.Stream"/> containing data for this <paramref name="entryIndex"/>
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.TestArchive(System.Boolean)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <returns>true if all tests pass, false otherwise</returns>
            <remarks>Testing will terminate on the first error found.</remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.TestArchive(System.Boolean,SharpZip.Zip.TestStrategy,SharpZip.Zip.ZipTestResultHandler)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <param name="strategy">The <see cref="T:SharpZip.Zip.TestStrategy"></see> to apply.</param>
            <param name="resultHandler">The <see cref="T:SharpZip.Zip.ZipTestResultHandler"></see> handler to call during testing.</param>
            <returns>true if all tests pass, false otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">The object has already been closed.</exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.TestLocalHeader(SharpZip.Zip.ZipEntry,SharpZip.Zip.ZipFile.HeaderTest)">
            <summary>
            Test a local header against that provided from the central directory
            </summary>
            <param name="entry">
            The entry to test against
            </param>
            <param name="tests">The type of <see cref="T:SharpZip.Zip.ZipFile.HeaderTest">tests</see> to carry out.</param>
            <returns>The offset of the entries data in the file</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.BeginUpdate(SharpZip.Zip.IArchiveStorage,SharpZip.Zip.IDynamicDataSource)">
            <summary>
            Begin updating this <see cref="T:SharpZip.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The <see cref="T:SharpZip.Zip.IArchiveStorage">archive storage</see> for use during the update.</param>
            <param name="dataSource">The <see cref="T:SharpZip.Zip.IDynamicDataSource">data source</see> to utilise during updating.</param>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">One of the arguments provided is null</exception>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.BeginUpdate(SharpZip.Zip.IArchiveStorage)">
            <summary>
            Begin updating to this <see cref="T:SharpZip.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The storage to use during the update.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.BeginUpdate">
            <summary>
            Begin updating this <see cref="T:SharpZip.Zip.ZipFile"/> archive.
            </summary>
            <seealso cref="M:SharpZip.Zip.ZipFile.BeginUpdate(SharpZip.Zip.IArchiveStorage)"/>
            <seealso cref="M:SharpZip.Zip.ZipFile.CommitUpdate"></seealso>
            <seealso cref="M:SharpZip.Zip.ZipFile.AbortUpdate"></seealso>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.CommitUpdate">
            <summary>
            Commit current updates, updating this archive.
            </summary>
            <seealso cref="M:SharpZip.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:SharpZip.Zip.ZipFile.AbortUpdate"></seealso>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.AbortUpdate">
            <summary>
            Abort updating leaving the archive unchanged.
            </summary>
            <seealso cref="M:SharpZip.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:SharpZip.Zip.ZipFile.CommitUpdate"></seealso>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.SetComment(System.String)">
            <summary>
            Set the file comment to be recorded when the current update is <see cref="M:SharpZip.Zip.ZipFile.CommitUpdate">commited</see>.
            </summary>
            <param name="comment">The comment to record.</param>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Add(System.String,SharpZip.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comment for this entry.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Compression method is not supported.</exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Add(System.String,SharpZip.Zip.CompressionMethod)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <exception cref="T:System.ArgumentNullException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The compression method is not supported.</exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Add(System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Add(System.String,System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="entryName">The name to use for the <see cref="T:SharpZip.Zip.ZipEntry"/> on the Zip file created.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Add(SharpZip.Zip.IStaticDataSource,System.String)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Add(SharpZip.Zip.IStaticDataSource,System.String,SharpZip.Zip.CompressionMethod)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Add(SharpZip.Zip.IStaticDataSource,System.String,SharpZip.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comments for this entry.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Add(SharpZip.Zip.ZipEntry)">
            <summary>
            Add a <see cref="T:SharpZip.Zip.ZipEntry"/> that contains no data.
            </summary>
            <param name="entry">The entry to add.</param>
            <remarks>This can be used to add directories, volume labels, or empty file entries.</remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.AddDirectory(System.String)">
            <summary>
            Add a directory entry to the archive.
            </summary>
            <param name="directoryName">The directory to add.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Delete(System.String)">
            <summary>
            Delete an entry by name
            </summary>
            <param name="fileName">The filename to delete</param>
            <returns>True if the entry was found and deleted; false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Delete(SharpZip.Zip.ZipEntry)">
            <summary>
            Delete a <see cref="T:SharpZip.Zip.ZipEntry"/> from the archive.
            </summary>
            <param name="entry">The entry to delete.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.WriteLEUshort(System.UInt16)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.WriteLEUint(System.UInt32)">
            <summary>
            Write an unsigned int in little endian byte order.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.WriteLeLong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.GetBuffer">
            <summary>
            Get a raw memory buffer.
            </summary>
            <returns>Returns a raw memory buffer.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.GetDescriptorSize(SharpZip.Zip.ZipFile.ZipUpdate)">
            <summary>
            Get the size of the source descriptor for a <see cref="T:SharpZip.Zip.ZipFile.ZipUpdate"/>.
            </summary>
            <param name="update">The update to get the size for.</param>
            <returns>The descriptor size, zero if there isnt one.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.GetOutputStream(SharpZip.Zip.ZipEntry)">
            <summary>
            Get an output stream for the specified <see cref="T:SharpZip.Zip.ZipEntry"/>
            </summary>
            <param name="entry">The entry to get an output stream for.</param>
            <returns>The output stream obtained for the entry.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.ReadLEUshort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.ReadLEUint">
            <summary>
            Read a uint in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries array.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.LocateEntry(SharpZip.Zip.ZipEntry)">
            <summary>
            Locate the data for a given entry.
            </summary>
            <returns>
            The start offset of the data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.Key">
            <summary>
            Get/set the encryption key value.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.Password">
            <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
            <remarks>Set to null if no password is required.</remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.HaveKeys">
            <summary>
            Get a value indicating wether encryption keys are currently available.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.IsStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:SharpZip.Zip.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.IsEmbeddedArchive">
            <summary>
            Get a value indicating wether
            this archive is embedded in another file or not.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.IsNewArchive">
            <summary>
            Get a value indicating that this archive is a new one.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.Count">
            <summary>
            Get the number of entries contained in this <see cref="T:SharpZip.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.NameTransform">
            <summary>
            Get / set the <see cref="T:SharpZip.Core.INameTransform"/> to apply to names when updating.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.EntryFactory">
            <summary>
            Get/set the <see cref="T:SharpZip.Zip.IEntryFactory"/> used to generate <see cref="T:SharpZip.Zip.ZipEntry"/> values
            during updates.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.BufferSize">
            <summary>
            Get /set the buffer size to be used when updating this zip file.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.IsUpdating">
            <summary>
            Get a value indicating an update has <see cref="M:SharpZip.Zip.ZipFile.BeginUpdate">been started</see>.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipFile.KeysRequiredEventHandler">
            <summary>
            Delegate for handling keys/password setting during compresion/decompression.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipFile.UpdateCommand">
            <summary>
            The kind of update to apply.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipFile.UpdateComparer">
            <summary>
            Class used to sort updates.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.UpdateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is 
            less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare</param>
            <param name="y">Second object to compare.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:SharpZip.Zip.ZipFile.ZipUpdate">
            <summary>
            Represents a pending update to a Zip file.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.ZipUpdate.#ctor(SharpZip.Zip.ZipEntry)">
            <summary>
            Copy an existing entry.
            </summary>
            <param name="entry">The existing entry to copy.</param>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipUpdate.Entry">
            <summary>
            Get the <see cref="T:SharpZip.Zip.ZipEntry"/> for this update.
            </summary>
            <remarks>This is the source or original entry.</remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipUpdate.OutEntry">
            <summary>
            Get the <see cref="T:SharpZip.Zip.ZipEntry"/> that will be written to the updated/new file.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipUpdate.Command">
            <summary>
            Get the command for this update.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipUpdate.Filename">
            <summary>
            Get the filename if any for this update.  Null if none exists.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipUpdate.SizePatchOffset">
            <summary>
            Get/set the location of the size patch for this update.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipUpdate.CrcPatchOffset">
            <summary>
            Get /set the location of the crc patch for this update.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipUpdate.OffsetBasedSize">
            <summary>
            Get/set the size calculated by offset.
            Specifically, the difference between this and next entry's starting offset.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipFile.ZipString">
            <summary>
            Represents a string from a <see cref="T:SharpZip.Zip.ZipFile"/> which is stored as an array of bytes.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.ZipString.#ctor(System.String)">
            <summary>
            Initialise a <see cref="T:SharpZip.Zip.ZipFile.ZipString"/> with a string.
            </summary>
            <param name="comment">The textual string form.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.ZipString.#ctor(System.Byte[])">
            <summary>
            Initialise a <see cref="T:SharpZip.Zip.ZipFile.ZipString"/> using a string in its binary 'raw' form.
            </summary>
            <param name="rawString"></param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.ZipString.Reset">
            <summary>
            Reset the comment to its initial state.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.ZipString.op_Implicit(SharpZip.Zip.ZipFile.ZipString)~System.String">
            <summary>
            Implicit conversion of comment to a string.
            </summary>
            <param name="zipString">The <see cref="T:SharpZip.Zip.ZipFile.ZipString"/> to convert to a string.</param>
            <returns>The textual equivalent for the input value.</returns>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipString.IsSourceString">
            <summary>
            Get a value indicating the original source of data for this instance.
            True if the source was a string; false if the source was binary data.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipString.RawLength">
            <summary>
            Get the length of the comment when represented as raw bytes.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.ZipString.RawComment">
            <summary>
            Get the comment in its 'raw' form as plain bytes.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipFile.ZipEntryEnumerator">
            <summary>
            An <see cref="T:System.Collections.IEnumerator">enumerator</see> for <see cref="T:SharpZip.Zip.ZipEntry">Zip entries</see>
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipFile.UncompressedStream">
            <summary>
            An <see cref="T:SharpZip.Zip.ZipFile.UncompressedStream"/> is a stream that you can write uncompressed data
            to and flush, but cannot read, seek or do anything else to.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.UncompressedStream.Close">
            <summary>
            Close this stream instance.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.UncompressedStream.Flush">
            <summary>
            Write any buffered data to underlying storage.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.UncompressedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.UncompressedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.UncompressedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.UncompressedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.UncompressedStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.UncompressedStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.UncompressedStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.UncompressedStream.Length">
            <summary>
            Get the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.UncompressedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipFile.PartialInputStream">
            <summary>
            A <see cref="T:SharpZip.Zip.ZipFile.PartialInputStream"/> is an <see cref="T:SharpZip.Zip.Compression.Streams.InflaterInputStream"/>
            whose data is only a part or subsection of a file.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.PartialInputStream.#ctor(SharpZip.Zip.ZipFile,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of the <see cref="T:SharpZip.Zip.ZipFile.PartialInputStream"/> class.
            </summary>
            <param name="zipFile">The <see cref="T:SharpZip.Zip.ZipFile"/> containing the underlying stream to use for IO.</param>
            <param name="start">The start of the partial data.</param>
            <param name="length">The length of the partial data.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.PartialInputStream.ReadByte">
            <summary>
            Read a byte from this stream.
            </summary>
            <returns>Returns the byte read or -1 on end of stream.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.PartialInputStream.Close">
            <summary>
            Close this <see cref="T:SharpZip.Zip.ZipFile.PartialInputStream">partial input stream</see>.
            </summary>
            <remarks>
            The underlying stream is not closed.  Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.PartialInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.PartialInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.PartialInputStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.PartialInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipFile.PartialInputStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.PartialInputStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.PartialInputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.PartialInputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>false</value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.PartialInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>true</value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.PartialInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value>true.</value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:SharpZip.Zip.ZipFile.PartialInputStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <value></value>
            <returns>A value that determines whether the current stream can time out.</returns>
        </member>
        <member name="T:SharpZip.Zip.IStaticDataSource">
            <summary>
            Provides a static way to obtain a source of data for an entry.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.IStaticDataSource.GetSource">
            <summary>
            Get a source of data by creating a new stream.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:SharpZip.Zip.IDynamicDataSource">
            <summary>
            Represents a source of data that can dynamically provide
            multiple <see cref="T:System.IO.Stream">data sources</see> based on the parameters passed.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.IDynamicDataSource.GetSource(SharpZip.Zip.ZipEntry,System.String)">
            <summary>
            Get a data source.
            </summary>
            <param name="entry">The <see cref="T:SharpZip.Zip.ZipEntry"/> to get a source for.</param>
            <param name="name">The name for data if known.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:SharpZip.Zip.StaticDiskDataSource">
            <summary>
            Default implementation of a <see cref="T:SharpZip.Zip.IStaticDataSource"/> for use with files stored on disk.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.StaticDiskDataSource.#ctor(System.String)">
            <summary>
            Initialise a new instnace of <see cref="T:SharpZip.Zip.StaticDiskDataSource"/>
            </summary>
            <param name="fileName">The name of the file to obtain data from.</param>
        </member>
        <member name="M:SharpZip.Zip.StaticDiskDataSource.GetSource">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> provising data.</returns>
        </member>
        <member name="T:SharpZip.Zip.DynamicDiskDataSource">
            <summary>
            Default implementation of <see cref="T:SharpZip.Zip.IDynamicDataSource"/> for files stored on disk.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.DynamicDiskDataSource.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:SharpZip.Zip.DynamicDiskDataSource"/>.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.DynamicDiskDataSource.GetSource(SharpZip.Zip.ZipEntry,System.String)">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data for an entry.
            </summary>
            <param name="entry">The entry to provide data for.</param>
            <param name="name">The file name for data if known.</param>
            <returns>Returns a stream providing data; or null if not available</returns>
        </member>
        <member name="T:SharpZip.Zip.IArchiveStorage">
            <summary>
            Defines facilities for data storage when updating Zip Archives.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.IArchiveStorage.GetTemporaryOutput">
            <summary>
            Get an empty <see cref="T:System.IO.Stream"/> that can be used for temporary output.
            </summary>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:SharpZip.Zip.IArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:SharpZip.Zip.IArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Convert a temporary output stream to a final stream.
            </summary>
            <returns>The resulting final <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:SharpZip.Zip.IArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:SharpZip.Zip.IArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:SharpZip.Zip.IArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>This may be the current stream passed.</remarks>
        </member>
        <member name="M:SharpZip.Zip.IArchiveStorage.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.IArchiveStorage.UpdateMode">
            <summary>
            Get the <see cref="T:SharpZip.Zip.FileUpdateMode"/> to apply during updates.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.BaseArchiveStorage">
            <summary>
            An abstract <see cref="T:SharpZip.Zip.IArchiveStorage"/> suitable for extension by inheritance.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.BaseArchiveStorage.#ctor(SharpZip.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpZip.Zip.BaseArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:SharpZip.Zip.BaseArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
            <seealso cref="M:SharpZip.Zip.BaseArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:SharpZip.Zip.BaseArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
            <seealso cref="M:SharpZip.Zip.BaseArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:SharpZip.Zip.BaseArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to make a copy of.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:SharpZip.Zip.BaseArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to open for direct update.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:SharpZip.Zip.BaseArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.BaseArchiveStorage.UpdateMode">
            <summary>
            Gets the update mode applicable.
            </summary>
            <value>The update mode.</value>
        </member>
        <member name="T:SharpZip.Zip.DiskArchiveStorage">
            <summary>
            An <see cref="T:SharpZip.Zip.IArchiveStorage"/> implementation suitable for hard disks.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.DiskArchiveStorage.#ctor(SharpZip.Zip.ZipFile,SharpZip.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpZip.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:SharpZip.Zip.DiskArchiveStorage.#ctor(SharpZip.Zip.ZipFile)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpZip.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:SharpZip.Zip.DiskArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/> for performing updates on.
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:SharpZip.Zip.DiskArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts a temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:SharpZip.Zip.DiskArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:SharpZip.Zip.DiskArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>If the <paramref name="current"/> stream is not null this is used as is.</remarks>
        </member>
        <member name="M:SharpZip.Zip.DiskArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.MemoryArchiveStorage">
            <summary>
            An <see cref="T:SharpZip.Zip.IArchiveStorage"/> implementation suitable for in memory streams.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.MemoryArchiveStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpZip.Zip.MemoryArchiveStorage"/> class.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.MemoryArchiveStorage.#ctor(SharpZip.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpZip.Zip.MemoryArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The <see cref="T:SharpZip.Zip.FileUpdateMode"/> to use</param>
            <remarks>This constructor is for testing as memory streams dont really require safe mode.</remarks>
        </member>
        <member name="M:SharpZip.Zip.MemoryArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets the temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:SharpZip.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:SharpZip.Zip.MemoryArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:SharpZip.Zip.MemoryArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The original source stream</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>If the <paramref name="stream"/> passed is not null this is used;
            otherwise a new <see cref="T:System.IO.MemoryStream"/> is returned.</remarks>
        </member>
        <member name="M:SharpZip.Zip.MemoryArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.MemoryArchiveStorage.FinalStream">
            <summary>
            Get the stream returned by <see cref="M:SharpZip.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal"/> if this was in fact called.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipException">
            <summary>
            Represents exception conditions specific to Zip archive handling
            </summary>
        </member>
        <member name="T:SharpZip.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:SharpZip.SharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:SharpZip.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:SharpZip.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:SharpZip.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:SharpZip.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:SharpZip.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of ZipException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:SharpZip.Zip.WindowsNameTransform">
            <summary>
            WindowsNameTransform transforms <see cref="T:SharpZip.Zip.ZipFile"/> names to windows compatible ones.
            </summary>
        </member>
        <member name="T:SharpZip.Core.INameTransform">
            <summary>
            INameTransform defines how file system names are transformed for use with archives, or vice versa.
            </summary>
        </member>
        <member name="M:SharpZip.Core.INameTransform.TransformFile(System.String)">
            <summary>
            Given a file name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed file name.</returns>
        </member>
        <member name="M:SharpZip.Core.INameTransform.TransformDirectory(System.String)">
            <summary>
            Given a directory name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed directory name</returns>
        </member>
        <member name="F:SharpZip.Zip.WindowsNameTransform.MaxPath">
            <summary>
             The maximum windows path name permitted.
            </summary>
            <remarks>This may not valid for all windows systems - CE?, etc but I cant find the equivalent in the CLR.</remarks>
        </member>
        <member name="M:SharpZip.Zip.WindowsNameTransform.#ctor(System.String)">
            <summary>
            Initialises a new instance of <see cref="T:SharpZip.Zip.WindowsNameTransform"/>
            </summary>
            <param name="baseDirectory"></param>
        </member>
        <member name="M:SharpZip.Zip.WindowsNameTransform.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:SharpZip.Zip.WindowsNameTransform"/>
            </summary>
        </member>
        <member name="M:SharpZip.Zip.WindowsNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a Zip directory name to a windows directory name.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:SharpZip.Zip.WindowsNameTransform.TransformFile(System.String)">
            <summary>
            Transform a Zip format file name to a windows style one.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:SharpZip.Zip.WindowsNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a windows filename as extracted from a Zip archive.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>The filename isnt a true windows path in some fundamental ways like no absolute paths, no rooted paths etc.</remarks>
        </member>
        <member name="M:SharpZip.Zip.WindowsNameTransform.#cctor">
            <summary>
            Initialise static class information.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.WindowsNameTransform.MakeValidName(System.String,System.Char)">
            <summary>
            Force a name to be valid by replacing invalid characters with a fixed value
            </summary>
            <param name="name">The name to make valid</param>
            <param name="replacement">The replacement character to use for any invalid characters.</param>
            <returns>Returns a valid name</returns>
        </member>
        <member name="P:SharpZip.Zip.WindowsNameTransform.BaseDirectory">
            <summary>
            Gets or sets a value containing the target directory to prefix values with.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.WindowsNameTransform.TrimIncomingPaths">
            <summary>
            Gets or sets a value indicating wether paths on incoming values should be removed.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.WindowsNameTransform.Replacement">
            <summary>
            Gets or set the character to replace invalid characters during transformations.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.OutputWindow.CopyStored(SharpZip.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:SharpZip.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:SharpZip.Encryption.ZipAESStream">
            <summary>
            Encrypts and decrypts AES ZIP
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.ZipAESStream.#ctor(System.IO.Stream,SharpZip.Encryption.ZipAESTransform,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The stream on which to perform the cryptographic transformation.</param>
            <param name="transform">Instance of ZipAESTransform</param>
            <param name="mode">Read or Write</param>
        </member>
        <member name="M:SharpZip.Encryption.ZipAESStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current CryptoStream into buffer,
            and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.ZipAESStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
            <param name="offset">The byte offset in buffer at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="T:SharpZip.BZip2.BZip2Exception">
            <summary>
            BZip2Exception represents exceptions specific to Bzip2 algorithm
            </summary>
        </member>
        <member name="M:SharpZip.BZip2.BZip2Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:SharpZip.BZip2.BZip2Exception.#ctor">
            <summary>
            Initialise a new instance of BZip2Exception.
            </summary>
        </member>
        <member name="M:SharpZip.BZip2.BZip2Exception.#ctor(System.String)">
            <summary>
            Initialise a new instance of BZip2Exception with its message set to message.
            </summary>
            <param name="message">The message describing the error.</param>
        </member>
        <member name="M:SharpZip.BZip2.BZip2Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initialise an instance of BZip2Exception
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:MySoft.Aop.AopProxyAttribute">
            <summary>
            AopProxyAttribute
            AOP代理特性，如果一个类想实现具体的AOP，只要实现AopProxyBase和IAopProxyFactory，然后加上该特性即可。
            2010.11.09
            </summary>
        </member>
        <member name="M:MySoft.Aop.AopProxyAttribute.CreateInstance(System.Type)">
            <summary>
            获得目标对象的自定义透明代理
            </summary>
        </member>
        <member name="T:MySoft.Logger.ErrorLogEventHandler">
            <summary>
            A delegate used for exception.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:MySoft.Logger.IErrorLogable">
            <summary>
            Mark a implementing class as loggable.
            </summary>
        </member>
        <member name="E:MySoft.Logger.IErrorLogable.OnError">
            <summary>
            OnError event.
            </summary>
        </member>
        <member name="T:MySoft.SortProperty">
            <summary>
            排序数据属性
            </summary>
        </member>
        <member name="P:MySoft.SortProperty.Asc">
            <summary>
            从小到大
            </summary>
        </member>
        <member name="P:MySoft.SortProperty.Desc">
            <summary>
            从大到小
            </summary>
        </member>
        <member name="T:MySoft.SortComparer`1">
            <summary>
            自定义数据排序算法
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.SortComparer`1.#ctor(MySoft.SortProperty[])">
            <summary>
            初始化自定义比较类
            </summary>
            <param name="sorts"></param>
        </member>
        <member name="M:MySoft.SortComparer`1.AddProperty(MySoft.SortProperty[])">
            <summary>
            添加排序属性
            </summary>
            <param name="sorts"></param>
        </member>
        <member name="M:MySoft.SortComparer`1.Compare(`0,`0)">
            <summary>
            实现Compare比较两个值的大小
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SortComparer`1.CompareValue(`0,`0,System.Int32)">
            <summary>
            进行深层排序
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SortComparer`1.CompareProperty(`0,`0,MySoft.SortProperty)">
            <summary>
            比较两个值的大小(从小到大)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.ObjectBuilder`1">
            <summary>
            对象构造器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.ObjectBuilder">
            <summary>
            对象构造器
            </summary>
        </member>
        <member name="T:MySoft.Remoting.IRemotingTest">
            <summary>
            Remoting测试类接口
            </summary>
        </member>
        <member name="M:MySoft.Remoting.IRemotingTest.GetDate">
            <summary>
            测试方法，获取Remoting服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Remoting.RemotingTest">
            <summary>
            Remoting测试类，用来测试Remoting服务器是否运行正常
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingTest.GetDate">
            <summary>
            测试方法，获取Remoting服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Security.AES">
            <summary> 
            AES加密
            </summary> 
        </member>
        <member name="M:MySoft.Security.AES.Encrypt(System.String,System.String)">
            <summary>
            AES加密字符串
            </summary>
            <param name="encryptString"></param>
            <param name="encryptKey"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Security.AES.Decrypt(System.String,System.String)">
            <summary>
            AES解密字符串
            </summary>
            <param name="decryptString"></param>
            <param name="decryptKey"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Security.AES.Encrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            AES加密
            </summary>
            <param name="inputdata">输入的数据</param>
            <param name="iv">向量128位</param>
            <param name="strKey">加密密钥</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Security.AES.Decrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            AES解密
            </summary>
            <param name="inputdata">输入的数据</param>
            <param name="iv">向量128</param>
            <param name="strKey">key</param>
            <returns></returns>
        </member>
        <member name="T:MySoft.RESTful.PublishMethod">
            <summary>
            发布的REST方法
            </summary>
        </member>
        <member name="M:MySoft.RESTful.PublishMethod.#ctor">
            <summary>
            实例化PublishMethod
            </summary>
        </member>
        <member name="M:MySoft.RESTful.PublishMethod.#ctor(System.String)">
            <summary>
            实例化PublishMethod
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:MySoft.RESTful.PublishMethod.Name">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:MySoft.RESTful.PublishMethod.Description">
            <summary>
            方法描述
            </summary>
        </member>
        <member name="P:MySoft.RESTful.PublishMethod.Method">
            <summary>
            调用方式
            </summary>
        </member>
        <member name="P:MySoft.RESTful.PublishMethod.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:MySoft.RESTful.PublishMethod.Authorized">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="T:MySoft.RESTful.Configuration.RESTfulConfiguration">
            <summary>
            Specifies the configuration settings in the Web.config for the Auth.
            </summary>
        </member>
        <member name="M:MySoft.RESTful.Configuration.RESTfulConfiguration.GetConfig">
            <summary>
            GetConfig() returns an instance of the <b>StaticPageConfiguration</b> class with the values populated from
            the Web.config file.  It uses XML deserialization to convert the XML structure in Web.config into
            a <b>StaticPageConfiguration</b> instance.
            </summary>
            <returns>A <see cref="!:StaticPageConfiguration"/> instance.</returns>
        </member>
        <member name="P:MySoft.RESTful.Configuration.RESTfulConfiguration.Auths">
            <summary>
            A <see cref="T:MySoft.RESTful.Configuration.AuthenticationCollection"/> instance that provides access to a set of <see cref="!:StaticPageRule"/>s.
            </summary>
        </member>
        <member name="T:MySoft.RESTful.Configuration.AuthenticationCollection">
            <summary>
            The RewriterRuleCollection models a set of RewriterRules in the Web.config file.
            </summary>
            <remarks>
            The RewriterRuleCollection is expressed in XML as:
            <code>
            &lt;RewriterRule&gt;
              &lt;LookFor&gt;<i>pattern to search for</i>&lt;/LookFor&gt;
              &lt;SendTo&gt;<i>string to redirect to</i>&lt;/LookFor&gt;
            &lt;RewriterRule&gt;
            &lt;RewriterRule&gt;
              &lt;LookFor&gt;<i>pattern to search for</i>&lt;/LookFor&gt;
              &lt;SendTo&gt;<i>string to redirect to</i>&lt;/LookFor&gt;
            &lt;RewriterRule&gt;
            ...
            &lt;RewriterRule&gt;
              &lt;LookFor&gt;<i>pattern to search for</i>&lt;/LookFor&gt;
              &lt;SendTo&gt;<i>string to redirect to</i>&lt;/LookFor&gt;
            &lt;RewriterRule&gt;
            </code>
            </remarks>
        </member>
        <member name="M:MySoft.RESTful.Configuration.AuthenticationCollection.Add(MySoft.RESTful.Configuration.Authentication)">
            <summary>
            Adds a new RewriterRule to the collection.
            </summary>
            <param name="r">A RewriterRule instance.</param>
        </member>
        <member name="P:MySoft.RESTful.Configuration.AuthenticationCollection.Item(System.Int32)">
            <summary>
            Gets or sets a RewriterRule at a specified ordinal index.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            Create a custom object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpZip.LZW.LzwInputStream">
             <summary>
             This filter stream is used to decompress a LZW format stream.
             Specifically, a stream that uses the LZC compression method.
             This file format is usually associated with the .Z file extension.
            
             See http://en.wikipedia.org/wiki/Compress
             See http://wiki.wxwidgets.org/Development:_Z_File_Format
             
             The file header consists of 3 (or optionally 4) bytes. The first two bytes
             contain the magic marker "0x1f 0x9d", followed by a byte of flags.
            
             Based on Java code by Ronald Tschalar, which in turn was based on the unlzw.c
             code in the gzip package.
             </summary>
             <example> This sample shows how to unzip a compressed file
             <code>
             using System;
             using System.IO;
             
             using SharpZip.Core;
             using SharpZip.LZW;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
            			using (Stream inStream = new LzwInputStream(File.OpenRead(args[0])))
            			using (FileStream outStream = File.Create(Path.GetFileNameWithoutExtension(args[0]))) {
            				byte[] buffer = new byte[4096];
            				StreamUtils.Copy(inStream, outStream, buffer);
                                     // OR
                                     inStream.Read(buffer, 0, buffer.Length);
                                     // now do something with the buffer
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a LzwInputStream
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream LZW format)
            </param>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.ReadByte">
            <summary>
            See <see cref="M:System.IO.Stream.ReadByte"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name ="buffer">
            The array to read and decompress data into
            </param>
            <param name ="offset">
            The offset indicating where the data should be placed
            </param>
            <param name ="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read. Zero signals the end of stream</returns>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.ResetBuf(System.Int32)">
            <summary>
            Moves the unread data in the buffer to the beginning and resets
            the pointers.
            </summary>
            <param name="bitPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="offset">The relative offset to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> defining where to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="value">The new length value for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <param name="buffer">Thew buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <param name="value">The byte to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.LZW.LzwInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:SharpZip.LZW.LzwInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="F:SharpZip.LZW.LzwInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="F:SharpZip.LZW.LzwInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="P:SharpZip.LZW.LzwInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:SharpZip.LZW.LzwInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:SharpZip.LZW.LzwInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:SharpZip.LZW.LzwInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:SharpZip.LZW.LzwInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:SharpZip.LZW.LzwInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:SharpZip.LZW.LzwInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="T:SharpZip.BZip2.BZip2OutputStream">
            <summary>
            An output stream that compresses into the BZip2 format 
            including file header chars into another stream.
            </summary>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a default output stream with maximum block size
            </summary>
            <param name="stream">The stream to write BZip data onto.</param>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:SharpZip.BZip2.BZip2OutputStream"></see> 
            for the specified stream, using the given blocksize.
            </summary>
            <param name="stream">The stream to write compressed data to.</param>
            <param name="blockSize">The block size to use.</param>
            <remarks>
            Valid block sizes are in the range 1..9, with 1 giving 
            the lowest compression and 9 the highest.
            </remarks>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.Finalize">
            <summary>
            Ensures that resources are freed and other cleanup operations 
            are performed when the garbage collector reclaims the BZip2OutputStream.
            </summary>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to the offset from which to being seeking.</param>
            <param name="origin">The reference point from which to begin seeking.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new stream length.</param>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.ReadByte">
            <summary>
            Read a byte from the stream advancing the position.
            </summary>
            <returns>The byte read cast to an int; -1 if end of stream.</returns>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset in the buffer to start storing data at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read. This might be less than the number of bytes
            requested if that number of bytes are not currently available, or zero 
            if the end of the stream is reached.</returns>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of bytes to the stream
            </summary>
            <param name="buffer">The buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream.
            </summary>
            <param name="value">The byte to write to the stream.</param>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.Close">
            <summary>
            End the current block and end compression.
            Close the stream and free any resources
            </summary>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.WriteRun">
            <summary>
            Get the number of bytes written to output.
            </summary>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:SharpZip.BZip2.BZip2OutputStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:SharpZip.BZip2.BZip2OutputStream.Flush">
            <summary>
            Flush output buffers
            </summary>		
        </member>
        <member name="P:SharpZip.BZip2.BZip2OutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:SharpZip.BZip2.BZip2OutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2OutputStream.Length">
            <summary>
            Gets the length in bytes of the stream
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2OutputStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2OutputStream.BytesWritten">
            <summary>
            Get the number of bytes written to the output.
            </summary>
        </member>
        <member name="T:SharpZip.BZip2.BZip2Constants">
            <summary>
            Defines internal values for both compression and decompression
            </summary>
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.BaseBlockSize">
            <summary>
            When multiplied by compression parameter (1-9) gives the block size for compression
            9 gives the best compression but uses the most memory.
            </summary>		
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.MaximumAlphaSize">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.MaximumCodeLength">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.RunA">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.RunB">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.GroupCount">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.GroupSize">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.NumberOfIterations">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.MaximumSelectors">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.OvershootBytes">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:SharpZip.BZip2.BZip2Constants.RandomNumbers">
            <summary>
            Random numbers used to randomise repetitive blocks
            </summary>
        </member>
        <member name="T:MySoft.Task.ITask">
            <summary>
            任务接口
            </summary>
        </member>
        <member name="M:MySoft.Task.ITask.Run">
            <summary>
            任务执行入口
            </summary>
        </member>
        <member name="T:MySoft.Remoting.Configuration.RemotingClientConfigurationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.Configuration.RemotingClientConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Threading.Internal.CallerThreadContext">
            <summary>
            This class stores the caller call context in order to restore
            it when the work item is executed in the thread pool environment. 
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.CallerThreadContext.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.CallerThreadContext.Capture(System.Boolean,System.Boolean)">
            <summary>
            Captures the current thread context
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Threading.Internal.CallerThreadContext.Apply(MySoft.Threading.Internal.CallerThreadContext)">
            <summary>
            Applies the thread context stored earlier
            </summary>
            <param name="callerThreadContext"></param>
        </member>
        <member name="T:MySoft.RESTful.AuthenticationToken">
            <summary>
            认证Token信息
            </summary>
        </member>
        <member name="M:MySoft.RESTful.AuthenticationToken.#ctor(System.Uri)">
            <summary>
            实例化AuthenticationToken
            </summary>
            <param name="requestUri"></param>
        </member>
        <member name="M:MySoft.RESTful.AuthenticationToken.#ctor(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            实例化AuthenticationToken
            </summary>
            <param name="requestUri"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MySoft.RESTful.AuthenticationToken.#ctor(System.Uri,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            实例化AuthenticationToken
            </summary>
            <param name="requestUri"></param>
            <param name="parameters"></param>
            <param name="method"></param>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationToken.RequestUri">
            <summary>
            请求的uri
            </summary>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationToken.Parameters">
            <summary>
            传入的参数
            </summary>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationToken.Cookies">
            <summary>
            Cookie信息
            </summary>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationToken.Method">
            <summary>
            提交方法 （Post or Get）
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.ContainsWhiteSpace(System.String)">
            <summary>
            Determines whether the string contains white space.
            </summary>
            <param name="s">The string to test for white space.</param>
            <returns>
            	<c>true</c> if the string contains white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.EnsureEndsWith(System.String,System.String)">
            <summary>
            Ensures the target string ends with the specified string.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <returns>The target string with the value string at the end.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IfNotNullOrEmpty(System.String,System.Action{System.String})">
            <summary>
            Perform an action if the string is not null or empty.
            </summary>
            <param name="value">The value.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32)">
            <summary>
            Indents the specified string.
            </summary>
            <param name="s">The string to indent.</param>
            <param name="indentation">The number of characters to indent by.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32,System.Char)">
            <summary>
            Indents the specified string.
            </summary>
            <param name="s">The string to indent.</param>
            <param name="indentation">The number of characters to indent by.</param>
            <param name="indentChar">The indent character.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.NumberLines(System.String)">
            <summary>
            Numbers the lines.
            </summary>
            <param name="s">The string to number.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class from another <see cref="T:Newtonsoft.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SharpZip.Zip.UseZip64">
            <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.UseZip64.Off">
            <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
            <remarks>An entry can have this overridden if required <see cref="M:SharpZip.Zip.ZipEntry.ForceZip64"></see></remarks>
        </member>
        <member name="F:SharpZip.Zip.UseZip64.On">
            <summary>
            Zip64 should always be used.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.UseZip64.Dynamic">
            <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:SharpZip.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:SharpZip.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:SharpZip.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:SharpZip.Zip.CompressionMethod.BZip2">
            <summary>
            BZip2 compression. Not supported by #Zip.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Now supported by #Zip.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.EncryptionAlgorithm">
            <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption has been used.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.Des">
            <summary>
            DES encryption has been used.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.RC2">
            <summary>
            RCS encryption has been used for encryption.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.TripleDes168">
            <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.TripleDes112">
            <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.Aes128">
            <summary>
            AES 128 has been used for encryption.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.Aes192">
            <summary>
            AES 192 has been used for encryption.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.Aes256">
            <summary>
            AES 256 has been used for encryption.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.RC2Corrected">
            <summary>
            RC2 corrected has been used for encryption.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish has been used for encryption.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.Twofish">
            <summary>
            Twofish has been used for encryption.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.RC4">
            <summary>
            RC4 has been used for encryption.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.EncryptionAlgorithm.Unknown">
            <summary>
            An unknown algorithm has been used for encryption.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.Encrypted">
            <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.Method">
            <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.Descriptor">
            <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.ReservedPKware4">
            <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.Patched">
            <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.StrongEncryption">
            <summary>
            Bit 6 if set indicates strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.Unused7">
            <summary>
            Bit 7 is currently unused
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.Unused8">
            <summary>
            Bit 8 is currently unused
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.Unused9">
            <summary>
            Bit 9 is currently unused
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.Unused10">
            <summary>
            Bit 10 is currently unused
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.UnicodeText">
            <summary>
            Bit 11 if set indicates the filename and 
            comment fields for this file must be encoded using UTF-8.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.EnhancedCompress">
            <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.HeaderMasked">
            <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
            <remarks>
            Used when encrypting the central directory contents.
            </remarks>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.ReservedPkware14">
            <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="F:SharpZip.Zip.GeneralBitFlags.ReservedPkware15">
            <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.VersionMadeBy">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:SharpZip.Zip.ZipEntry.CanDecompress"/>.
            </remarks>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:SharpZip.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.VersionStrongEncryption">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.VERSION_AES">
            <summary>
            Version indicating AES encryption
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.VersionZip64">
            <summary>
            The version required for Zip64 extensions (4.5 or higher)
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.LocalHeaderBaseSize">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.Zip64DataDescriptorSize">
            <summary>
            Size of Zip64 data descriptor
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.DataDescriptorSize">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.CentralHeaderBaseSize">
            <summary>
            Size of central header entry (excluding variable fields)
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.EndOfCentralRecordBaseSize">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.CryptoHeaderSize">
            <summary>
            Size of 'classic' cryptographic header stored before any entry data
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.LocalHeaderSignature">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.SpanningSignature">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.SpanningTempSignature">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.DataDescriptorSignature">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.CentralHeaderSignature">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.Zip64CentralFileHeaderSignature">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.Zip64CentralDirLocatorSignature">
            <summary>
            Signature for Zip64 central directory locator
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.ArchiveExtraDataSignature">
            <summary>
            Signature for archive extra data signature (were headers are encrypted).
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.CentralHeaderDigitalSignature">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.EndOfCentralDirectorySignature">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="count">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:SharpZip.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:SharpZip.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="data">
            Byte array to convert
            </param>
            <param name="count">The number of bytes to convert.</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:SharpZip.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <param name="flags">The applicable general purpose bits flags</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:SharpZip.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipConstants.ConvertToArray(System.Int32,System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="flags">The applicable <see cref="T:SharpZip.Zip.GeneralBitFlags">general purpose bits flags</see></param>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipConstants.#ctor">
            <summary>
            Initialise default instance of <see cref="T:SharpZip.Zip.ZipConstants">ZipConstants</see>
            </summary>
            <remarks>
            Private to prevent instances being created.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system OEM code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.IEntryFactory">
            <summary>
            Defines factory methods for creating new <see cref="T:SharpZip.Zip.ZipEntry"></see> values.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.IEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Create a <see cref="T:SharpZip.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <returns>Returns a <see cref="T:SharpZip.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName"/> passed.</returns>
        </member>
        <member name="M:SharpZip.Zip.IEntryFactory.MakeFileEntry(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:SharpZip.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <param name="useFileSystem">If true get details from the file system if the file exists.</param>
            <returns>Returns a <see cref="T:SharpZip.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName"/> passed.</returns>
        </member>
        <member name="M:SharpZip.Zip.IEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Create a <see cref="T:SharpZip.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <returns>Returns a <see cref="T:SharpZip.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName"/> passed.</returns>
        </member>
        <member name="M:SharpZip.Zip.IEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:SharpZip.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <param name="useFileSystem">If true get details from the file system for this directory if it exists.</param>
            <returns>Returns a <see cref="T:SharpZip.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName"/> passed.</returns>
        </member>
        <member name="P:SharpZip.Zip.IEntryFactory.NameTransform">
            <summary>
            Get/set the <see cref="T:SharpZip.Core.INameTransform"></see> applicable.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.InflaterHuffmanTree.GetSymbol(SharpZip.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:SharpZip.Tar.InvalidHeaderException">
            <summary>
            This exception is used to indicate that there is a problem
            with a TAR archive header.
            </summary>
        </member>
        <member name="T:SharpZip.Tar.TarException">
            <summary>
            TarExceptions are used for exceptions specific to tar classes and code.	
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:SharpZip.Tar.TarException.#ctor">
            <summary>
            Initialises a new instance of the TarException class.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the TarException class with a specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SharpZip.Tar.TarException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:SharpZip.Tar.InvalidHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="information"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:SharpZip.Tar.InvalidHeaderException.#ctor">
            <summary>
            Initialise a new instance of the InvalidHeaderException class.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.InvalidHeaderException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the InvalidHeaderException class with a specified message.
            </summary>
            <param name="message">Message describing the exception cause.</param>
        </member>
        <member name="M:SharpZip.Tar.InvalidHeaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of InvalidHeaderException
            </summary>
            <param name="message">Message describing the problem.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:SharpZip.GZip.GZipInputStream">
            <summary>
            This filter stream is used to decompress a "GZIP" format stream.
            The "GZIP" format is described baseInputStream RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to unzip a gzipped file
            <code>
            using System;
            using System.IO;
            
            using SharpZip.Core;
            using SharpZip.GZip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		using (Stream inStream = new GZipInputStream(File.OpenRead(args[0])))
            		using (FileStream outStream = File.Create(Path.GetFileNameWithoutExtension(args[0]))) {
            			byte[] buffer = new byte[4096];
            			StreamUtils.Copy(inStream, outStream, buffer);
            		}
            	}
            }	
            </code>
            </example>
        </member>
        <member name="F:SharpZip.GZip.GZipInputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="F:SharpZip.GZip.GZipInputStream.readGZIPHeader">
            <summary>
            Flag to indicate if we've read the GZIP header yet for the current member (block of compressed data).
            This is tracked per-block as the file is parsed.
            </summary>
        </member>
        <member name="M:SharpZip.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GZipInputStream with the default buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
        </member>
        <member name="M:SharpZip.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPInputStream with the specified buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:SharpZip.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads uncompressed data into an array of bytes
            </summary>
            <param name="buffer">
            The buffer to read uncompressed data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of uncompressed bytes to be read
            </param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="T:MySoft.Aop.AopSwitcherAttribute">
            <summary>
            AopSwitcherAttribute 用于决定一个被AopProxyAttribute修饰的class的某个特定方法是否启用截获 。
            创建原因：绝大多数时候我们只希望对某个类的一部分Method而不是所有Method使用截获。
            使用方法：如果一个方法没有使用AopSwitcherAttribute特性或使用AopSwitcherAttribute(false)修饰，
            　　 都不会对其进行截获。只对使用了AopSwitcherAttribute(true)启用截获。
            2010.11.09
            </summary>
        </member>
        <member name="P:MySoft.Aop.AopSwitcherAttribute.UseAspect">
            <summary>
            是否使用切面处理
            </summary>
        </member>
        <member name="T:MySoft.TypeConstructor">
            <summary> 
            考虑到某些类型没有无参的构造函数，增加了描述构造信息的专门结构 
            </summary> 
        </member>
        <member name="T:MySoft.ITypeMap">
            <summary> 
            管理抽象类型与实体类型的字典类型 
            </summary> 
        </member>
        <member name="M:MySoft.ITypeMap.AddTypeConstructor(System.Type,MySoft.TypeConstructor)">
            <summary>
            注册抽象类型需要使用的实体类型 
            该类型实体具有构造参数，实际的配置信息可以从外层机制获得。 
            </summary>
            <param name="type"></param>
            <param name="typeConstructor"></param>
        </member>
        <member name="P:MySoft.ITypeMap.Item(System.Type)">
            <summary> 
            根据注册的目标抽象类型，返回一个实体类型及其构造参数数组 
            </summary> 
            <param name="type"></param> 
            <returns></returns> 
        </member>
        <member name="T:MySoft.TypeMap">
            <summary> 
            管理抽象类型与实际实体类型映射关系，实际工程中应该从配置系统、参数系统获得。 
            这里为了示例方便，采用了一个纯内存字典的方式。 
            </summary> 
        </member>
        <member name="M:MySoft.TypeMap.#ctor">
            <summary> 
            Singleton 
            </summary> 
        </member>
        <member name="M:MySoft.TypeMap.AddTypeConstructor(System.Type,MySoft.TypeConstructor)">
            <summary>
            注册抽象类型需要使用的实体类型 
            该类型实体具有构造参数，实际的配置信息可以从外层机制获得。 
            </summary>
            <param name="type"></param>
            <param name="typeConstructor"></param>
        </member>
        <member name="P:MySoft.TypeMap.Item(System.Type)">
            <summary> 
            根据注册的目标抽象类型，返回一个实体类型及其构造参数数组 
            </summary> 
            <param name="type"></param> 
            <returns></returns> 
        </member>
        <member name="T:MySoft.Assembler`1">
            <summary>
            提供注入的实现类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MySoft.Assembler`1.map">
            <summary> 
            其实TypeMap工程上本身就是个需要注入的类型，可以通过访问配置系统获得， 
            这里为了示例的方便，手工配置了一些类型映射信息。 
            </summary> 
        </member>
        <member name="M:MySoft.Assembler`1.Create">
            <summary>
            创建一个实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Remoting.IRemotingLogFileManager">
            <summary>
            文件管理Remoting服务
            </summary>
        </member>
        <member name="M:MySoft.Remoting.IRemotingLogFileManager.Delete(System.String)">
            <summary>
            删除日志文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MySoft.Remoting.IRemotingLogFileManager.Get(System.String)">
            <summary>
            获取日志文件内容
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.IRemotingLogFileManager.GetAll">
            <summary>
            获取所有日志文件名列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Remoting.RemotingLogFileManager">
            <summary>
            Remoting Service Log File Manager
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingLogFileManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingLogFileManager.GetAll">
            <summary>
            获取所有日志文件名列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingLogFileManager.Get(System.String)">
            <summary>
            获取日志文件内容
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingLogFileManager.Delete(System.String)">
            <summary>
            删除日志文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:MySoft.Threading.Internal.WorkItemStateCallback">
            <summary>
            An internal delegate to call when the WorkItem starts or completes
            </summary>
        </member>
        <member name="T:MySoft.RESTful.PublishKind">
            <summary>
            发布REST分类
            </summary>
        </member>
        <member name="M:MySoft.RESTful.PublishKind.#ctor">
            <summary>
            实例化PublishKind
            </summary>
        </member>
        <member name="M:MySoft.RESTful.PublishKind.#ctor(System.String)">
            <summary>
            实例化PublishKind
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:MySoft.RESTful.PublishKind.Name">
            <summary>
            类别名称
            </summary>
        </member>
        <member name="P:MySoft.RESTful.PublishKind.Description">
            <summary>
            类别描述
            </summary>
        </member>
        <member name="P:MySoft.RESTful.PublishKind.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the converter.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the type of the converter.
            </summary>
            <value>The type of the converter.</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="T:SharpZip.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">The output array.</param>
            <param name="offset">The offset into output array.</param>
            <param name="length">The maximum number of bytes to store.</param>
            <returns>The number of bytes flushed.</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="P:SharpZip.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="T:SharpZip.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:SharpZip.Tar.TarHeader">
            <summary>
            This class encapsulates the Tar Entry Header used in Tar Archives.
            The class also holds a number of tar constants, used mostly in headers.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.NAMELEN">
            <summary>
            The length of the name field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.MODELEN">
            <summary>
            The length of the mode field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.UIDLEN">
            <summary>
            The length of the user id field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.GIDLEN">
            <summary>
            The length of the group id field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.CHKSUMLEN">
            <summary>
            The length of the checksum field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.CHKSUMOFS">
            <summary>
            Offset of checksum in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.SIZELEN">
            <summary>
            The length of the size field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.MAGICLEN">
            <summary>
            The length of the magic field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.VERSIONLEN">
            <summary>
            The length of the version field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.MODTIMELEN">
            <summary>
            The length of the modification time field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.UNAMELEN">
            <summary>
            The length of the user name field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.GNAMELEN">
            <summary>
            The length of the group name field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.DEVLEN">
            <summary>
            The length of the devices field in a header buffer.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_OLDNORM">
            <summary>
             The "old way" of indicating a normal file.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_NORMAL">
            <summary>
            Normal file type.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_LINK">
            <summary>
            Link file type.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_SYMLINK">
            <summary>
            Symbolic link file type.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_CHR">
            <summary>
            Character device file type.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_BLK">
            <summary>
            Block device file type.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_DIR">
            <summary>
            Directory file type.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_FIFO">
            <summary>
            FIFO (pipe) file type.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_CONTIG">
            <summary>
            Contiguous file type.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_GHDR">
            <summary>
            Posix.1 2001 global extended header
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_XHDR">
            <summary>
            Posix.1 2001 extended header
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_ACL">
            <summary>
            Solaris access control list file type
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_GNU_DUMPDIR">
            <summary>
            GNU dir dump file type
            This is a dir entry that contains the names of files that were in the
            dir at the time the dump was made
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_EXTATTR">
            <summary>
            Solaris Extended Attribute File
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_META">
            <summary>
            Inode (metadata only) no file content
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_GNU_LONGLINK">
            <summary>
            Identifies the next file on the tape as having a long link name
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_GNU_LONGNAME">
            <summary>
            Identifies the next file on the tape as having a long name
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_GNU_MULTIVOL">
            <summary>
            Continuation of a file that began on another volume
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_GNU_NAMES">
            <summary>
            For storing filenames that dont fit in the main header (old GNU)
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_GNU_SPARSE">
            <summary>
            GNU Sparse file
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.LF_GNU_VOLHDR">
            <summary>
            GNU Tape/volume header ignore on extraction
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.TMAGIC">
            <summary>
            The magic tag representing a POSIX tar archive.  (includes trailing NULL)
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarHeader.GNU_TMAGIC">
            <summary>
            The magic tag representing an old GNU tar archive where version is included in magic and overwrites it
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.#ctor">
            <summary>
            Initialise a default TarHeader instance
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.GetName">
            <summary>
            Get the name of this entry.
            </summary>
            <returns>The entry's name.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.Clone">
            <summary>
            Create a new <see cref="T:SharpZip.Tar.TarHeader"/> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:System.Object"/> that is a copy of the current instance.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.ParseBuffer(System.Byte[])">
            <summary>
            Parse TarHeader information from a header buffer.
            </summary>
            <param name = "header">
            The tar entry header buffer to get information from.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.WriteHeader(System.Byte[])">
            <summary>
            'Write' header information to buffer provided, updating the <see cref="P:SharpZip.Tar.TarHeader.Checksum">check sum</see>.
            </summary>
            <param name="outBuffer">output buffer for header information</param>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.GetHashCode">
            <summary>
            Get a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.Equals(System.Object)">
            <summary>
            Determines if this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.SetValueDefaults(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set defaults for values used when constructing a TarHeader instance.
            </summary>
            <param name="userId">Value to apply as a default for userId.</param>
            <param name="userName">Value to apply as a default for userName.</param>
            <param name="groupId">Value to apply as a default for groupId.</param>
            <param name="groupName">Value to apply as a default for groupName.</param>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.ParseOctal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse an octal string from a header buffer.
            </summary>
            <param name = "header">The header buffer from which to parse.</param>
            <param name = "offset">The offset into the buffer from which to parse.</param>
            <param name = "length">The number of header bytes to parse.</param>
            <returns>The long equivalent of the octal string.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.ParseName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse a name from a header buffer.
            </summary>
            <param name="header">
            The header buffer from which to parse.
            </param>
            <param name="offset">
            The offset into the buffer from which to parse.
            </param>
            <param name="length">
            The number of header bytes to parse.
            </param>
            <returns>
            The name parsed.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buffer">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buffer"/></returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.GetNameBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buffer">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buffer"/></returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">
            The name to add
            </param>
            <param name="buffer">
            The buffer to add to
            </param>
            <param name="offset">
            The offset into the buffer from which to start adding
            </param>
            <param name="length">
            The number of header bytes to add
            </param>
            <returns>
            The index of the next free byte in the buffer
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.GetNameBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">The name to add</param>
            <param name="buffer">The buffer to add to</param>
            <param name="offset">The offset into the buffer from which to start adding</param>
            <param name="length">The number of header bytes to add</param>
            <returns>The index of the next free byte in the buffer</returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.GetAsciiBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add a string to a buffer as a collection of ascii bytes.
            </summary>
            <param name="toAdd">The string to add</param>
            <param name="nameOffset">The offset of the first character to add.</param>
            <param name="buffer">The buffer to add to.</param>
            <param name="bufferOffset">The offset to start adding at.</param>
            <param name="length">The number of ascii characters to add.</param>
            <returns>The next free index in the buffer.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.GetOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "value">
            the value to be converted to octal
            </param>
            <param name = "buffer">
            buffer to store the octal string
            </param>
            <param name = "offset">
            The offset into the buffer where the value starts
            </param>
            <param name = "length">
            The length of the octal string to create
            </param>
            <returns>
            The offset of the character next byte after the octal string
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.GetLongOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "value">Value to be convert to octal</param>
            <param name = "buffer">The buffer to update</param>
            <param name = "offset">The offset into the buffer to store the value</param>
            <param name = "length">The length of the octal string</param>
            <returns>Index of next byte</returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.GetCheckSumOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add the checksum integer to header buffer.
            </summary>
            <param name = "value"></param>
            <param name = "buffer">The header buffer to set the checksum for</param>
            <param name = "offset">The offset into the buffer for the checksum</param>
            <param name = "length">The number of header bytes to update.
            It's formatted differently from the other fields: it has 6 digits, a
            null, then a space -- rather than digits, a space, then a null.
            The final space is already there, from checksumming
            </param>
            <returns>The modified buffer offset</returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.ComputeCheckSum(System.Byte[])">
            <summary>
            Compute the checksum for a tar entry header.  
            The checksum field must be all spaces prior to this happening
            </summary>
            <param name = "buffer">The tar entry's header buffer.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarHeader.MakeCheckSum(System.Byte[])">
            <summary>
            Make a checksum for a tar entry ignoring the checksum contents.
            </summary>
            <param name = "buffer">The tar entry's header buffer.</param>
            <returns>The checksum for the buffer</returns>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.Name">
            <summary>
            Get/set the name for this tar entry.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set the property to null.</exception>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.Mode">
            <summary>
            Get/set the entry's Unix style permission mode.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.UserId">
            <summary>
            The entry's user id.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            The default is zero.
            </remarks>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.GroupId">
            <summary>
            Get/set the entry's group id.
            </summary>
            <remarks>
            This is only directly relevant to linux/unix systems.
            The default value is zero.
            </remarks>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.Size">
            <summary>
            Get/set the entry's size.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the size to less than zero.</exception>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.ModTime">
            <summary>
            Get/set the entry's modification time.
            </summary>
            <remarks>
            The modification time is only accurate to within a second.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the date time to less than 1/1/1970.</exception>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.Checksum">
            <summary>
            Get the entry's checksum.  This is only valid/updated after writing or reading an entry.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.IsChecksumValid">
            <summary>
            Get value of true if the header checksum is valid, false otherwise.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.TypeFlag">
            <summary>
            Get/set the entry's type flag.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.LinkName">
            <summary>
            The entry's link name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set LinkName to null.</exception>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.Magic">
            <summary>
            Get/set the entry's magic tag.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Magic to null.</exception>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.Version">
            <summary>
            The entry's version.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Version to null.</exception>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.UserName">
            <summary>
            The entry's user name.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.GroupName">
            <summary>
            Get/set the entry's group name.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            </remarks>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.DevMajor">
            <summary>
            Get/set the entry's major device number.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarHeader.DevMinor">
            <summary>
            Get/set the entry's minor device number.
            </summary>
        </member>
        <member name="T:SharpZip.Tar.TarBuffer">
            <summary>
            The TarBuffer class implements the tar archive concept
            of a buffered input stream. This concept goes back to the
            days of blocked tape drives and special io devices. In the
            C# universe, the only real function that this class
            performs is to ensure that files have the correct "record"
            size, or other tars will complain.
            <p>
            You should never have a need to access this class directly.
            TarBuffers are created by Tar IO Streams.
            </p>
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarBuffer.BlockSize">
            <summary>
            The size of a block in a tar archive in bytes.
            </summary>
            <remarks>This is 512 bytes.</remarks>
        </member>
        <member name="F:SharpZip.Tar.TarBuffer.DefaultBlockFactor">
            <summary>
            The number of blocks in a default record.
            </summary>
            <remarks>
            The default value is 20 blocks per record.
            </remarks>
        </member>
        <member name="F:SharpZip.Tar.TarBuffer.DefaultRecordSize">
            <summary>
            The size in bytes of a default record.
            </summary>
            <remarks>
            The default size is 10KB.
            </remarks>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.GetRecordSize">
            <summary>
            Get the TAR Buffer's record size.
            </summary>
            <returns>The record size in bytes.
            This is equal to the <see cref="P:SharpZip.Tar.TarBuffer.BlockFactor"/> multiplied by the <see cref="F:SharpZip.Tar.TarBuffer.BlockSize"/></returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.GetBlockFactor">
            <summary>
            Get the TAR Buffer's block factor
            </summary>
            <returns>The block factor; the number of blocks per record.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.#ctor">
            <summary>
            Construct a default TarBuffer
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream)">
            <summary>
            Create TarBuffer for reading with default BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <returns>A new <see cref="T:SharpZip.Tar.TarBuffer"/> suitable for input.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for reading inputStream setting BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>A new <see cref="T:SharpZip.Tar.TarBuffer"/> suitable for input.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream)">
            <summary>
            Construct TarBuffer for writing with default BlockFactor
            </summary>
            <param name="outputStream">output stream for buffer</param>
            <returns>A new <see cref="T:SharpZip.Tar.TarBuffer"/> suitable for output.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for writing Tar output to streams.
            </summary>
            <param name="outputStream">Output stream to write to.</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>A new <see cref="T:SharpZip.Tar.TarBuffer"/> suitable for output.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.Initialize(System.Int32)">
            <summary>
            Initialization common to all constructors.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.IsEOFBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates End of Archive. End of
            archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
            <returns>Returns true if the block is an EOF block; false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.IsEndOfArchiveBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates the End of an Archive has been reached.
            End of archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
            <returns>Returns true if the block is an EOF block; false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.SkipBlock">
            <summary>
            Skip over a block on the input stream.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.ReadBlock">
            <summary>
            Read a block from the input stream.
            </summary>
            <returns>
            The block of data read.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.ReadRecord">
            <summary>
            Read a record from data stream.
            </summary>
            <returns>
            false if End-Of-File, else true.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.GetCurrentBlockNum">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <returns>
            The current zero based block number.
            </returns>
            <remarks>
            The absolute block number = (<see cref="M:SharpZip.Tar.TarBuffer.GetCurrentRecordNum">record number</see> * <see cref="P:SharpZip.Tar.TarBuffer.BlockFactor">block factor</see>) + <see cref="M:SharpZip.Tar.TarBuffer.GetCurrentBlockNum">block number</see>.
            </remarks>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.GetCurrentRecordNum">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.WriteBlock(System.Byte[])">
            <summary>
            Write a block of data to the archive.
            </summary>
            <param name="block">
            The data to write to the archive.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.WriteBlock(System.Byte[],System.Int32)">
            <summary>
            Write an archive record to the archive, where the record may be
            inside of a larger array buffer. The buffer must be "offset plus
            record size" long.
            </summary>
            <param name="buffer">
            The buffer containing the record data to write.
            </param>
            <param name="offset">
            The offset of the record data within buffer.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.WriteRecord">
            <summary>
            Write a TarBuffer record to the archive.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.WriteFinalRecord">
            <summary>
            WriteFinalRecord writes the current record buffer to output any unwritten data is present.
            </summary>
            <remarks>Any trailing bytes are set to zero which is by definition correct behaviour
            for the end of a tar stream.</remarks>
        </member>
        <member name="M:SharpZip.Tar.TarBuffer.Close">
            <summary>
            Close the TarBuffer. If this is an output buffer, also flush the
            current block before closing.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarBuffer.RecordSize">
            <summary>
            Get the record size for this buffer
            </summary>
            <value>The record size in bytes.
            This is equal to the <see cref="P:SharpZip.Tar.TarBuffer.BlockFactor"/> multiplied by the <see cref="F:SharpZip.Tar.TarBuffer.BlockSize"/></value>
        </member>
        <member name="P:SharpZip.Tar.TarBuffer.BlockFactor">
            <summary>
            Get the Blocking factor for the buffer
            </summary>
            <value>This is the number of blocks in each record.</value>
        </member>
        <member name="P:SharpZip.Tar.TarBuffer.CurrentBlock">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <remarks>Block numbers are zero based values</remarks>
            <seealso cref="P:SharpZip.Tar.TarBuffer.RecordSize"/>
        </member>
        <member name="P:SharpZip.Tar.TarBuffer.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:SharpZip.Tar.TarBuffer.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarBuffer.CurrentRecord">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="T:MySoft.Task.JobState">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="F:MySoft.Task.JobState.Running">
            <summary>
            正在运行
            </summary>
        </member>
        <member name="F:MySoft.Task.JobState.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:MySoft.CompressionManager">
            <summary>
            Compression Manager
            </summary>
        </member>
        <member name="M:MySoft.CompressionManager.CompressSharpZip(System.Byte[])">
            <summary>
            SharpZip压缩
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CompressionManager.DecompressSharpZip(System.Byte[])">
            <summary>
            SharpZip解压缩
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CompressionManager.CompressGZip(System.Byte[])">
            <summary>
            GZip压缩
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CompressionManager.DecompressGZip(System.Byte[])">
            <summary>
            GZip解压缩
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CompressionManager.CompressDeflate(System.Byte[])">
            <summary>
            Deflate压缩
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CompressionManager.DecompressDeflate(System.Byte[])">
            <summary>
            Deflate解压缩
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CompressionManager.Compress7Zip(System.Byte[])">
            <summary>
            7Zip压缩
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.CompressionManager.Decompress7Zip(System.Byte[])">
            <summary>
            7Zip解压缩
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.RESTful.AuthenticationContext">
            <summary>
            认证的当前上下文对象
            </summary>
        </member>
        <member name="M:MySoft.RESTful.AuthenticationContext.#ctor(MySoft.RESTful.AuthenticationToken)">
            <summary>
            实例化认证上下文
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationContext.User">
            <summary>
            认证的用户信息
            </summary>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationContext.Token">
            <summary>
            获取认证的Token信息
            </summary>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationContext.Current">
            <summary>
            认证的当前上下文
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from a specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            Returns detailed information about the schema exception.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw"/> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonValidatingReader">
            <summary>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> validation.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader"/> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from while validating.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current Json token.
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current Json token.
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader"/> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader"/>.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode">
            <summary>
            Specifies whether a DateTime object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Local">
            <summary>
            The time represented is local time.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Utc">
            <summary>
            The time represented is UTC.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Unspecified">
            <summary>
            The time represented is not specified as either local time or Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.RoundtripKind">
            <summary>
            Preserves the DateTimeKind field of a date when a DateTime object is converted to a string and the string is then converted back to a DateTime object.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value that represents a BSON object id.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified"/> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.Nullable`1"/>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State"/> to Closed.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="T:SharpZip.Zip.ZipOutputStream">
             <summary>
             This is a DeflaterOutputStream that writes the files into a zip
             archive one after another.  It has a special method to start a new
             zip entry.  The zip entries contains information about the file name
             size, compressed size, CRC, etc.
             
             It includes support for Stored and Deflated entries.
             This class is not thread safe.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             <example> This sample shows how to create a zip file
             <code>
             using System;
             using System.IO;
             
             using SharpZip.Core;
             using SharpZip.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		string[] filenames = Directory.GetFiles(args[0]);
             		byte[] buffer = new byte[4096];
             		
             		using ( ZipOutputStream s = new ZipOutputStream(File.Create(args[1])) ) {
             		
             			s.SetLevel(9); // 0 - store only to 9 - means best compression
             		
             			foreach (string file in filenames) {
             				ZipEntry entry = new ZipEntry(file);
             				s.PutNextEntry(entry);
            
             				using (FileStream fs = File.OpenRead(file)) {
            						StreamUtils.Copy(fs, s, buffer);
             				}
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">The output stream to which the archive contents are written.</param>
            <param name="bufferSize">Size of the buffer to use.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment text for the entire archive.
            </param>
            <exception name ="ArgumentOutOfRangeException">
            The converted comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  The new level will be activated
            immediately.
            </summary>
            <param name="level">The new compression level (1 to 9).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:SharpZip.Zip.Compression.Deflater"/>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflater compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.PutNextEntry(SharpZip.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.ArgumentNullException">
            if entry passed is null.
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <param name="buffer">The buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:SharpZip.Zip.ZipException">Archive size is invalid</exception>
            <exception cref="T:System.InvalidOperationException">No entry is active.</exception>
        </member>
        <member name="M:SharpZip.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="F:SharpZip.Zip.ZipOutputStream.entries">
            <summary>
            The entries for the archive.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipOutputStream.crc">
            <summary>
            Used to track the crc of data added to entries.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipOutputStream.curEntry">
            <summary>
            The current entry being added.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipOutputStream.size">
            <summary>
            Used to track the size of data for an entry during writing.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipOutputStream.offset">
            <summary>
            Offset to be recorded for each entry in the central header.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipOutputStream.zipComment">
            <summary>
            Comment for the entire archive recorded in central header.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipOutputStream.patchEntryHeader">
            <summary>
            Flag indicating that header patching is required for the current entry.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipOutputStream.crcPatchPos">
            <summary>
            Position to patch crc
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipOutputStream.sizePatchPos">
            <summary>
            Position to patch size.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipOutputStream.IsFinished">
            <summary>
            Gets a flag value of true if the central header has been added for this archive; false if it has not been added.
            </summary>
            <remarks>No further entries can be added once this has been done.</remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipOutputStream.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
            <remarks>Older archivers may not understand Zip64 extensions.
            If backwards compatability is an issue be careful when adding <see cref="P:SharpZip.Zip.ZipEntry.Size">entries</see> to an archive.
            Setting this property to off is workable but less desirable as in those circumstances adding a file
            larger then 4GB will fail.</remarks>
        </member>
        <member name="T:SharpZip.Zip.ZipNameTransform">
            <summary>
            ZipNameTransform transforms names as per the Zip file naming convention.
            </summary>
            <remarks>The use of absolute names is supported although its use is not valid 
            according to Zip naming conventions, and should not be used if maximum compatability is desired.</remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipNameTransform.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:SharpZip.Zip.ZipNameTransform"></see>
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipNameTransform.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:SharpZip.Zip.ZipNameTransform"></see>
            </summary>
            <param name="trimPrefix">The string to trim from the front of paths if found.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipNameTransform.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a windows directory name according to the Zip file naming conventions.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipNameTransform.TransformFile(System.String)">
            <summary>
            Transform a windows file name according to the Zip file naming conventions.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipNameTransform.MakeValidName(System.String,System.Char)">
            <summary>
            Force a name to be valid by replacing invalid characters with a fixed value
            </summary>
            <param name="name">The name to force valid</param>
            <param name="replacement">The replacement character to use.</param>
            <returns>Returns a valid name</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipNameTransform.IsValidName(System.String,System.Boolean)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <param name="relaxed">If true checking is relaxed about windows file names and absolute paths.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in Unix format, and should only contain relative paths.
            This means that any path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid for a file where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in unix format,
            and should only contain relative paths if a path is present.
            This means that the path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipNameTransform.TrimPrefix">
            <summary>
            Get/set the path prefix to be trimmed from paths if present.
            </summary>
            <remarks>The prefix is trimmed before any conversion from
            a windows path is done.</remarks>
        </member>
        <member name="T:SharpZip.Core.ScanEventArgs">
            <summary>
            Event arguments for scanning.
            </summary>
        </member>
        <member name="M:SharpZip.Core.ScanEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Core.ScanEventArgs"/>
            </summary>
            <param name="name">The file or directory name.</param>
        </member>
        <member name="P:SharpZip.Core.ScanEventArgs.Name">
            <summary>
            The file or directory name for this event.
            </summary>
        </member>
        <member name="P:SharpZip.Core.ScanEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating if scanning should continue or not.
            </summary>
        </member>
        <member name="T:SharpZip.Core.ProgressEventArgs">
            <summary>
            Event arguments during processing of a single file or directory.
            </summary>
        </member>
        <member name="M:SharpZip.Core.ProgressEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Core.ScanEventArgs"/>
            </summary>
            <param name="name">The file or directory name if known.</param>
            <param name="processed">The number of bytes processed so far</param>
            <param name="target">The total number of bytes to process, 0 if not known</param>
        </member>
        <member name="P:SharpZip.Core.ProgressEventArgs.Name">
            <summary>
            The name for this event if known.
            </summary>
        </member>
        <member name="P:SharpZip.Core.ProgressEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating wether scanning should continue or not.
            </summary>
        </member>
        <member name="P:SharpZip.Core.ProgressEventArgs.PercentComplete">
            <summary>
            Get a percentage representing how much of the <see cref="P:SharpZip.Core.ProgressEventArgs.Target"></see> has been processed
            </summary>
            <value>0.0 to 100.0 percent; 0 if target is not known.</value>
        </member>
        <member name="P:SharpZip.Core.ProgressEventArgs.Processed">
            <summary>
            The number of bytes processed so far
            </summary>
        </member>
        <member name="P:SharpZip.Core.ProgressEventArgs.Target">
            <summary>
            The number of bytes to process.
            </summary>
            <remarks>Target may be 0 or negative if the value isnt known.</remarks>
        </member>
        <member name="T:SharpZip.Core.DirectoryEventArgs">
            <summary>
            Event arguments for directories.
            </summary>
        </member>
        <member name="M:SharpZip.Core.DirectoryEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize an instance of <see cref="T:SharpZip.Core.DirectoryEventArgs"></see>.
            </summary>
            <param name="name">The name for this directory.</param>
            <param name="hasMatchingFiles">Flag value indicating if any matching files are contained in this directory.</param>
        </member>
        <member name="P:SharpZip.Core.DirectoryEventArgs.HasMatchingFiles">
            <summary>
            Get a value indicating if the directory contains any matching files or not.
            </summary>
        </member>
        <member name="T:SharpZip.Core.ScanFailureEventArgs">
            <summary>
            Arguments passed when scan failures are detected.
            </summary>
        </member>
        <member name="M:SharpZip.Core.ScanFailureEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Core.ScanFailureEventArgs"></see>
            </summary>
            <param name="name">The name to apply.</param>
            <param name="e">The exception to use.</param>
        </member>
        <member name="P:SharpZip.Core.ScanFailureEventArgs.Name">
            <summary>
            The applicable name.
            </summary>
        </member>
        <member name="P:SharpZip.Core.ScanFailureEventArgs.Exception">
            <summary>
            The applicable exception.
            </summary>
        </member>
        <member name="P:SharpZip.Core.ScanFailureEventArgs.ContinueRunning">
            <summary>
            Get / set a value indicating wether scanning should continue.
            </summary>
        </member>
        <member name="T:SharpZip.Core.ProcessDirectoryHandler">
            <summary>
            Delegate invoked before starting to process a directory.
            </summary>
        </member>
        <member name="T:SharpZip.Core.ProcessFileHandler">
            <summary>
            Delegate invoked before starting to process a file.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:SharpZip.Core.ProgressHandler">
            <summary>
            Delegate invoked during processing of a file or directory
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:SharpZip.Core.CompletedFileHandler">
            <summary>
            Delegate invoked when a file has been completely processed.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:SharpZip.Core.DirectoryFailureHandler">
            <summary>
            Delegate invoked when a directory failure is detected.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:SharpZip.Core.FileFailureHandler">
            <summary>
            Delegate invoked when a file failure is detected.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:SharpZip.Core.FileSystemScanner">
            <summary>
            FileSystemScanner provides facilities scanning of files and directories.
            </summary>
        </member>
        <member name="M:SharpZip.Core.FileSystemScanner.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Core.FileSystemScanner"></see>
            </summary>
            <param name="filter">The <see cref="T:SharpZip.Core.PathFilter">file filter</see> to apply when scanning.</param>
        </member>
        <member name="M:SharpZip.Core.FileSystemScanner.#ctor(System.String,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The <see cref="T:SharpZip.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:SharpZip.Core.PathFilter"> directory filter</see> to apply.</param>
        </member>
        <member name="M:SharpZip.Core.FileSystemScanner.#ctor(SharpZip.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:SharpZip.Core.IScanFilter">filter</see> to apply.</param>
        </member>
        <member name="M:SharpZip.Core.FileSystemScanner.#ctor(SharpZip.Core.IScanFilter,SharpZip.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:SharpZip.Core.IScanFilter">filter</see>  to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:SharpZip.Core.IScanFilter">filter</see>  to apply.</param>
        </member>
        <member name="F:SharpZip.Core.FileSystemScanner.ProcessDirectory">
            <summary>
            Delegate to invoke when a directory is processed.
            </summary>
        </member>
        <member name="F:SharpZip.Core.FileSystemScanner.ProcessFile">
            <summary>
            Delegate to invoke when a file is processed.
            </summary>
        </member>
        <member name="F:SharpZip.Core.FileSystemScanner.CompletedFile">
            <summary>
            Delegate to invoke when processing for a file has finished.
            </summary>
        </member>
        <member name="F:SharpZip.Core.FileSystemScanner.DirectoryFailure">
            <summary>
            Delegate to invoke when a directory failure is detected.
            </summary>
        </member>
        <member name="F:SharpZip.Core.FileSystemScanner.FileFailure">
            <summary>
            Delegate to invoke when a file failure is detected.
            </summary>
        </member>
        <member name="M:SharpZip.Core.FileSystemScanner.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the DirectoryFailure event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:SharpZip.Core.FileSystemScanner.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raise the FileFailure event.
            </summary>
            <param name="file">The file name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:SharpZip.Core.FileSystemScanner.OnProcessFile(System.String)">
            <summary>
            Raise the ProcessFile event.
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:SharpZip.Core.FileSystemScanner.OnCompleteFile(System.String)">
            <summary>
            Raise the complete file event
            </summary>
            <param name="file">The file name</param>
        </member>
        <member name="M:SharpZip.Core.FileSystemScanner.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raise the ProcessDirectory event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files.</param>
        </member>
        <member name="M:SharpZip.Core.FileSystemScanner.Scan(System.String,System.Boolean)">
            <summary>
            Scan a directory.
            </summary>
            <param name="directory">The base directory to scan.</param>
            <param name="recurse">True to recurse subdirectories, false to scan a single directory.</param>
        </member>
        <member name="F:SharpZip.Core.FileSystemScanner.fileFilter_">
            <summary>
            The file filter currently in use.
            </summary>
        </member>
        <member name="F:SharpZip.Core.FileSystemScanner.directoryFilter_">
            <summary>
            The directory filter currently in use.
            </summary>
        </member>
        <member name="F:SharpZip.Core.FileSystemScanner.alive_">
            <summary>
            Flag indicating if scanning should continue running.
            </summary>
        </member>
        <member name="T:SharpZip.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:SharpZip.Checksums.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:SharpZip.Checksums.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:SharpZip.Checksums.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="M:SharpZip.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="value">data update is based on</param>
        </member>
        <member name="M:SharpZip.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>
            <param name="buffer">The buffer containing data to update the crc with.</param>
        </member>
        <member name="M:SharpZip.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buffer">block of data</param>
            <param name="offset">index of first byte to use</param>
            <param name="count">number of bytes to use</param>
        </member>
        <member name="P:SharpZip.Checksums.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="T:MySoft.Aop.AopProxyBase">
            <summary>
            AopProxyBase 所有自定义AOP代理类都从此类派生，覆写IAopOperator接口，实现具体的前/后处理 。
            2010.11.09
            </summary>
        </member>
        <member name="M:MySoft.Aop.AopProxyBase.PreProceed(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            抽象PreProcess方法
            </summary>
            <param name="requestMsg"></param>
        </member>
        <member name="M:MySoft.Aop.AopProxyBase.PostProceed(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Runtime.Remoting.Messaging.IMethodReturnMessage@)">
            <summary>
            抽象PostProcess方法
            </summary>
            <param name="requestMsg"></param>
            <param name="respondMsg"></param>
        </member>
        <member name="T:MySoft.Remoting.RemotingClientUtil`1">
            <summary>
            Remoting客户端工具类
            </summary>
            <typeparam name="T">一般为接口类型</typeparam>
        </member>
        <member name="F:MySoft.Remoting.RemotingClientUtil`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientUtil`1.LoadModulesByHost(MySoft.Remoting.Configuration.RemotingHost)">
            <summary>
            加载远程对象代理客户端模块
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientUtil`1.GetRemotingObject(System.String,System.String)">
            <summary>
            获取远程对象
            </summary>
            <param name="hostName"></param>
            <param name="remoteObjectName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientUtil`1.GetRemotingObject(System.String)">
            <summary>
            获取远程对象（默认为第一个RemotingClient的默认服务器）
            </summary>
            <param name="remoteObjectName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientUtil`1.GetWellKnownClientInstance(System.String)">
            <summary>
            获取知名对象客户端代理实例
            </summary>
            <param name="objectUrl"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientUtil`1.RemotingServerTest(System.String)">
            <summary>
            Remoting服务器测试
            </summary>
            <param name="serverUrl">Remoting服务器地址 （比如：tcp://127.0.0.1:8888）</param>
            <returns>Remoting服务器时间</returns>
        </member>
        <member name="P:MySoft.Remoting.RemotingClientUtil`1.RemotingConfiguration">
            <summary>
            Remoting Configuration
            </summary>
        </member>
        <member name="E:MySoft.Remoting.RemotingClientUtil`1.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingChannelType">
            <summary>
            Remoting Channel Type
            </summary>
        </member>
        <member name="F:MySoft.Remoting.RemotingChannelType.Tcp">
            <summary>
            TCP
            </summary>
        </member>
        <member name="F:MySoft.Remoting.RemotingChannelType.Http">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="T:MySoft.Mail.POP3">
            <summary>
            邮件接收类
            </summary>
        </member>
        <member name="M:MySoft.Mail.POP3.#ctor(System.String,System.String,System.String)">
            <summary>
            POP3
            </summary>
            <param name="server">POP3服务器名称</param>
            <param name="userName">用户名</param>
            <param name="password">用户密码</param>
        </member>
        <member name="M:MySoft.Mail.POP3.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            POP3
            </summary>
            <param name="server">POP3服务器名称</param>
            <param name="port">端口号</param>
            <param name="userName">用户名</param>
            <param name="password">用户密码</param>
        </member>
        <member name="M:MySoft.Mail.POP3.GetNumberOfNewMessages">
            <summary>
            获得新邮件数量
            </summary>
            <returns>新邮件数量</returns>
        </member>
        <member name="M:MySoft.Mail.POP3.GetNewMessages(System.String)">
            <summary>
            获取新邮件内容
            </summary>
            <param name="subj">邮件主题</param>
            <returns>新邮件内容</returns>
        </member>
        <member name="M:MySoft.Mail.POP3.GetNewMessages(System.Int32)">
            <summary>
            获取新邮件内容
            </summary>
            <param name="nIndex">新邮件索引</param>
            <returns>新邮件内容</returns>
        </member>
        <member name="M:MySoft.Mail.SMTP.#ctor(System.String[],System.String,System.String)">
            <summary>
            邮件发送类
            主机信息从配置文件中获取
            参考:ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.NETDEVFX.v20.chs/dv_fxgenref/html/54f0f153-17e5-4f49-afdc-deadb940c9c1.htm
            </summary>
            <param name="mailFrom">发件人地址</param>
            <param name="mailTo">收件人地址</param>
            <param name="mailSubject">邮件主题</param>
            <param name="mailBody">邮件正文</param>
        </member>
        <member name="M:MySoft.Mail.SMTP.#ctor(System.String,System.String[],System.String,System.String,System.String,System.String,System.String)">
            <summary>
            邮件发送类
            </summary>
            <param name="mailFrom">发件人地址</param>
            <param name="mailTo">收件人地址</param>
            <param name="mailSubject">邮件主题</param>
            <param name="mailBody">邮件正文</param>
            <param name="smtpServer">SMTP 服务器</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:MySoft.Mail.SMTP.#ctor(System.String,System.String[],System.String,System.String,System.String[],System.String,System.String,System.String)">
            <summary>
            邮件发送类
            </summary>
            <param name="mailFrom">发件人地址</param>
            <param name="displayName">显示的名称</param>
            <param name="mailTo">收件人地址</param>
            <param name="mailSubject">邮件主题</param>
            <param name="mailBody">邮件正文</param>
            <param name="attachments">附件,多个时用逗号隔开(可为空)</param>
            <param name="smtpServer">SMTP 服务器</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:MySoft.Mail.SMTP.#ctor(System.String,System.String,System.String[],System.String,System.String,System.String[],System.String,System.String,System.String)">
            <summary>
            邮件发送类
            </summary>
            <param name="mailFrom">发件人地址</param>
            <param name="displayName">显示的名称</param>
            <param name="mailTo">收件人地址</param>
            <param name="mailSubject">邮件主题</param>
            <param name="mailBody">邮件正文</param>
            <param name="attachments">附件,多个时用逗号隔开(可为空)</param>
            <param name="smtpServer">SMTP 服务器</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:MySoft.Mail.SMTP.#ctor(System.String,System.String,System.String[],System.String[],System.String[],System.String,System.String,System.String[],System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            邮件发送类
            </summary>
            <param name="mailFrom">发件人地址</param>
            <param name="displayName">显示的名称</param>
            <param name="mailTo">收件人地址</param>
            <param name="mailCc">抄送,多个收件人用逗号隔开(可为空)</param>
            <param name="mailBcc">密件抄送,多个收件人用逗号隔开(可为空)</param>
            <param name="mailSubject">邮件主题</param>
            <param name="mailBody">邮件正文</param>
            <param name="attachments">附件,多个时用逗号隔开(可为空)</param>
            <param name="smtpServer">SMTP 服务器</param>
            <param name="smtpPort">发送端口号(默认为 25)</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <param name="smtpSsl">是否使用安全套接字层 (SSL) 加密连接</param>
        </member>
        <member name="M:MySoft.Mail.SMTP.Send">
            <summary>
            同步发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SMTP.SendAsync">
            <summary>
            异步发送邮件
            </summary>
        </member>
        <member name="M:MySoft.Mail.SMTP.SendMail(System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="isAsync"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Mail.SMTP.SendCompletedCallback(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            发送完成回调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MySoft.Mail.SMTP.MailFrom">
            <summary>
            发件人地址
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.MailDisplyName">
            <summary>
            显示的名称
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.MailTo">
            <summary>
            收件人地址
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.MailCc">
            <summary>
            抄送
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.MailBcc">
            <summary>
            密件抄送
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.MailSubject">
            <summary>
            邮件主题
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.MailBody">
            <summary>
            邮件正文
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.MailAttachments">
            <summary>
            附件
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.SMTPServer">
            <summary>
            SMTP 服务器
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.SMTPPort">
            <summary>
            发送端口号(默认为 25)
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.SMTPUsername">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.SMTPPassword">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.SMTPSSL">
            <summary>
            是否使用安全套接字层 (SSL) 加密连接
            默认为 false
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.Priority">
            <summary>
            邮件的优先级
            </summary>
        </member>
        <member name="P:MySoft.Mail.SMTP.IsBodyHtml">
            <summary>
            示邮件正文是否为 Html 格式的值
            </summary>
        </member>
        <member name="T:MySoft.Threading.Internal.WorkItemsQueue">
            <summary>
            WorkItemsQueue class.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsQueue._headWaiterEntry">
            <summary>
            Waiters queue (implemented as stack).
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsQueue._waitersCount">
            <summary>
            Waiters count
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsQueue._workItems">
            <summary>
            Work items queue
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsQueue._isWorkItemsQueueActive">
            <summary>
            Indicate that work items are allowed to be queued
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsQueue._isDisposed">
            <summary>
            A flag that indicates if the WorkItemsQueue has been disposed.
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.EnqueueWorkItem(MySoft.Threading.Internal.WorkItem)">
            <summary>
            Enqueue a work item to the queue.
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.DequeueWorkItem(System.Int32,System.Threading.WaitHandle)">
            <summary>
            Waits for a work item or exits on timeout or cancel
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds</param>
            <param name="cancelEvent">Cancel wait handle</param>
            <returns>Returns true if the resource was granted</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.Cleanup">
            <summary>
            Cleanup the work items queue, hence no more work 
            items are allowed to be queue
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.GetThreadWaiterEntry">
            <summary>
            Returns the WaiterEntry of the current thread
            </summary>
            <returns></returns>
            In order to avoid creation and destuction of WaiterEntry
            objects each thread has its own WaiterEntry object.
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.PushWaiter(MySoft.Threading.Internal.WorkItemsQueue.WaiterEntry)">
            <summary>
            Push a new waiter into the waiter's stack
            </summary>
            <param name="newWaiterEntry">A waiter to put in the stack</param>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.PopWaiter">
            <summary>
            Pop a waiter from the waiter's stack
            </summary>
            <returns>Returns the first waiter in the stack</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.RemoveWaiter(MySoft.Threading.Internal.WorkItemsQueue.WaiterEntry,System.Boolean)">
            <summary>
            Remove a waiter from the stack
            </summary>
            <param name="waiterEntry">A waiter entry to remove</param>
            <param name="popDecrement">If true the waiter count is always decremented</param>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItemsQueue.CurrentWaiterEntry">
            <summary>
            Each thread in the thread pool keeps its own waiter entry.
            </summary>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItemsQueue.Count">
            <summary>
            Returns the current number of work items in the queue
            </summary>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItemsQueue.WaitersCount">
            <summary>
            Returns the current number of waiters
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsQueue.WaiterEntry._waitHandle">
            <summary>
            Event to signal the waiter that it got the work item.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsQueue.WaiterEntry._isTimedout">
            <summary>
            Flag to know if this waiter already quited from the queue 
            because of a timeout.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsQueue.WaiterEntry._isSignaled">
            <summary>
            Flag to know if the waiter was signaled and got a work item. 
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsQueue.WaiterEntry._workItem">
            <summary>
            A work item that passed directly to the waiter withou going 
            through the queue
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.WaiterEntry.Signal(MySoft.Threading.Internal.WorkItem)">
            <summary>
            Signal the waiter that it got a work item.
            </summary>
            <returns>Return true on success</returns>
            The method fails if Timeout() preceded its call
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.WaiterEntry.Timeout">
            <summary>
            Mark the wait entry that it has been timed out
            </summary>
            <returns>Return true on success</returns>
            The method fails if Signal() preceded its call
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.WaiterEntry.Reset">
            <summary>
            Reset the wait entry so it can be used again
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsQueue.WaiterEntry.Close">
            <summary>
            Free resources
            </summary>
        </member>
        <member name="T:MySoft.Threading.WorkItemCancelException">
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been canceled
            </summary>
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been canceled
            </summary>
        </member>
        <member name="T:MySoft.Threading.WorkItemTimeoutException">
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
        </member>
        <member name="T:MySoft.Threading.WorkItemResultException">
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
        </member>
        <member name="T:MySoft.RESTful.IAuthentication">
            <summary>
            认证操作封装
            </summary>
        </member>
        <member name="M:MySoft.RESTful.IAuthentication.Authorize">
            <summary>
            授权及认证方法
            </summary>
            <returns>通过认证后返回是否响应成功，通过AuthenticationContext.Current.Token获取令牌信息进行认证</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
            <value>The ISerializable object constructor.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader"/> if a <see cref="M:Newtonsoft.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An interger.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MySoft.ResponseFormat">
            <summary>
            数据格式
            </summary>
        </member>
        <member name="F:MySoft.ResponseFormat.Binary">
            <summary>
            二进制
            </summary>
        </member>
        <member name="F:MySoft.ResponseFormat.Json">
            <summary>
            json格式
            </summary>
        </member>
        <member name="F:MySoft.ResponseFormat.Xml">
            <summary>
            xml格式
            </summary>
        </member>
        <member name="T:MySoft.SerializationManager">
            <summary>
            The serialization manager.
            </summary>
        </member>
        <member name="M:MySoft.SerializationManager.SerializeBin(System.Object)">
            <summary>
            将对象系列化成二进制
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.SerializeJson(System.Object)">
            <summary>
            将对象系列化成字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.DeserializeBin(System.Byte[])">
            <summary>
            将数据反系列化成对象
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.DeserializeBin``1(System.Byte[])">
            <summary>
            将数据反系列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.DeserializeJson(System.Type,System.String)">
            <summary>
            将字符串反系列化成对象
            </summary>
            <param name="returnType"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.DeserializeJson``1(System.String)">
            <summary>
            将字符串反系列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.DeserializeJson``1(System.String,``0)">
            <summary>
            将字符串反系列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="anonymousObject"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.SerializeXml(System.Object)">
            <summary>
            Serializes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.SerializeXml(System.Object,System.Text.Encoding)">
            <summary>
            Serializes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.DeserializeXml``1(System.String)">
            <summary>
            Deserializes the specified return type.
            </summary>
            <param name="returnType">Type of the return.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.DeserializeXml(System.Type,System.String)">
            <summary>
            Deserializes the specified return type.
            </summary>
            <param name="returnType">Type of the return.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.SerializationManager.RegisterSerializeHandler(System.Type,MySoft.SerializationManager.TypeSerializeHandler,MySoft.SerializationManager.TypeDeserializeHandler)">
            <summary>
            Registers the serialize handler.
            </summary>
            <param name="type">The type.</param>
            <param name="serializeHandler">The serialize handler.</param>
            <param name="deserializeHandler">The deserialize handler.</param>
        </member>
        <member name="M:MySoft.SerializationManager.UnregisterSerializeHandler(System.Type)">
            <summary>
            Unregisters the serialize handler.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:MySoft.SerializationManager.TypeSerializeHandler">
            <summary>
            The serialize delegate.
            </summary>
            <param name="obj">obj to be serialized.</param>
            <returns></returns>
        </member>
        <member name="T:MySoft.SerializationManager.TypeDeserializeHandler">
            <summary>
            The deserialize delegate.
            </summary>
            <param name="data">the data to be deserialied.</param>
            <returns></returns>
        </member>
        <member name="T:MySoft.DataPage">
            <summary>
            分页数据信息
            </summary>
        </member>
        <member name="M:MySoft.DataPage.#ctor">
            <summary>
            初始化DataPage
            </summary>
        </member>
        <member name="M:MySoft.DataPage.#ctor(System.Int32)">
            <summary>
            设置默认页大小
            </summary>
            <param name="pageSize"></param>
        </member>
        <member name="P:MySoft.DataPage.CurrentPageIndex">
            <summary>
            获取或设置页序数
            </summary>
        </member>
        <member name="P:MySoft.DataPage.PageSize">
            <summary>
            获取或设置页大小
            </summary>
        </member>
        <member name="P:MySoft.DataPage.RowCount">
            <summary>
            获取或设置记录数
            </summary>
        </member>
        <member name="P:MySoft.DataPage.PageCount">
            <summary>
            获取或设置页数
            </summary>
        </member>
        <member name="P:MySoft.DataPage.IsFirstPage">
            <summary>
             获取一个值，该值指示当前页是否是首页
            </summary>
        </member>
        <member name="P:MySoft.DataPage.IsLastPage">
            <summary>
            获取一个值，该值指示当前页是否是最后一页
            </summary>
        </member>
        <member name="P:MySoft.DataPage.CurrentRowCount">
            <summary>
            获取当前数据源的记录数
            </summary>
        </member>
        <member name="P:MySoft.DataPage.CurrentStartIndex">
            <summary>
            获取开始记录数
            </summary>
        </member>
        <member name="P:MySoft.DataPage.CurrentEndIndex">
            <summary>
            获取结束记录数
            </summary>
        </member>
        <member name="P:MySoft.DataPage.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="T:MySoft.DataPage`1">
            <summary>
            分页数据信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.DataPage`1.#ctor">
            <summary>
            初始化DataPage
            </summary>
        </member>
        <member name="M:MySoft.DataPage`1.#ctor(System.Int32)">
            <summary>
            设置默认页大小
            </summary>
            <param name="pageSize"></param>
        </member>
        <member name="P:MySoft.DataPage`1.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="T:MySoft.Remoting.Configuration.RemotingServerConfigurationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.Configuration.RemotingServerConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Threading.Internal.WorkItemsGroup">
            <summary>
            Summary description for WorkItemsGroup.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsGroup._stp">
            <summary>
            A reference to the SmartThreadPool instance that created this 
            WorkItemsGroup.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsGroup._isSuspended">
            <summary>
            A flag to indicate if the Work Items Group is now suspended.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsGroup._concurrency">
            <summary>
            Defines how many work items of this WorkItemsGroup can run at once.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsGroup._workItemsQueue">
            <summary>
            Priority queue to hold work items before they are passed 
            to the SmartThreadPool.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsGroup._workItemsInStpQueue">
            <summary>
            Indicate how many work items are waiting in the SmartThreadPool
            queue.
            This value is used to apply the concurrency.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsGroup._workItemsExecutingInStp">
            <summary>
            Indicate how many work items are currently running in the SmartThreadPool.
            This value is used with the Cancel, to calculate if we can send new 
            work items to the STP.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsGroup._workItemsGroupStartInfo">
            <summary>
            WorkItemsGroup start information
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsGroup._isIdleWaitHandle">
            <summary>
            Signaled when all of the WorkItemsGroup's work item completed.
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.WorkItemsGroup._canceledWorkItemsGroup">
            <summary>
            A common object for all the work items that this work items group
            generate so we can mark them to cancel in O(1)
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroup.Start">
            <summary>
            Start the Work Items Group if it was started suspended
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemsGroup.WaitForIdle(System.Int32)">
            <summary>
            Wait for the thread pool to be idle
            </summary>
        </member>
        <member name="E:MySoft.Threading.Internal.WorkItemsGroup._onIdle">
            <summary>
            The OnIdle event
            </summary>
        </member>
        <member name="P:MySoft.Threading.Internal.WorkItemsGroup.WIGStartInfo">
            <summary>
            WorkItemsGroup start information
            </summary>
        </member>
        <member name="T:MySoft.IProxyInvocationHandler">
            <summary>
            Interface that a user defined proxy handler needs to implement.  This interface 
            defines one method that gets invoked by the generated proxy.  
            </summary>
        </member>
        <member name="M:MySoft.IProxyInvocationHandler.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <param name="proxy">The instance of the proxy</param>
            <param name="method">The method info that can be used to invoke the actual method on the object implementation</param>
            <param name="parameters">Parameters to pass to the method</param>
            <returns>Object</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> associated with the validation event.
            </summary>
            <value>The JsonSchemaException associated with the validation event.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation event.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Newtonsoft.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SharpZip.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.#ctor(SharpZip.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
            <param name="blTreeCodes">The number/rank of treecodes to send.</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:SharpZip.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(SharpZip.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterHuffman.Tree.WriteTree(SharpZip.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:SharpZip.BZip2.BZip2InputStream">
            <summary>
            An input stream that decompresses files in the BZip2 format 
            </summary>
        </member>
        <member name="M:SharpZip.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct instance for reading from stream
            </summary>
            <param name="stream">Data source</param>
        </member>
        <member name="M:SharpZip.BZip2.BZip2InputStream.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:SharpZip.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>The new position of the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            This operation is not supported and will throw a NotSupportedExceptionortedException
            </summary>
            <param name="value">The new length for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="buffer">The buffer to source data from.</param>
            <param name="offset">The offset to start obtaining data from.</param>
            <param name="count">The number of bytes of data to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.BZip2.BZip2InputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharpZip.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a sequence of bytes and advances the read position by one byte.
            </summary>
            <param name="buffer">Array of bytes to store values in</param>
            <param name="offset">Offset in array to begin storing data</param>
            <param name="count">The maximum number of bytes to read</param>
            <returns>The total number of bytes read into the buffer. This might be less
            than the number of bytes requested if that number of bytes are not 
            currently available or zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:SharpZip.BZip2.BZip2InputStream.Close">
            <summary>
            Closes the stream, releasing any associated resources.
            </summary>
        </member>
        <member name="M:SharpZip.BZip2.BZip2InputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position
            </summary>
            <returns>byte read or -1 on end of stream</returns>
        </member>
        <member name="P:SharpZip.BZip2.BZip2InputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:SharpZip.BZip2.BZip2InputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2InputStream.CanRead">
            <summary>
            Gets a value indicating if the stream supports reading
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            This property always returns false
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2InputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:SharpZip.BZip2.BZip2InputStream.Position">
            <summary>
            Gets or sets the streams position.
            Setting the position is not supported and will throw a NotSupportException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set the position</exception>
        </member>
        <member name="T:MySoft.FastInvokeHandler">
            <summary>Delegate for calling a method that is not known at runtime.</summary>
            <param name="target">the object to be called or null if the call is to a static method.</param>
            <param name="paramters">the parameters to the method.</param>
            <returns>the return value for the method or null if it doesn't return anything.</returns>
        </member>
        <member name="T:MySoft.FastCreateInstanceHandler">
            <summary>Delegate for creating and object at runtime using the default constructor.</summary>
            <returns>the newly created object.</returns>
        </member>
        <member name="T:MySoft.FastPropertyGetHandler">
            <summary>Delegate to get an arbitraty property at runtime.</summary>
            <param name="target">the object instance whose property will be obtained.</param>
            <returns>the property value.</returns>
        </member>
        <member name="T:MySoft.FastPropertySetHandler">
            <summary>Delegate to set an arbitrary property at runtime.</summary>
            <param name="target">the object instance whose property will be modified.</param>
            <param name="parameter"></param>
        </member>
        <member name="T:MySoft.DynamicCalls">
            <summary>Class with helper methods for dynamic invocation generating IL on the fly.</summary>
        </member>
        <member name="F:MySoft.DynamicCalls.dictInvoker">
            <summary>
            用于存放GetMethodInvoker的Dictionary
            </summary>
        </member>
        <member name="F:MySoft.DynamicCalls.dictCreator">
            <summary>
            用于存放GetInstanceCreator的Dictionary
            </summary>
        </member>
        <member name="M:MySoft.DynamicCalls.GetInstanceCreator(System.Type)">
            <summary>Gets the instance creator delegate that can be use to create instances of the specified type.</summary>
            <param name="type">The type of the objects we want to create.</param>
            <returns>A delegate that can be used to create the objects.</returns>
        </member>
        <member name="F:MySoft.DynamicCalls.dictGetter">
            <summary>
            用于存放GetPropertyGetter的Dictionary
            </summary>
        </member>
        <member name="F:MySoft.DynamicCalls.dictSetter">
            <summary>
            用于存放SetPropertySetter的Dictionary
            </summary>
        </member>
        <member name="M:MySoft.DynamicCalls.EmitCastToReference(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Emits the cast to a reference, unboxing if needed.</summary>
            <param name="il">The MSIL generator.</param>
            <param name="type">The type to cast.</param>
        </member>
        <member name="M:MySoft.DynamicCalls.EmitBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Boxes a type if needed.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:MySoft.DynamicCalls.EmitFastInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>Emits code to save an integer to the evaluation stack.</summary>
            <param name="ilGeneartor">The MSIL generator.</param>
            <param name="value">The value to push.</param>
        </member>
        <member name="T:MySoft.ErrorHelper">
            <summary>
            错误处理
            </summary>
        </member>
        <member name="M:MySoft.ErrorHelper.GetInnerException(System.Exception)">
            <summary>
            获取最内部的异常
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.ErrorHelper.GetErrorWithoutHtml(System.Exception)">
            <summary>
            获取异常日志
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:MySoft.ErrorHelper.GetHtmlError(System.Exception)">
            <summary>
            Returns HTML an formatted error message.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.ErrorHelper.GetHtmlWithoutError">
            <summary>
            Get Log Html
            </summary>
            <returns>Result</returns>
        </member>
        <member name="M:MySoft.Security.XXTEA.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密数据
            </summary>
            <param name="data"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Security.XXTEA.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            解密数据
            </summary>
            <param name="data"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation"/> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:SharpZip.Tar.TarEntry">
            <summary>
            This class represents an entry in a Tar archive. It consists
            of the entry's header, as well as the entry's File. Entries
            can be instantiated in one of three ways, depending on how
            they are to be used.
            <p>
            TarEntries that are created from the header bytes read from
            an archive are instantiated with the TarEntry( byte[] )
            constructor. These entries will be used when extracting from
            or listing the contents of an archive. These entries have their
            header filled in using the header bytes. They also set the File
            to null, since they reference an archive entry not a file.</p>
            <p>
            TarEntries that are created from files that are to be written
            into an archive are instantiated with the CreateEntryFromFile(string)
            pseudo constructor. These entries have their header filled in using
            the File's information. They also keep a reference to the File
            for convenience when writing entries.</p>
            <p>
            Finally, TarEntries can be constructed from nothing but a name.
            This allows the programmer to construct the entry by hand, for
            instance when only an InputStream is available for writing to
            the archive, and the header information is constructed from
            other information. In this case the header fields are set to
            defaults and the File is set to null.</p>
            <see cref="P:SharpZip.Tar.TarEntry.TarHeader"/>
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:SharpZip.Tar.TarEntry"/>.
            </summary>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.#ctor(System.Byte[])">
            <summary>
            Construct an entry from an archive's header bytes. File is set
            to null.
            </summary>
            <param name = "headerBuffer">
            The header bytes from a tar archive entry.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.#ctor(SharpZip.Tar.TarHeader)">
            <summary>
            Construct a TarEntry using the <paramref name="header">header</paramref> provided
            </summary>
            <param name="header">Header details for entry</param>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.Clone">
            <summary>
            Clone this tar entry.
            </summary>
            <returns>Returns a clone of this entry.</returns>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.CreateTarEntry(System.String)">
            <summary>
            Construct an entry with only a <paramref name="name">name</paramref>.
            This allows the programmer to construct the entry's header "by hand". 
            </summary>
            <param name="name">The name to use for the entry</param>
            <returns>Returns the newly created <see cref="T:SharpZip.Tar.TarEntry"/></returns>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.CreateEntryFromFile(System.String)">
            <summary>
            Construct an entry for a file. File is set to file, and the
            header is constructed from information from the file.
            </summary>
            <param name="fileName">The file name that the entry represents.</param>
            <returns>Returns the newly created <see cref="T:SharpZip.Tar.TarEntry"/></returns>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.Equals(System.Object)">
            <summary>
            Determine if the two entries are equal. Equality is determined
            by the header names being equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current Object.</param>
            <returns>
            True if the entries are equal; false if not.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.GetHashCode">
            <summary>
            Derive a Hash value for the current <see cref="T:System.Object"/>
            </summary>
            <returns>A Hash code for the current <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.IsDescendent(SharpZip.Tar.TarEntry)">
            <summary>
            Determine if the given entry is a descendant of this entry.
            Descendancy is determined by the name of the descendant
            starting with this entry's name.
            </summary>
            <param name = "toTest">
            Entry to be checked as a descendent of this.
            </param>
            <returns>
            True if entry is a descendant of this.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.SetIds(System.Int32,System.Int32)">
            <summary>
            Convenience method to set this entry's group and user ids.
            </summary>
            <param name="userId">
            This entry's new user id.
            </param>
            <param name="groupId">
            This entry's new group id.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.SetNames(System.String,System.String)">
            <summary>
            Convenience method to set this entry's group and user names.
            </summary>
            <param name="userName">
            This entry's new user name.
            </param>
            <param name="groupName">
            This entry's new group name.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.GetFileTarHeader(SharpZip.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader with information from a File.
            </summary>
            <param name="header">
            The TarHeader to fill in.
            </param>
            <param name="file">
            The file from which to get the header information.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.GetDirectoryEntries">
            <summary>
            Get entries for all files present in this entries directory.
            If this entry doesnt represent a directory zero entries are returned.
            </summary>
            <returns>
            An array of TarEntry's for this entry's children.
            </returns>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.WriteEntryHeader(System.Byte[])">
            <summary>
            Write an entry's header information to a header buffer.
            </summary>
            <param name = "outBuffer">
            The tar entry header buffer to fill in.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.AdjustEntryName(System.Byte[],System.String)">
            <summary>
            Convenience method that will modify an entry's name directly
            in place in an entry header buffer byte array.
            </summary>
            <param name="buffer">
            The buffer containing the entry header to modify.
            </param>
            <param name="newName">
            The new name to place into the header buffer.
            </param>
        </member>
        <member name="M:SharpZip.Tar.TarEntry.NameTarHeader(SharpZip.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader given only the entry's name.
            </summary>
            <param name="header">
            The TarHeader to fill in.
            </param>
            <param name="name">
            The tar entry name.
            </param>
        </member>
        <member name="F:SharpZip.Tar.TarEntry.file">
            <summary>
            The name of the file this entry represents or null if the entry is not based on a file.
            </summary>
        </member>
        <member name="F:SharpZip.Tar.TarEntry.header">
            <summary>
            The entry's header information.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarEntry.TarHeader">
            <summary>
            Get this entry's header.
            </summary>
            <returns>
            This entry's TarHeader.
            </returns>
        </member>
        <member name="P:SharpZip.Tar.TarEntry.Name">
            <summary>
            Get/Set this entry's name.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarEntry.UserId">
            <summary>
            Get/set this entry's user id.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarEntry.GroupId">
            <summary>
            Get/set this entry's group id.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarEntry.UserName">
            <summary>
            Get/set this entry's user name.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarEntry.GroupName">
            <summary>
            Get/set this entry's group name.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarEntry.ModTime">
            <summary>
            Get/Set the modification time for this entry
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarEntry.File">
            <summary>
            Get this entry's file.
            </summary>
            <returns>
            This entry's file.
            </returns>
        </member>
        <member name="P:SharpZip.Tar.TarEntry.Size">
            <summary>
            Get/set this entry's recorded file size.
            </summary>
        </member>
        <member name="P:SharpZip.Tar.TarEntry.IsDirectory">
            <summary>
            Return true if this entry represents a directory, false otherwise
            </summary>
            <returns>
            True if this entry is a directory.
            </returns>
        </member>
        <member name="T:SharpZip.GZip.GZipException">
            <summary>
            GZipException represents a Gzip specific exception	
            </summary>
        </member>
        <member name="M:SharpZip.GZip.GZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:SharpZip.GZip.GZipException.#ctor">
            <summary>
            Initialise a new instance of GZipException
            </summary>
        </member>
        <member name="M:SharpZip.GZip.GZipException.#ctor(System.String)">
            <summary>
            Initialise a new instance of GZipException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:SharpZip.GZip.GZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.GZip.GZipException"></see>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that caused this exception.</param>
        </member>
        <member name="T:SharpZip.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
            <param name="seed">The seed value to initialise keys with.</param>
            <returns>A new key value.</returns>
        </member>
        <member name="T:SharpZip.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicCryptoBase.SetKeys(System.Byte[])">
            <summary>
            Set the key schedule for encryption/decryption.
            </summary>
            <param name="keyData">The data use to set the keys from.</param>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:SharpZip.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:SharpZip.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:SharpZip.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:SharpZip.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size in bits.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:SharpZip.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="T:MySoft.Threading.STPStartInfo">
            <summary>
            Summary description for STPStartInfo.
            </summary>
        </member>
        <member name="M:MySoft.Threading.STPStartInfo.AsReadOnly">
            <summary>
            Get a readonly version of this STPStartInfo.
            </summary>
            <returns>Returns a readonly reference to this STPStartInfo</returns>
        </member>
        <member name="P:MySoft.Threading.STPStartInfo.IdleTimeout">
            <summary>
            Get/Set the idle timeout in milliseconds.
            If a thread is idle (starved) longer than IdleTimeout then it may quit.
            </summary>
        </member>
        <member name="P:MySoft.Threading.STPStartInfo.MinWorkerThreads">
            <summary>
            Get/Set the lower limit of threads in the pool.
            </summary>
        </member>
        <member name="P:MySoft.Threading.STPStartInfo.MaxWorkerThreads">
            <summary>
            Get/Set the upper limit of threads in the pool.
            </summary>
        </member>
        <member name="P:MySoft.Threading.STPStartInfo.ThreadPriority">
            <summary>
            Get/Set the scheduling priority of the threads in the pool.
            The Os handles the scheduling.
            </summary>
        </member>
        <member name="P:MySoft.Threading.STPStartInfo.PerformanceCounterInstanceName">
            <summary>
            Get/Set the performance counter instance name of this SmartThreadPool
            The default is null which indicate not to use performance counters at all.
            </summary>
        </member>
        <member name="P:MySoft.Threading.STPStartInfo.EnableLocalPerformanceCounters">
            <summary>
            Enable/Disable the local performance counter.
            This enables the user to get some performance information about the SmartThreadPool 
            without using Windows performance counters. (Useful on WindowsCE, Silverlight, etc.)
            The default is false.
            </summary>
        </member>
        <member name="T:MySoft.RESTful.AuthenticationUser">
            <summary>
            认证用户
            </summary>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationUser.AuthID">
            <summary>
            认证用户ID
            </summary>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationUser.AuthName">
            <summary>
            认证用户名称
            </summary>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationUser.AuthMobile">
            <summary>
            认证用户的手机
            </summary>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationUser.AuthEmail">
            <summary>
            认证用户邮箱
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer"/> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer"/> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
            <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter"/> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The property name camel cased.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs"/>.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="propertyType">Type of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
            <param name="component">The component to test for reset capability. 
                            </param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value. 
                            </param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set. 
                            </param><param name="value">The new value. 
                            </param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
            <param name="component">The component with the property to be examined for persistence. 
                            </param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
            true if the property is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.ComponentModel.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value></value>
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:MySoft.ResponseResult">
            <summary>
            响应返回
            </summary>
        </member>
        <member name="M:MySoft.ResponseResult.#ctor">
            <summary>
            实例化ResponseResult
            </summary>
        </member>
        <member name="M:MySoft.ResponseResult.#ctor(System.Int32,System.String)">
            <summary>
             实例化ResponseResult
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="P:MySoft.ResponseResult.Code">
            <summary>
            返回的代码（用于自定义代码）
            </summary>
        </member>
        <member name="P:MySoft.ResponseResult.Message">
            <summary>
            返回的消息
            </summary>
        </member>
        <member name="P:MySoft.ResponseResult.Result">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="T:MySoft.ResponseResult`1">
            <summary>
            响应返回
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.ResponseResult`1.#ctor">
            <summary>
            实体化DataResult
            </summary>
        </member>
        <member name="M:MySoft.ResponseResult`1.#ctor(System.Int32,System.String)">
            <summary>
             实例化ResponseResult
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="P:MySoft.ResponseResult`1.Result">
            <summary>
            返回的结果
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipEntryFactory">
            <summary>
            Basic implementation of <see cref="T:SharpZip.Zip.IEntryFactory"></see>
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipEntryFactory.#ctor">
            <summary>
            Initialise a new instance of the <see cref="T:SharpZip.Zip.ZipEntryFactory"/> class.
            </summary>
            <remarks>A default <see cref="T:SharpZip.Core.INameTransform"/>, and the LastWriteTime for files is used.</remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipEntryFactory.#ctor(SharpZip.Zip.ZipEntryFactory.TimeSetting)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Zip.ZipEntryFactory"/> using the specified <see cref="T:SharpZip.Zip.ZipEntryFactory.TimeSetting"/>
            </summary>
            <param name="timeSetting">The <see cref="T:SharpZip.Zip.ZipEntryFactory.TimeSetting">time setting</see> to use when creating <see cref="T:SharpZip.Zip.ZipEntry">Zip entries</see>.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipEntryFactory.#ctor(System.DateTime)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Zip.ZipEntryFactory"/> using the specified <see cref="T:System.DateTime"/>
            </summary>
            <param name="time">The time to set all <see cref="P:SharpZip.Zip.ZipEntry.DateTime"/> values to.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Make a new <see cref="T:SharpZip.Zip.ZipEntry"/> for a file.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <returns>Returns a new <see cref="T:SharpZip.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipEntryFactory.MakeFileEntry(System.String,System.Boolean)">
            <summary>
            Make a new <see cref="T:SharpZip.Zip.ZipEntry"/> from a name.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
            <returns>Returns a new <see cref="T:SharpZip.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Make a new <see cref="T:SharpZip.Zip.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <returns>Returns a new <see cref="T:SharpZip.Zip.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>
            Make a new <see cref="T:SharpZip.Zip.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
            <returns>Returns a new <see cref="T:SharpZip.Zip.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="P:SharpZip.Zip.ZipEntryFactory.NameTransform">
            <summary>
            Get / set the <see cref="T:SharpZip.Core.INameTransform"/> to be used when creating new <see cref="T:SharpZip.Zip.ZipEntry"/> values.
            </summary>
            <remarks>
            Setting this property to null will cause a default <see cref="T:SharpZip.Zip.ZipNameTransform">name transform</see> to be used.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntryFactory.Setting">
            <summary>
            Get / set the <see cref="T:SharpZip.Zip.ZipEntryFactory.TimeSetting"/> in use.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntryFactory.FixedDateTime">
            <summary>
            Get / set the <see cref="T:System.DateTime"/> value to use when <see cref="P:SharpZip.Zip.ZipEntryFactory.Setting"/> is set to <see cref="F:SharpZip.Zip.ZipEntryFactory.TimeSetting.Fixed"/>
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipEntryFactory.GetAttributes">
            <summary>
            A bitmask defining the attributes to be retrieved from the actual file.
            </summary>
            <remarks>The default is to get all possible attributes from the actual file.</remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntryFactory.SetAttributes">
            <summary>
            A bitmask defining which attributes are to be set on.
            </summary>
            <remarks>By default no attributes are set on.</remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipEntryFactory.IsUnicodeText">
            <summary>
            Get set a value indicating wether unidoce text should be set on.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipEntryFactory.TimeSetting">
            <summary>
            Defines the possible values to be used for the <see cref="P:SharpZip.Zip.ZipEntry.DateTime"/>.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipEntryFactory.TimeSetting.LastWriteTime">
            <summary>
            Use the recorded LastWriteTime value for the file.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipEntryFactory.TimeSetting.LastWriteTimeUtc">
            <summary>
            Use the recorded LastWriteTimeUtc value for the file
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipEntryFactory.TimeSetting.CreateTime">
            <summary>
            Use the recorded CreateTime value for the file.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipEntryFactory.TimeSetting.CreateTimeUtc">
            <summary>
            Use the recorded CreateTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipEntryFactory.TimeSetting.LastAccessTime">
            <summary>
            Use the recorded LastAccessTime value for the file.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipEntryFactory.TimeSetting.LastAccessTimeUtc">
            <summary>
            Use the recorded LastAccessTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.ZipEntryFactory.TimeSetting.Fixed">
            <summary>
            Use a fixed value.
            </summary>
            <remarks>The actual <see cref="T:System.DateTime"/> value used can be
            specified via the <see cref="M:SharpZip.Zip.ZipEntryFactory.#ctor(System.DateTime)"/> constructor or 
            using the <see cref="M:SharpZip.Zip.ZipEntryFactory.#ctor(SharpZip.Zip.ZipEntryFactory.TimeSetting)"/> with the setting set
            to <see cref="F:SharpZip.Zip.ZipEntryFactory.TimeSetting.Fixed"/> which will use the <see cref="T:System.DateTime"/> when this class was constructed.
            The <see cref="P:SharpZip.Zip.ZipEntryFactory.FixedDateTime"/> property can also be used to set this value.</remarks>
        </member>
        <member name="T:SharpZip.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.#ctor(SharpZip.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <param name="flush">True to flush input buffers</param>
            <param name="finish">Finish deflation with the current input.</param>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Determines if more <see cref="M:SharpZip.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">input</see> is needed.
            </summary>		
            <returns>Return true if input is needed via <see cref="M:SharpZip.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see></returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
            <param name="buffer">The buffer containing the dictionary data</param>
            <param name="offset">The offset in the buffer for the first byte of data</param>
            <param name="length">The length of the dictionary data.</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:SharpZip.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:SharpZip.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:SharpZip.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:SharpZip.GZip.GZipOutputStream">
             <summary>
             This filter stream is used to compress a stream into a "GZIP" stream.
             The "GZIP" format is described in RFC 1952.
            
             author of the original java version : John Leuner
             </summary>
             <example> This sample shows how to gzip a file
             <code>
             using System;
             using System.IO;
             
             using SharpZip.GZip;
             using SharpZip.Core;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             			using (Stream s = new GZipOutputStream(File.Create(args[0] + ".gz")))
             			using (FileStream fs = File.OpenRead(args[0])) {
             				byte[] writeData = new byte[4096];
             				Streamutils.Copy(s, fs, writeData);
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="F:SharpZip.GZip.GZipOutputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="M:SharpZip.GZip.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipOutputStream with the default buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
        </member>
        <member name="M:SharpZip.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZipOutputStream with the specified buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:SharpZip.GZip.GZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the active compression level (1-9).  The new level will be activated
            immediately.
            </summary>
            <param name="level">The compression level to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:SharpZip.Zip.Compression.Deflater"/>
        </member>
        <member name="M:SharpZip.GZip.GZipOutputStream.GetLevel">
            <summary>
            Get the current compression level.
            </summary>
            <returns>The current compression level.</returns>
        </member>
        <member name="M:SharpZip.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write given buffer to output updating crc
            </summary>
            <param name="buffer">Buffer to write</param>
            <param name="offset">Offset of first byte in buf to write</param>
            <param name="count">Number of bytes to write</param>
        </member>
        <member name="M:SharpZip.GZip.GZipOutputStream.Close">
            <summary>
            Writes remaining compressed output data to the output stream
            and closes it.
            </summary>
        </member>
        <member name="M:SharpZip.GZip.GZipOutputStream.Finish">
            <summary>
            Finish compression and write any footer information required to stream
            </summary>
        </member>
        <member name="T:SharpZip.Core.StreamUtils">
            <summary>
            Provides simple <see cref="T:System.IO.Stream"/>" utilities.
            </summary>
        </member>
        <member name="M:SharpZip.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/> ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">The buffer to fill.</param>
            <seealso cref="M:SharpZip.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:SharpZip.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/>" ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read data from.</param>
            <param name="buffer">The buffer to store data in.</param>
            <param name="offset">The offset at which to begin storing data.</param>
            <param name="count">The number of bytes of data to store.</param>
            <exception cref="T:System.ArgumentNullException">Required parameter is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> and or <paramref name="count"/> are invalid.</exception>
            <exception cref="T:System.IO.EndOfStreamException">End of stream is encountered before all the data has been read.</exception>
        </member>
        <member name="M:SharpZip.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
        </member>
        <member name="M:SharpZip.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],SharpZip.Core.ProgressHandler,System.TimeSpan,System.Object,System.String)">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
            <param name="progressHandler">The <see cref="T:SharpZip.Core.ProgressHandler">progress handler delegate</see> to use.</param>
            <param name="updateInterval">The minimum <see cref="T:System.TimeSpan"/> between progress updates.</param>
            <param name="sender">The source for this event.</param>
            <param name="name">The name to use with the event.</param>
            <remarks>This form is specialised for use within #Zip to support events during archive operations.</remarks>
        </member>
        <member name="M:SharpZip.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],SharpZip.Core.ProgressHandler,System.TimeSpan,System.Object,System.String,System.Int64)">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
            <param name="progressHandler">The <see cref="T:SharpZip.Core.ProgressHandler">progress handler delegate</see> to use.</param>
            <param name="updateInterval">The minimum <see cref="T:System.TimeSpan"/> between progress updates.</param>
            <param name="sender">The source for this event.</param>
            <param name="name">The name to use with the event.</param>
            <param name="fixedTarget">A predetermined fixed target value to use with progress updates.
            If the value is negative the target is calculated by looking at the stream.</param>
            <remarks>This form is specialised for use within #Zip to support events during archive operations.</remarks>
        </member>
        <member name="M:SharpZip.Core.StreamUtils.#ctor">
            <summary>
            Initialise an instance of <see cref="T:SharpZip.Core.StreamUtils"></see>
            </summary>
        </member>
        <member name="T:SharpZip.Core.NameFilter">
            <summary>
            NameFilter is a string matching class which allows for both positive and negative
            matching.
            A filter is a sequence of independant <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see> separated by semi-colons ';'.
            To include a semi-colon it may be quoted as in \;. Each expression can be prefixed by a plus '+' sign or
            a minus '-' sign to denote the expression is intended to include or exclude names.
            If neither a plus or minus sign is found include is the default.
            A given name is tested for inclusion before checking exclusions.  Only names matching an include spec 
            and not matching an exclude spec are deemed to match the filter.
            An empty filter matches any name.
            </summary>
            <example>The following expression includes all name ending in '.dat' with the exception of 'dummy.dat'
            "+\.dat$;-^dummy\.dat$"
            </example>
        </member>
        <member name="M:SharpZip.Core.NameFilter.#ctor(System.String)">
            <summary>
            Construct an instance based on the filter expression passed
            </summary>
            <param name="filter">The filter expression.</param>
        </member>
        <member name="M:SharpZip.Core.NameFilter.IsValidExpression(System.String)">
            <summary>
            Test a string to see if it is a valid regular expression.
            </summary>
            <param name="expression">The expression to test.</param>
            <returns>True if expression is a valid <see cref="T:System.Text.RegularExpressions.Regex"/> false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Core.NameFilter.IsValidFilterExpression(System.String)">
            <summary>
            Test an expression to see if it is valid as a filter.
            </summary>
            <param name="toTest">The filter expression to test.</param>
            <returns>True if the expression is valid, false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Core.NameFilter.SplitQuoted(System.String)">
            <summary>
            Split a string into its component pieces
            </summary>
            <param name="original">The original string</param>
            <returns>Returns an array of <see cref="T:System.String"/> values containing the individual filter elements.</returns>
        </member>
        <member name="M:SharpZip.Core.NameFilter.ToString">
            <summary>
            Convert this filter to its string equivalent.
            </summary>
            <returns>The string equivalent for this filter.</returns>
        </member>
        <member name="M:SharpZip.Core.NameFilter.IsIncluded(System.String)">
            <summary>
            Test a value to see if it is included by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is included, false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Core.NameFilter.IsExcluded(System.String)">
            <summary>
            Test a value to see if it is excluded by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is excluded, false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Core.NameFilter.IsMatch(System.String)">
            <summary>
            Test a value to see if it matches the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value matches, false otherwise.</returns>
        </member>
        <member name="M:SharpZip.Core.NameFilter.Compile">
            <summary>
            Compile this filter.
            </summary>
        </member>
        <member name="T:MySoft.Threading.Internal.PriorityQueue">
            <summary>
            PriorityQueue class
            This class is not thread safe because we use external lock
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.PriorityQueue._queuesCount">
            <summary>
            The number of queues, there is one for each type of priority
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.PriorityQueue._queues">
            <summary>
            Work items queues. There is one for each type of priority
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.PriorityQueue._workItemsCount">
            <summary>
            The total number of work items within the queues 
            </summary>
        </member>
        <member name="F:MySoft.Threading.Internal.PriorityQueue._version">
            <summary>
            Use with IEnumerable interface
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.PriorityQueue.Enqueue(MySoft.Threading.Internal.IHasWorkItemPriority)">
            <summary>
            Enqueue a work item.
            </summary>
            <param name="workItem">A work item</param>
        </member>
        <member name="M:MySoft.Threading.Internal.PriorityQueue.Dequeue">
            <summary>
            Dequeque a work item.
            </summary>
            <returns>Returns the next work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.PriorityQueue.GetNextNonEmptyQueue(System.Int32)">
            <summary>
            Find the next non empty queue starting at queue queueIndex+1
            </summary>
            <param name="queueIndex">The index-1 to start from</param>
            <returns>
            The index of the next non empty queue or -1 if all the queues are empty
            </returns>
        </member>
        <member name="M:MySoft.Threading.Internal.PriorityQueue.Clear">
            <summary>
            Clear all the work items 
            </summary>
        </member>
        <member name="M:MySoft.Threading.Internal.PriorityQueue.GetEnumerator">
            <summary>
            Returns an enumerator to iterate over the work items
            </summary>
            <returns>Returns an enumerator</returns>
        </member>
        <member name="P:MySoft.Threading.Internal.PriorityQueue.Count">
            <summary>
            The number of work items 
            </summary>
        </member>
        <member name="T:MySoft.Threading.Internal.PriorityQueue.PriorityQueueEnumerator">
            <summary>
            The class the implements the enumerator
            </summary>
        </member>
        <member name="T:MySoft.SecurityProxy">
            <summary>
            Test proxy invocation handler which is used to check a methods security
            before invoking the method
            </summary>
        </member>
        <member name="M:MySoft.SecurityProxy.#ctor(System.Object)">
            <summary>
             Class constructor
            </summary>
            <param name="obj">Instance of object to be proxied</param>
        </member>
        <member name="M:MySoft.SecurityProxy.NewInstance(System.Object)">
            <summary>
             Factory method to create a new proxy instance.
            </summary>
            <param name="obj">Instance of object to be proxied</param>
        </member>
        <!-- 对于成员“M:MySoft.SecurityProxy.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])”忽略有格式错误的 XML 注释 -->
        <member name="T:MySoft.Mail.SendResult">
            <summary>
            邮件发送结果
            </summary>
        </member>
        <member name="P:MySoft.Mail.SendResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="F:SharpZip.Zip.Compression.InflaterDynHeader.mode">
            <summary>
            The current decode mode
            </summary>
        </member>
        <member name="T:SharpZip.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:SharpZip.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:SharpZip.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:SharpZip.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:SharpZip.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:SharpZip.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:SharpZip.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:SharpZip.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:SharpZip.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:SharpZip.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:SharpZip.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.SetStrategy(SharpZip.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:SharpZip.GZip.GZipConstants">
            <summary>
            This class contains constants used for gzip.
            </summary>
        </member>
        <member name="F:SharpZip.GZip.GZipConstants.GZIP_MAGIC">
            <summary>
            Magic number found at start of GZIP header
            </summary>
        </member>
        <member name="F:SharpZip.GZip.GZipConstants.FTEXT">
            <summary>
            Flag bit mask for text
            </summary>
        </member>
        <member name="F:SharpZip.GZip.GZipConstants.FHCRC">
            <summary>
            Flag bitmask for Crc
            </summary>
        </member>
        <member name="F:SharpZip.GZip.GZipConstants.FEXTRA">
            <summary>
            Flag bit mask for extra
            </summary>
        </member>
        <member name="F:SharpZip.GZip.GZipConstants.FNAME">
            <summary>
            flag bitmask for name
            </summary>
        </member>
        <member name="F:SharpZip.GZip.GZipConstants.FCOMMENT">
            <summary>
            flag bit mask indicating comment is present
            </summary>
        </member>
        <member name="M:SharpZip.GZip.GZipConstants.#ctor">
            <summary>
            Initialise default instance.
            </summary>
            <remarks>Constructor is private to prevent instances being created.</remarks>
        </member>
        <member name="T:SharpZip.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:SharpZip.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:SharpZip.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:SharpZip.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:SharpZip.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:SharpZip.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:SharpZip.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:SharpZip.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:SharpZip.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:SharpZip.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:MySoft.Task.Job">
            <summary>
            任务实体
            </summary>
        </member>
        <member name="M:MySoft.Task.Job.IsRun">
            <summary>
            根据当前时间判断任务是否需要执行
            </summary>
        </member>
        <member name="M:MySoft.Task.Job.Execute">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="E:MySoft.Task.Job.OnLog">
            <summary>
            事件处理日志
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.IsRegisterLog">
            <summary>
            是否注册了日志
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.BeginDate">
            <summary>
            任务开始日期
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.EndDate">
            <summary>
            任务结束日期
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.BeginTime">
            <summary>
            任务开始时间
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.EndTime">
            <summary>
            任务结束时间
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.Interval">
            <summary>
            任务循环执行时间间隔（单位：毫秒）
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.AssemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.ClassName">
            <summary>
            类名全称（任务执行入口方法在该类里面定义）
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.State">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.LatestRunTime">
            <summary>
            最近一次运行时间
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.LatestException">
            <summary>
            任务运行时最近发生的异常
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.ExceptionCount">
            <summary>
            异常计数
            </summary>
        </member>
        <member name="T:MySoft.Task.Configuration.TaskConfigurationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Task.Configuration.TaskConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Task.Configuration.TaskConfiguration">
            <summary>
            计划任务配置
            <remarks>
            <code>
            <configuration>
                <configSections>
            	    <sectionGroup name="mysoft.framework">
            		    <section name="task" type="MySoft.Task.Configuration.TaskConfigurationHandler, MySoft"/>
            	    </sectionGroup>
                </configSections>
                   ......
                <mysoft.framework>
            	    <task>
                        <job name="job1" beginDate="2008-1-1" endDate="2010-1-1" beginTime="" endTime="" interval="" assemblyName="" className=""/>
            	    </task>
                </mysoft.framework>
            </configuration>
            </code>
            </remarks>
            </summary>
        </member>
        <member name="M:MySoft.Task.Configuration.TaskConfiguration.GetConfig">
            <summary>
            获取定时任务配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Task.Configuration.TaskConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MySoft.Task.Configuration.TaskConfiguration.Jobs">
            <summary>
            任务集合
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingHostCheck">
            <summary>
            检测每个客户端的可用服务器
            </summary>
        </member>
        <member name="F:MySoft.Remoting.RemotingHostCheck.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingHostCheck.DoCheck">
            <summary>
            开始检测
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingHostCheck.GetUsableServerUrl(MySoft.Remoting.Configuration.RemotingHost)">
            <summary>
            获取可用的服务器地址
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingHostCheck.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingHostCheck.CheckLog">
            <summary>
            服务器检测日志
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingException">
            <summary>
            Remoting异常
            </summary>
        </member>
        <member name="T:MySoft.MySoftException">
            <summary>
            MySoft异常类
            </summary>
        </member>
        <member name="M:MySoft.MySoftException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MySoft.MySoftException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="msg"></param>
            <param name="inner"></param>
        </member>
        <member name="M:MySoft.MySoftException.#ctor(MySoft.ExceptionType)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
        </member>
        <member name="M:MySoft.MySoftException.#ctor(MySoft.ExceptionType,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
            <param name="msg">异常消息</param>
        </member>
        <member name="M:MySoft.MySoftException.#ctor(MySoft.ExceptionType,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
            <param name="msg">异常消息</param>
            <param name="inner">内部异常</param>
        </member>
        <member name="M:MySoft.MySoftException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info">存储对象序列化和反序列化所需的全部数据</param>
            <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文</param>
        </member>
        <member name="M:MySoft.MySoftException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            重载GetObjectData方法
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:MySoft.MySoftException.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingException.#ctor(System.String)">
            <summary>
            普通异常的构造方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.Remoting.RemotingException.#ctor(System.String,System.Exception)">
            <summary>
            内嵌异常的构造方法
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemFactory.CreateWorkItem(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WIGStartInfo,MySoft.Threading.WorkItemCallback)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemFactory.CreateWorkItem(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WIGStartInfo,MySoft.Threading.WorkItemCallback,MySoft.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="workItemPriority">The priority of the work item</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemFactory.CreateWorkItem(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WIGStartInfo,MySoft.Threading.WorkItemInfo,MySoft.Threading.WorkItemCallback)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="workItemInfo">Work item info</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemFactory.CreateWorkItem(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WIGStartInfo,MySoft.Threading.WorkItemCallback,System.Object)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemFactory.CreateWorkItem(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WIGStartInfo,MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemFactory.CreateWorkItem(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WIGStartInfo,MySoft.Threading.WorkItemInfo,MySoft.Threading.WorkItemCallback,System.Object)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="workItemInfo">Work item information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemFactory.CreateWorkItem(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WIGStartInfo,MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemFactory.CreateWorkItem(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WIGStartInfo,MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback,MySoft.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemFactory.CreateWorkItem(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WIGStartInfo,MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback,MySoft.Threading.CallToPostExecute)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:MySoft.Threading.Internal.WorkItemFactory.CreateWorkItem(MySoft.Threading.IWorkItemsGroup,MySoft.Threading.WIGStartInfo,MySoft.Threading.WorkItemCallback,System.Object,MySoft.Threading.PostExecuteWorkItemCallback,MySoft.Threading.CallToPostExecute,MySoft.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="T:MySoft.RESTful.Configuration.RESTfulConfigurationHandler">
            <summary>
            Deserializes the markup in Web.config into an instance of the <see cref="!:StaticPageConfiguration"/> class.
            </summary>
        </member>
        <member name="M:MySoft.RESTful.Configuration.RESTfulConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates an instance of the <see cref="!:StaticPageConfiguration"/> class.
            </summary>
            <remarks>Uses XML Serialization to deserialize the XML in the Web.config file into an
            <see cref="!:StaticPageConfiguration"/> instance.</remarks>
            <returns>An instance of the <see cref="!:StaticPageConfiguration"/> class.</returns>
        </member>
        <member name="T:MySoft.RESTful.AuthenticationException">
            <summary>
            认证异常信息
            </summary>
        </member>
        <member name="M:MySoft.RESTful.AuthenticationException.#ctor(System.String,System.String)">
            <summary>
            实例化AuthenticationException
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.RESTful.AuthenticationException.#ctor(System.String)">
            <summary>
            实例化AuthenticationException
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationException.Code">
            <summary>
            错误Code
            </summary>
        </member>
        <member name="P:MySoft.RESTful.AuthenticationException.StatusCode">
            <summary>
            Http状态码
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.ItemsUnitializedValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Tests whether the list's items are their unitialized value.
            </summary>
            <param name="list">The list.</param>
            <returns>Whether the list's items are their unitialized value</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from an id.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> for the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> for the specified id.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Extensions">
            <summary>
            Contains the JSON schema extension methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> class from another <see cref="T:Newtonsoft.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="T:Newtonsoft.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor then fall back to single paramatized constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Allow Json.NET to use a non-public default constructor.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.ZipInputStream">
             <summary>
             This is an InflaterInputStream that reads the files baseInputStream an zip archive
             one after another.  It has a special method to get the zip entry of
             the next file.  The zip entry contains information about the file name
             size, compressed size, Crc, etc.
             It includes support for Stored and Deflated entries.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             
             <example> This sample shows how to read a zip file
             <code lang="C#">
             using System;
             using System.Text;
             using System.IO;
             
             using SharpZip.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		using ( ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]))) {
            
             			ZipEntry theEntry;
             			const int size = 2048;
             			byte[] data = new byte[2048];
             			
             			while ((theEntry = s.GetNextEntry()) != null) {
                             if ( entry.IsFile ) {
             				    Console.Write("Show contents (y/n) ?");
             				    if (Console.ReadLine() == "y") {
             				    	while (true) {
             				    		size = s.Read(data, 0, data.Length);
             				    		if (size > 0) {
             				    			Console.Write(new ASCIIEncoding().GetString(data, 0, size));
             				    		} else {
             				    			break;
             				    		}
             				    	}
             				    }
             				}
             			}
             		}
             	}
             }
             </code>
             </example>
        </member>
        <member name="F:SharpZip.Zip.ZipInputStream.internalReader">
            <summary>
            The current reader this instance.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
            <param name="baseInputStream">The underlying <see cref="T:System.IO.Stream"/> providing data.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
            <param name="baseInputStream">The underlying <see cref="T:System.IO.Stream"/> providing data.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:SharpZip.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:SharpZip.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            Password is not set, password is invalid, compression method is invalid,
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.ReadDataDescriptor">
            <summary>
            Read data descriptor at the end of compressed data. 
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.CompleteCloseEntry(System.Boolean)">
            <summary>
            Complete cleanup as the final part of closing.
            </summary>
            <param name="testCrc">True if the crc value should be tested</param>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.ReadingNotAvailable(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read by throwing an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="destination">The destination array to store data in.</param>
            <param name="offset">The offset at which data read should be stored.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.ReadingNotSupported(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read from this entry by throwing an exception
            </summary>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.InitialRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Perform the initial read on an entry which may include 
            reading encryption headers and setting up inflation.
            </summary>
            <param name="destination">The destination to fill with data read.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="buffer">The destination for the bytes.</param>
            <param name="offset">The index to start storing data.</param>
            <param name="count">The number of bytes to attempt to read.</param>
            <returns>Returns the number of bytes read.</returns>
            <remarks>Zero bytes read means end of stream.</remarks>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.BodyRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:SharpZip.Zip.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:SharpZip.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
            <value>A password for all encrypted <see cref="T:SharpZip.Zip.ZipEntry">entries </see> in this <see cref="T:SharpZip.Zip.ZipInputStream"/></value>
        </member>
        <member name="P:SharpZip.Zip.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if there is a current entry and it can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:SharpZip.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.ZipInputStream.Length">
            <summary>
            Returns the current size that can be read from the current entry if available
            </summary>
            <exception cref="T:SharpZip.Zip.ZipException">Thrown if the entry size is not known.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if no entry is currently available.</exception>
        </member>
        <member name="T:SharpZip.Zip.ZipInputStream.ReadDataHandler">
            <summary>
            Delegate for reading bytes from a stream. 
            </summary>
        </member>
        <member name="T:SharpZip.Zip.FastZipEvents">
            <summary>
            FastZipEvents supports all events applicable to <see cref="T:SharpZip.Zip.FastZip">FastZip</see> operations.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FastZipEvents.ProcessDirectory">
            <summary>
            Delegate to invoke when processing directories.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FastZipEvents.ProcessFile">
            <summary>
            Delegate to invoke when processing files.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FastZipEvents.Progress">
            <summary>
            Delegate to invoke during processing of files.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FastZipEvents.CompletedFile">
            <summary>
            Delegate to invoke when processing for a file has been completed.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FastZipEvents.DirectoryFailure">
            <summary>
            Delegate to invoke when processing directory failures.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FastZipEvents.FileFailure">
            <summary>
            Delegate to invoke when processing file failures.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.FastZipEvents.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the <see cref="F:SharpZip.Zip.FastZipEvents.DirectoryFailure">directory failure</see> event.
            </summary>
            <param name="directory">The directory causing the failure.</param>
            <param name="e">The exception for this event.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:SharpZip.Zip.FastZipEvents.OnFileFailure(System.String,System.Exception)">
            <summary>
            Fires the <see cref="F:SharpZip.Zip.FastZipEvents.FileFailure"> file failure handler delegate</see>.
            </summary>
            <param name="file">The file causing the failure.</param>
            <param name="e">The exception for this failure.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:SharpZip.Zip.FastZipEvents.OnProcessFile(System.String)">
            <summary>
            Fires the <see cref="F:SharpZip.Zip.FastZipEvents.ProcessFile">ProcessFile delegate</see>.
            </summary>
            <param name="file">The file being processed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:SharpZip.Zip.FastZipEvents.OnCompletedFile(System.String)">
            <summary>
            Fires the <see cref="F:SharpZip.Zip.FastZipEvents.CompletedFile"/> delegate
            </summary>
            <param name="file">The file whose processing has been completed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:SharpZip.Zip.FastZipEvents.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Fires the <see cref="F:SharpZip.Zip.FastZipEvents.ProcessDirectory">process directory</see> delegate.
            </summary>
            <param name="directory">The directory being processed.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files as determined by the current filter.</param>
            <returns>A <see cref="T:System.Boolean"/> of true if the operation should continue; false otherwise.</returns>
        </member>
        <member name="P:SharpZip.Zip.FastZipEvents.ProgressInterval">
            <summary>
            The minimum timespan between <see cref="F:SharpZip.Zip.FastZipEvents.Progress"/> events.
            </summary>
            <value>The minimum period of time between <see cref="F:SharpZip.Zip.FastZipEvents.Progress"/> events.</value>
            <seealso cref="F:SharpZip.Zip.FastZipEvents.Progress"/>
            <remarks>The default interval is three seconds.</remarks>
        </member>
        <member name="T:SharpZip.Zip.FastZip">
            <summary>
            FastZip provides facilities for creating and extracting zip files.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.FastZip.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:SharpZip.Zip.FastZip"/>.
            </summary>
        </member>
        <member name="M:SharpZip.Zip.FastZip.#ctor(SharpZip.Zip.FastZipEvents)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.Zip.FastZip"/>
            </summary>
            <param name="events">The <see cref="T:SharpZip.Zip.FastZipEvents">events</see> to use during operations.</param>
        </member>
        <member name="M:SharpZip.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:SharpZip.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:SharpZip.Core.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:SharpZip.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create a zip file/archive.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to obtain files and directories from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
        </member>
        <member name="M:SharpZip.Zip.FastZip.CreateZip(System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip archive sending output to the <paramref name="outputStream"/> passed.
            </summary>
            <param name="outputStream">The stream to write archive data to.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:SharpZip.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:SharpZip.Core.PathFilter">directory filter</see> to apply.</param>
            <remarks>The <paramref name="outputStream"/> is closed after creation.</remarks>
        </member>
        <member name="M:SharpZip.Zip.FastZip.ExtractZip(System.String,System.String,System.String)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="fileFilter">A filter to apply to files.</param>
        </member>
        <member name="M:SharpZip.Zip.FastZip.ExtractZip(System.String,System.String,SharpZip.Zip.FastZip.Overwrite,SharpZip.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:SharpZip.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating whether to restore the date and time for extracted files.</param>
        </member>
        <member name="M:SharpZip.Zip.FastZip.ExtractZip(System.IO.Stream,System.String,SharpZip.Zip.FastZip.Overwrite,SharpZip.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Extract the contents of a zip file held in a stream.
            </summary>
            <param name="inputStream">The seekable input stream containing the zip to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:SharpZip.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating whether to restore the date and time for extracted files.</param>
            <param name="isStreamOwner">Flag indicating whether the inputStream will be closed by this method.</param>
        </member>
        <member name="P:SharpZip.Zip.FastZip.CreateEmptyDirectories">
            <summary>
            Get/set a value indicating wether empty directories should be created.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.FastZip.Password">
            <summary>
            Get / set the password value.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.FastZip.NameTransform">
            <summary>
            Get or set the <see cref="T:SharpZip.Core.INameTransform"></see> active when creating Zip files.
            </summary>
            <seealso cref="P:SharpZip.Zip.FastZip.EntryFactory"></seealso>
        </member>
        <member name="P:SharpZip.Zip.FastZip.EntryFactory">
            <summary>
            Get or set the <see cref="T:SharpZip.Zip.IEntryFactory"></see> active when creating Zip files.
            </summary>
        </member>
        <member name="P:SharpZip.Zip.FastZip.UseZip64">
            <summary>
            Gets or sets the setting for <see cref="P:SharpZip.Zip.FastZip.UseZip64">Zip64 handling when writing.</see>
            </summary>
            <remarks>
            The default value is dynamic which is not backwards compatible with old
            programs and can cause problems with XP's built in compression which cant
            read Zip64 archives. However it does avoid the situation were a large file
            is added and cannot be completed correctly.
            NOTE: Setting the size for entries before they are added is the best solution!
            By default the EntryFactory used by FastZip will set fhe file size.
            </remarks>
        </member>
        <member name="P:SharpZip.Zip.FastZip.RestoreDateTimeOnExtract">
            <summary>
            Get/set a value indicating wether file dates and times should 
            be restored when extracting files from an archive.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:SharpZip.Zip.FastZip.RestoreAttributesOnExtract">
            <summary>
            Get/set a value indicating wether file attributes should
            be restored during extract operations
            </summary>
        </member>
        <member name="T:SharpZip.Zip.FastZip.Overwrite">
            <summary>
            Defines the desired handling when overwriting files during extraction.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FastZip.Overwrite.Prompt">
            <summary>
            Prompt the user to confirm overwriting
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FastZip.Overwrite.Never">
            <summary>
            Never overwrite files.
            </summary>
        </member>
        <member name="F:SharpZip.Zip.FastZip.Overwrite.Always">
            <summary>
            Always overwrite files.
            </summary>
        </member>
        <member name="T:SharpZip.Zip.FastZip.ConfirmOverwriteDelegate">
            <summary>
            Delegate called when confirming overwriting of files.
            </summary>
        </member>
        <member name="T:SharpZip.LZW.LzwException">
            <summary>
            LzwException represents a LZW specific exception
            </summary>
        </member>
        <member name="M:SharpZip.LZW.LzwException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:SharpZip.LZW.LzwException.#ctor">
            <summary>
            Initialise a new instance of LzwException
            </summary>
        </member>
        <member name="M:SharpZip.LZW.LzwException.#ctor(System.String)">
            <summary>
            Initialise a new instance of LzwException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:SharpZip.LZW.LzwException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:SharpZip.LZW.LzwException"></see>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that caused this exception.</param>
        </member>
        <member name="T:SharpZip.Core.WindowsPathUtils">
            <summary>
            WindowsPathUtils provides simple utilities for handling windows paths.
            </summary>
        </member>
        <member name="M:SharpZip.Core.WindowsPathUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpZip.Core.WindowsPathUtils"/> class.
            </summary>
        </member>
        <member name="M:SharpZip.Core.WindowsPathUtils.DropPathRoot(System.String)">
            <summary>
            Remove any path root present in the path
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing path information.</param>
            <returns>The path with the root removed if it was present; path otherwise.</returns>
            <remarks>Unlike the <see cref="T:System.IO.Path"/> class the path isnt otherwise checked for validity.</remarks>
        </member>
        <member name="T:MySoft.FTP.FTPclient">
            <summary>
            A wrapper class for .NET 2.0 FTP
            </summary>
            <remarks>
            This class does not hold open an FTP connection but
            instead is stateless: for each FTP request it
            connects, performs the request and disconnects.
            </remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.#ctor">
            <summary>
            Blank constructor
            </summary>
            <remarks>Hostname, username and password must be set manually</remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.#ctor(System.String)">
            <summary>
            Constructor just taking the hostname
            </summary>
            <param name="Hostname">in either ftp://ftp.host.com or ftp.host.com form</param>
            <remarks></remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor taking hostname, username and password
            </summary>
            <param name="Hostname">in either ftp://ftp.host.com or ftp.host.com form</param>
            <param name="Username">Leave blank to use 'anonymous' but set password to your email</param>
            <param name="Password"></param>
            <remarks></remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.ListDirectory(System.String)">
            <summary>
            Return a simple directory listing
            </summary>
            <param name="directory">Directory to list, e.g. /pub</param>
            <returns>A list of filenames and directories as a List(of String)</returns>
            <remarks>For a detailed directory listing, use ListDirectoryDetail</remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.ListDirectoryDetail(System.String)">
            <summary>
            Return a detailed directory listing
            </summary>
            <param name="directory">Directory to list, e.g. /pub/etc</param>
            <returns>An FTPDirectory object</returns>
        </member>
        <member name="M:MySoft.FTP.FTPclient.Upload(System.String,System.String)">
            <summary>
            Copy a local file to the FTP server
            </summary>
            <param name="localFilename">Full path of the local file</param>
            <param name="targetFilename">Target filename, if required</param>
            <returns></returns>
            <remarks>If the target filename is blank, the source filename is used
            (assumes current directory). Otherwise use a filename to specify a name
            or a full path and filename if required.</remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.Upload(System.IO.FileInfo,System.String)">
            <summary>
            Upload a local file to the FTP server
            </summary>
            <param name="fi">Source file</param>
            <param name="targetFilename">Target filename (optional)</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.FTP.FTPclient.Upload(System.Byte[],System.String)">
            <summary>
            Upload a local file to the FTP server
            </summary>
            <param name="fi">Source file</param>
            <param name="targetFilename">Target filename (optional)</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.FTP.FTPclient.Download(System.String,System.String,System.Boolean)">
            <summary>
            Copy a file from FTP server to local
            </summary>
            <param name="sourceFilename">Target filename, if required</param>
            <param name="localFilename">Full path of the local file</param>
            <returns></returns>
            <remarks>Target can be blank (use same filename), or just a filename
            (assumes current directory) or a full path and filename</remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.FtpDelete(System.String)">
            <summary>
            Delete remote file
            </summary>
            <param name="filename">filename or full path</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.FtpFileExists(System.String)">
            <summary>
            Determine if file exists on remote FTP site
            </summary>
            <param name="filename">Filename (for current dir) or full path</param>
            <returns></returns>
            <remarks>Note this only works for files</remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.GetFileSize(System.String)">
            <summary>
            Determine size of remote file
            </summary>
            <param name="filename"></param>
            <returns></returns>
            <remarks>Throws an exception if file does not exist</remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.GetCredentials">
            <summary>
            Get the credentials from username/password
            </summary>
        </member>
        <member name="M:MySoft.FTP.FTPclient.GetFullPath(System.String)">
            <summary>
            returns a full path using CurrentDirectory for a relative file reference
            </summary>
        </member>
        <member name="M:MySoft.FTP.FTPclient.AdjustDir(System.String)">
            <summary>
            Amend an FTP path so that it always starts with /
            </summary>
            <param name="path">Path to adjust</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.GetStringResponse(System.Net.FtpWebRequest)">
            <summary>
            Obtains a response stream as a string
            </summary>
            <param name="ftp">current FTP request</param>
            <returns>String containing response</returns>
            <remarks>FTP servers typically return strings with CR and
            not CRLF. Use respons.Replace(vbCR, vbCRLF) to convert
            to an MSDOS string</remarks>
        </member>
        <member name="M:MySoft.FTP.FTPclient.GetSize(System.Net.FtpWebRequest)">
            <summary>
            Gets the size of an FTP request
            </summary>
            <param name="ftp"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:MySoft.FTP.FTPclient._currentDirectory">
            <summary>
            The CurrentDirectory value
            </summary>
            <remarks>Defaults to the root '/'</remarks>
        </member>
        <member name="P:MySoft.FTP.FTPclient.Hostname">
            <summary>
            Hostname
            </summary>
            <value></value>
            <remarks>Hostname can be in either the full URL format
            ftp://ftp.myhost.com or just ftp.myhost.com
            </remarks>
        </member>
        <member name="P:MySoft.FTP.FTPclient.Username">
            <summary>
            Username property
            </summary>
            <value></value>
            <remarks>Can be left blank, in which case 'anonymous' is returned</remarks>
        </member>
        <member name="T:MySoft.FTP.FTPfileInfo">
            <summary>
            Represents a file or directory entry from an FTP listing
            </summary>
            <remarks>
            This class is used to parse the results from a detailed
            directory list from FTP. It supports most formats of
            </remarks>
        </member>
        <member name="M:MySoft.FTP.FTPfileInfo.#ctor(System.String,System.String)">
            <summary>
            Constructor taking a directory listing line and path
            </summary>
            <param name="line">The line returned from the detailed directory list</param>
            <param name="path">Path of the directory</param>
            <remarks></remarks>
        </member>
        <member name="F:MySoft.FTP.FTPfileInfo._ParseFormats">
            <summary>
            List of REGEX formats for different FTP server listing formats
            </summary>
            <remarks>
            The first three are various UNIX/LINUX formats, fourth is for MS FTP
            in detailed mode and the last for MS FTP in 'DOS' mode.
            I wish VB.NET had support for Const arrays like C# but there you go
            </remarks>
        </member>
        <member name="T:MySoft.FTP.FTPfileInfo.DirectoryEntryTypes">
            <summary>
            Identifies entry as either File or Directory
            </summary>
        </member>
        <member name="T:MySoft.FTP.FTPdirectory">
            <summary>
            Stores a list of files and directories from an FTP result
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MySoft.FTP.FTPdirectory.#ctor(System.String,System.String)">
            <summary>
            Constructor: create list from a (detailed) directory string
            </summary>
            <param name="dir">directory listing string</param>
            <param name="path"></param>
            <remarks></remarks>
        </member>
        <member name="M:MySoft.FTP.FTPdirectory.GetFiles(System.String)">
            <summary>
            Filter out only files from directory listing
            </summary>
            <param name="ext">optional file extension filter</param>
            <returns>FTPdirectory listing</returns>
        </member>
        <member name="M:MySoft.FTP.FTPdirectory.GetDirectories">
            <summary>
            Returns a list of only subdirectories
            </summary>
            <returns>FTPDirectory list</returns>
            <remarks></remarks>
        </member>
        <member name="T:MySoft.MemoryManager">
            <summary>
            内存管理类
            </summary>
        </member>
        <member name="M:MySoft.MemoryManager.FlushMemory">
            <summary>
            刷新内存
            </summary>
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <!-- 对于成员“F:SevenZip.CoderPropID.PosStateBits”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:SevenZip.CoderPropID.LitContextBits”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:SevenZip.CoderPropID.LitPosBits”忽略有格式错误的 XML 注释 -->
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MultiThread">
            <summary>
            Specifies multithread mode.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:MySoft.SecurityManager">
            <summary>
            Test class.
            </summary>
        </member>
        <member name="M:MySoft.SecurityManager.#ctor">
            <summary>
             Class constructor
            </summary>
        </member>
        <member name="M:MySoft.SecurityManager.IsMethodInRole(System.String,System.String)">
            <summary>
             Test method which can be implemented to check if a given method can
             be accessed by a user given the following role.
             NOTE:  This does not have any implementation...it's only used as a placeholder
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.Parse``1(System.String)">
            <summary>
            Parses the specified enum member name, returning it's value.
            </summary>
            <param name="enumMemberName">Name of the enum member.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.Parse``1(System.String,System.Boolean)">
            <summary>
            Parses the specified enum member name, returning it's value.
            </summary>
            <param name="enumMemberName">Name of the enum member.</param>
            <param name="ignoreCase">If set to <c>true</c> ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``2">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <param name="enumType">The enum type to get names and values for.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetMaximumValue``1(System.Type)">
            <summary>
            Gets the maximum valid value of an Enum type. Flags enums are ORed.
            </summary>
            <typeparam name="TEnumType">The type of the returned value. Must be assignable from the enum's underlying value type.</typeparam>
            <param name="enumType">The enum type to get the maximum value for.</param>
            <returns></returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the ancestors of every node in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the descendants of every node in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>
            Converts XML to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
            <value>The name of the deserialize root element.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value><c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value><c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MySoft.Installer.Configuration.InstallerConfigurationHandler">
            <summary>
            Deserializes the markup in Web.config into an instance of the <see cref="!:StaticPageConfiguration"/> class.
            </summary>
        </member>
        <member name="M:MySoft.Installer.Configuration.InstallerConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates an instance of the <see cref="!:StaticPageConfiguration"/> class.
            </summary>
            <remarks>Uses XML Serialization to deserialize the XML in the Web.config file into an
            <see cref="!:StaticPageConfiguration"/> instance.</remarks>
            <returns>An instance of the <see cref="!:StaticPageConfiguration"/> class.</returns>
        </member>
        <member name="T:MySoft.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:MySoft.ExceptionType.Unknown">
            <summary>
            未知异常
            </summary>
        </member>
        <member name="F:MySoft.ExceptionType.DataException">
            <summary>
            Data异常
            </summary>
        </member>
        <member name="F:MySoft.ExceptionType.WebException">
            <summary>
            Web异常
            </summary>
        </member>
        <member name="F:MySoft.ExceptionType.RemotingException">
            <summary>
            Remoting异常
            </summary>
        </member>
        <member name="F:MySoft.ExceptionType.IoCException">
            <summary>
            IoC异常
            </summary>
        </member>
        <member name="F:MySoft.ExceptionType.TaskException">
            <summary>
            Task异常
            </summary>
        </member>
        <member name="T:SharpZip.LZW.LzwConstants">
            <summary>
            This class contains constants used for LZW
            </summary>
        </member>
        <member name="F:SharpZip.LZW.LzwConstants.MAGIC">
            <summary>
            Magic number found at start of LZW header: 0x1f 0x9d
            </summary>
        </member>
        <member name="F:SharpZip.LZW.LzwConstants.MAX_BITS">
            <summary>
            Maximum number of bits per code
            </summary>
        </member>
        <member name="F:SharpZip.LZW.LzwConstants.BIT_MASK">
            <summary>
            Mask for 'number of compression bits'
            </summary>
        </member>
        <member name="F:SharpZip.LZW.LzwConstants.EXTENDED_MASK">
            <summary>
            Indicates the presence of a fourth header byte
            </summary>
        </member>
        <member name="F:SharpZip.LZW.LzwConstants.RESERVED_MASK">
            <summary>
            Reserved bits
            </summary>
        </member>
        <member name="F:SharpZip.LZW.LzwConstants.BLOCK_MODE_MASK">
            <summary>
            Block compression: if table is full and compression rate is dropping,
            clear the dictionary.
            </summary>
        </member>
        <member name="F:SharpZip.LZW.LzwConstants.HDR_SIZE">
            <summary>
            LZW file header size (in bytes)
            </summary>
        </member>
        <member name="F:SharpZip.LZW.LzwConstants.INIT_BITS">
            <summary>
            Initial number of bits per code
            </summary>
        </member>
        <member name="T:MySoft.Net.Client.SocketClientManager">
            <summary>
            默认Socket客户端
            </summary>
        </member>
        <member name="M:MySoft.Net.Client.SocketClientManager.#ctor">
            <summary>
            实例化Socket客户端管理器
            </summary>
        </member>
        <member name="E:MySoft.Net.Client.SocketClientManager.OnReceived">
            <summary>
            数据包接收
            </summary>
        </member>
        <member name="E:MySoft.Net.Client.SocketClientManager.OnConnected">
            <summary>
            连上服务器
            </summary>
        </member>
        <member name="E:MySoft.Net.Client.SocketClientManager.OnDisconnected">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="P:MySoft.Net.Client.SocketClientManager.BuffListManger">
            <summary>
            数据包缓冲类
            </summary>
        </member>
        <member name="P:MySoft.Net.Client.SocketClientManager.Client">
            <summary>
            SOCKETCLIENT对象
            </summary>
        </member>
        <member name="T:MySoft.Net.Client.ConnectionEventHandler">
            <summary>
            连接事件
            </summary>
            <param name="message"></param>
            <param name="connected"></param>
            <param name="socket"></param>
        </member>
        <member name="T:MySoft.Net.Client.ReceiveEventHandler">
            <summary>
            接收事件
            </summary>
            <param name="buffer"></param>
            <param name="socket"></param>
        </member>
        <member name="T:MySoft.Net.Client.DisconnectionEventHandler">
            <summary>
            退出事件
            </summary>
            <param name="message"></param>
            <param name="socket"></param>
        </member>
        <member name="T:MySoft.Net.Client.SocketClient">
            <summary>
            ZYSOCKET 客户端
            （一个简单的异步SOCKET客户端，性能不错。支持.NET 3.0以上版本。适用于silverlight)
            </summary>
        </member>
        <member name="F:MySoft.Net.Client.SocketClient.socket">
            <summary>
            SOCKET对象
            </summary>
        </member>
        <member name="M:MySoft.Net.Client.SocketClient.#ctor">
            <summary>
            实例化Socket客户端
            </summary>
        </member>
        <member name="M:MySoft.Net.Client.SocketClient.BeginConnectTo(System.String,System.Int32)">
            <summary>
            异步连接到指定的服务器
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:MySoft.Net.Client.SocketClient.ConnectTo(System.String,System.Int32,System.TimeSpan)">
            <summary>
            连接到指定服务器
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Client.SocketClient.ConnectTo(System.String,System.Int32)">
            <summary>
            连接到指定服务器
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Client.SocketClient.SendData(System.Byte[])">
            <summary>
            发送数据包
            </summary>
            <param name="buffer"></param>
            <param name="buffer"></param>
        </member>
        <member name="P:MySoft.Net.Client.SocketClient.Socket">
            <summary>
            SOCKET对象
            </summary>
        </member>
        <member name="P:MySoft.Net.Client.SocketClient.ReceiveTimeout">
            <summary>
            SOCKET 的  ReceiveTimeout属性
            </summary>
        </member>
        <member name="P:MySoft.Net.Client.SocketClient.SendTimeout">
            <summary>
            SOCKET 的 SendTimeout
            </summary>
        </member>
        <member name="E:MySoft.Net.Client.SocketClient.OnConnected">
            <summary>
            连接成功事件
            </summary>
        </member>
        <member name="E:MySoft.Net.Client.SocketClient.OnReceived">
            <summary>
            数据包进入事件
            </summary>
        </member>
        <member name="E:MySoft.Net.Client.SocketClient.OnDisconnected">
            <summary>
            出错或断开触发事件
            </summary>
        </member>
        <member name="T:MySoft.Net.Server.ConnectionFilterEventHandler">
            <summary>
            连接的代理
            </summary>
            <param name="socketAsync"></param>
        </member>
        <member name="T:MySoft.Net.Server.DisconnectionEventHandler">
            <summary>
            断开连接的代理
            </summary>
            <param name="error">错误代码</param>
            <param name="socketAsync"></param>
        </member>
        <member name="T:MySoft.Net.Server.BinaryInputEventHandler">
            <summary>
            数据包输入代理
            </summary>
            <param name="buffer">输入包</param>
            <param name="socketAsync"></param>
        </member>
        <member name="T:MySoft.Net.Server.SocketServer">
             <summary>
             ZYSOCKET框架 服务器端
            （通过6W个连接测试。理论上支持10W个连接，可谓.NET最强SOCKET模型）
             </summary>
        </member>
        <member name="F:MySoft.Net.Server.SocketServer.isDisposed">
            <summary>
            用来确定是否以释放
            </summary>
        </member>
        <member name="F:MySoft.Net.Server.SocketServer.BuffManagers">
            <summary>
            数据包管理
            </summary>
        </member>
        <member name="F:MySoft.Net.Server.SocketServer.SocketAsynPool">
            <summary>
            Socket异步对象池
            </summary>
        </member>
        <member name="F:MySoft.Net.Server.SocketServer.sock">
            <summary>
            SOCK对象
            </summary>
        </member>
        <member name="F:MySoft.Net.Server.SocketServer.MaxBufferSize">
            <summary>
            接收包大小
            </summary>
        </member>
        <member name="F:MySoft.Net.Server.SocketServer.MaxConnectCount">
            <summary>
            最大用户连接
            </summary>
        </member>
        <member name="F:MySoft.Net.Server.SocketServer.IPEndPoint">
            <summary>
            IP端点
            </summary>
        </member>
        <member name="M:MySoft.Net.Server.SocketServer.LogOutEvent(System.Object,MySoft.Logger.LogType,System.String)">
            <summary>
            输出消息
            </summary>
            <param name="o"></param>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.Net.Server.SocketServer.CallBackEvent(System.IAsyncResult)">
            <summary>
            事件处理完的回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:MySoft.Net.Server.SocketServer.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32)">
            <summary>
            实例化SocketServer类
            </summary>
            <param name="ipaddress"></param>
            <param name="port"></param>
            <param name="maxconnectcount"></param>
            <param name="maxbuffersize"></param>
        </member>
        <member name="M:MySoft.Net.Server.SocketServer.#ctor(System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
            实例化SocketServer类
            </summary>
            <param name="ipendpoint"></param>
            <param name="maxconnectcount"></param>
            <param name="maxbuffersize"></param>
        </member>
        <member name="M:MySoft.Net.Server.SocketServer.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            实例化SocketServer类
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="maxconnectcount"></param>
            <param name="maxbuffersize"></param>
        </member>
        <member name="M:MySoft.Net.Server.SocketServer.Run">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:MySoft.Net.Server.SocketServer.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:MySoft.Net.Server.SocketServer.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:MySoft.Net.Server.SocketServer.SendData(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            发送数据包
            </summary>
            <param name="socket"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:MySoft.Net.Server.SocketServer.Disconnect(System.Net.Sockets.Socket)">
            <summary>
            断开此SOCKET
            </summary>
            <param name="socket"></param>
        </member>
        <member name="P:MySoft.Net.Server.SocketServer.Sock">
            <summary>
            Socket对象
            </summary>
        </member>
        <member name="E:MySoft.Net.Server.SocketServer.OnConnectFilter">
            <summary>
            连接传入处理
            </summary>
        </member>
        <member name="E:MySoft.Net.Server.SocketServer.OnDisconnected">
            <summary>
            异常错误通常是用户断开处理
            </summary>
        </member>
        <member name="E:MySoft.Net.Server.SocketServer.OnBinaryInput">
            <summary>
            数据输入处理
            </summary>
        </member>
        <member name="P:MySoft.Net.Server.SocketServer.NoDelay">
            <summary>
            是否关闭SOCKET Delay算法
            </summary>
        </member>
        <member name="P:MySoft.Net.Server.SocketServer.ReceiveTimeout">
            <summary>
            SOCKET 的  ReceiveTimeout属性
            </summary>
        </member>
        <member name="P:MySoft.Net.Server.SocketServer.SendTimeout">
            <summary>
            SOCKET 的 SendTimeout
            </summary>
        </member>
        <member name="P:MySoft.Net.Server.SocketServer.GetMaxUserConnect">
            <summary>
            最大用户连接数
            </summary>
        </member>
        <member name="E:MySoft.Net.Server.SocketServer.OnMessageOutput">
            <summary>
            输出消息
            </summary>
        </member>
        <member name="T:MySoft.Net.Server.LogOutEventArgs">
            <summary>
            日志输出事件参数
            </summary>
        </member>
        <member name="F:MySoft.Net.Server.LogOutEventArgs.type">
            <summary>
            消息类型
            </summary>     
        </member>
        <member name="F:MySoft.Net.Server.LogOutEventArgs.message">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:MySoft.Net.Server.LogOutEventArgs.#ctor(MySoft.Logger.LogType,System.String)">
            <summary>
            实例化LogOutEventArgs
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="P:MySoft.Net.Server.LogOutEventArgs.Type">
            <summary>
            消息类型
            </summary>  
        </member>
        <member name="P:MySoft.Net.Server.LogOutEventArgs.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:MySoft.Net.Sockets.DataPacket">
            <summary>
            数据包信息
            </summary>
        </member>
        <member name="P:MySoft.Net.Sockets.DataPacket.PacketID">
            <summary>
            数据包ID
            </summary>
        </member>
        <member name="P:MySoft.Net.Sockets.DataPacket.PacketObject">
            <summary>
            数据包对象
            </summary>
        </member>
        <member name="T:MySoft.Net.Sockets.BufferTypeAttribute">
            <summary>
            数据包格式化类
            （凡是打了此标记的类才能够被 BufferFormat.FormatFCA 处理)
            </summary>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferTypeAttribute.#ctor(System.Int32)">
            <summary>
            数据包格式化类
            </summary>
            <param name="bufferCmdType">数据包命令类型</param>
        </member>
        <member name="P:MySoft.Net.Sockets.BufferTypeAttribute.BufferCmdType">
            <summary>
            数据包命令类型
            </summary>
        </member>
        <member name="T:MySoft.Net.Sockets.BufferFormat">
            <summary>
            数据包格式化类
            (此类功能是讲.NET数据转换成通讯数据包）
            </summary>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.#ctor(System.Int32)">
            <summary>
            数据包格式化类
            </summary>
            <param name="buffType">包类型</param>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.Boolean)">
            <summary>
            添加一个布尔值
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.Byte)">
            <summary>
            添加一个1字节的整数
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.Int16)">
            <summary>
            添加一个2字节的整数
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.Int32)">
            <summary>
            添加一个4字节的整数
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.UInt64)">
            <summary>
            添加一个8字节的整数
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.Single)">
            <summary>
            添加一个4字节的浮点
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.Double)">
            <summary>
            添加一个8字节的浮点
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.Byte[])">
            <summary>
            添加一个BYTE[]数据包
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.String)">
            <summary>
            添加一个字符串
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.DateTime)">
            <summary>
            添加一个一个DATATIME
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.AddItem(System.Object)">
            <summary>
            将一个对象转换为二进制数据
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.Finish">
            <summary>
            完毕
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.FormatFCA(MySoft.Net.Sockets.DataPacket)">
            <summary>
            直接格式化一个带FormatClassAttibutes 标签的类，返回BYTE[]数组，此数组可以直接发送不需要组合所数据包。所以也称为类抽象数据包
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.GetSocketBytes(System.Int32)">
            <summary>
            将一个32位整形转换成一个BYTE[]4字节
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.GetSocketBytes(System.UInt64)">
            <summary>
            将一个64位整形转换成一个BYTE[]8字节
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.GetSocketBytes(System.Char)">
            <summary>
            将一个 1位CHAR转换成1位的BYTE[]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.GetSocketBytes(System.Int16)">
            <summary>
            将一个 16位整数转换成2位的BYTE[]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.GetSocketBytes(System.Boolean)">
            <summary>
            将一个布尔值转换成一个BYTE[]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.GetSocketBytes(System.Single)">
            <summary>
            将一个32位浮点数转换成一个BYTE[]4字节
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.GetSocketBytes(System.Double)">
            <summary>
            将一个64位浮点数转换成一个BYTE[]8字节
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferFormat.SerializeObject(System.Object)">
            <summary>
            把对象序列化并返回相应的字节
            </summary>
            <param name="pObj">需要序列化的对象</param>
            <returns>byte[]</returns>
        </member>
        <member name="T:MySoft.Net.Server.SocketAsyncEventArgsPool">
            <summary>
            Based on example from http://msdn2.microsoft.com/en-us/library/system.net.sockets.socketasynceventargs.socketasynceventargs.aspx
            Represents a collection of reusable SocketAsyncEventArgs objects.  
            </summary>
        </member>
        <member name="F:MySoft.Net.Server.SocketAsyncEventArgsPool.pool">
            <summary>
            SocketAsyncEventArgs栈
            </summary>
        </member>
        <member name="M:MySoft.Net.Server.SocketAsyncEventArgsPool.#ctor(System.Int32)">
            <summary>
            初始化SocketAsyncEventArgs池
            </summary>
            <param name="capacity">最大可能使用的SocketAsyncEventArgs对象.</param>
        </member>
        <member name="M:MySoft.Net.Server.SocketAsyncEventArgsPool.Pop">
            <summary>
            弹出一个SocketAsyncEventArgs
            </summary>
            <returns>SocketAsyncEventArgs removed from the pool.</returns>
        </member>
        <member name="M:MySoft.Net.Server.SocketAsyncEventArgsPool.Push(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            添加一个 SocketAsyncEventArgs
            </summary>
            <param name="item">SocketAsyncEventArgs instance to add to the pool.</param>
        </member>
        <member name="P:MySoft.Net.Server.SocketAsyncEventArgsPool.Count">
            <summary>
            返回SocketAsyncEventArgs池中的 数量
            </summary>
        </member>
        <member name="T:MySoft.Net.Sockets.SocketConfig">
            <summary>
            接点读取类
            （一个简单的读取appconfig的类)
            </summary>
        </member>
        <member name="M:MySoft.Net.Sockets.SocketConfig.ReadString(System.String)">
            <summary>
            读取接点到字符串
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.SocketConfig.ReadInt32(System.String)">
            <summary>
            读取一个整数
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.SocketConfig.ReadFloat(System.String)">
            <summary>
            读取一个浮点数
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.SocketConfig.ReadLong(System.String)">
            <summary>
            读取一个长整型
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.SocketConfig.ReadBoolean(System.String)">
            <summary>
            读取一个布尔值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Net.Sockets.BufferReader">
            <summary>
            数据包读取类
            （此类的功能是讲通讯数据包重新转换成.NET 数据类型）
            </summary>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            数据读取
            </summary>
            <param name="data"></param>
            <param name="startIndex">需要载入数据额外处理的开始位置</param>
            <param name="length">需要载入数据额外处理的数据长度 -1为，开始INDEX到结束位置,-2就是保留最后1位</param>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadInt16(System.Int16@)">
            <summary>
            读取内存流中的头2位并转换成整型
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadInt32(System.Int32@)">
            <summary>
            读取内存流中的头4位并转换成整型
            </summary>
            <param name="ms">内存流</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadInt64(System.Int64@)">
            <summary>
            读取内存流中的头8位并转换成长整型
            </summary>
            <param name="ms">内存流</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadByte(System.Byte@)">
            <summary>
            读取内存流中的首位
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadFloat(System.Single@)">
            <summary>
            读取内存流中的头4位并转换成单精度浮点数
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadDouble(System.Double@)">
            <summary>
            读取内存流中的头8位并转换成浮点数
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadBoolean(System.Boolean@)">
            <summary>
            读取内存流中的头1位并转换成布尔值
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadString(System.String@)">
            <summary>
            读取内存流中一段字符串
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadGuid(System.Guid@)">
            <summary>
            读取内存流中的头36位并转换成Guid
            </summary>
            <param name="ms">内存流</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadByteArray(System.Byte[]@)">
            <summary>
            读取内存流中一段数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.ReadObject``1(``0@)">
            <summary>
            读取一个对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferReader.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="P:MySoft.Net.Sockets.BufferReader.Data">
            <summary>
            数据信息
            </summary>
        </member>
        <member name="P:MySoft.Net.Sockets.BufferReader.Length">
            <summary>
            数据包长度
            </summary>
        </member>
        <member name="P:MySoft.Net.Sockets.BufferReader.IsDataExtraSuccess">
            <summary>
            额外处理是否调用成功
            </summary>
        </member>
        <member name="P:MySoft.Net.Sockets.BufferReader.Postion">
            <summary>
            当前其位置
            </summary>
        </member>
        <member name="T:MySoft.Net.Server.BufferManager">
            <summary>
            数据包缓冲池
            </summary>
        </member>
        <member name="T:MySoft.Net.Server.SocketServerConfiguration">
            <summary>
            string host, int port, int maxconnectcount, int maxbuffersize
            </summary>
        </member>
        <member name="P:MySoft.Net.Server.SocketServerConfiguration.Host">
            <summary>
            主机信息，可以为localhost或any
            </summary>
        </member>
        <member name="P:MySoft.Net.Server.SocketServerConfiguration.Port">
            <summary>
            侦听端口
            </summary>
        </member>
        <member name="P:MySoft.Net.Server.SocketServerConfiguration.MaxConnectCount">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:MySoft.Net.Server.SocketServerConfiguration.MaxBufferSize">
            <summary>
            最大缓冲大小
            </summary>
        </member>
        <member name="T:MySoft.Net.Server.SocketServerManager">
            <summary>
            默认Socket服务端
            </summary>
        </member>
        <member name="M:MySoft.Net.Server.SocketServerManager.#ctor(MySoft.Net.Server.SocketServerConfiguration)">
            <summary>
            实例化Socket服务端管理器
            </summary>
            <param name="config"></param>
        </member>
        <member name="E:MySoft.Net.Server.SocketServerManager.OnBinaryInput">
            <summary>
            数据包接收
            </summary>
        </member>
        <member name="E:MySoft.Net.Server.SocketServerManager.OnDisconnected">
            <summary>
            异常错误通常是用户断开处理
            </summary>
        </member>
        <member name="E:MySoft.Net.Server.SocketServerManager.OnMessageOutput">
            <summary>
            消息输出
            </summary>
        </member>
        <member name="E:MySoft.Net.Server.SocketServerManager.OnConnectFilter">
            <summary>
            连接筛选
            </summary>
        </member>
        <member name="P:MySoft.Net.Server.SocketServerManager.Server">
            <summary>
            SOCKETSERVER对象
            </summary>
        </member>
        <member name="T:MySoft.Net.Sockets.BufferList">
            <summary>
            数据包组合类
            功能描述:保持数据包完整性。
            （通过互联网发送数据包，实际上是将一个较大的包拆分成诺干小包，此类的功能就是讲诺干小包重新组合成完整的数据包）
            此类是线程安全的
            </summary>
        </member>
        <member name="M:MySoft.Net.Sockets.BufferList.#ctor(System.Int32)">
            <summary>
            数据包组合类
            </summary>
            <param name="maxSize">数据包有可能出现的最大长度。如果不想服务器被人攻击到内存崩溃请按实际情况设置</param>
        </member>
        <member name="P:MySoft.Net.Sockets.BufferList.ByteList">
            <summary>
            数据包列表
            </summary>
        </member>
        <member name="P:MySoft.Net.Sockets.BufferList.MaxSize">
            <summary>
            数据包有可能出现的最大长度。如果不想服务器被人攻击到内存崩溃请按实际情况设置
            </summary>
        </member>
    </members>
</doc>
